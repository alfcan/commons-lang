/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package randoop.Streams;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        org.apache.commons.lang3.Streams streams0 = new org.apache.commons.lang3.Streams();
        java.lang.Class<?> wildcardClass1 = streams0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector2 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector4 = strCollectorFailableStream1.reduce(strCollector2, strCollectorBinaryOperator3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<?> wildcardClass4 = strCollectorFailableStream1.getClass();
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector7 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.Class<java.lang.CharSequence> charSequenceClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.CharSequence> charSequenceArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.CharSequence>(charSequenceClass0);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass3 = strListBiConsumer2.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector6.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass3 = characteristicsSet2.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass5 = strListSupplier4.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        java.lang.Class<?> wildcardClass4 = characteristicsFailableStream3.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass3 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass4 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector5.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass6 = characteristicsSet5.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass5 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.util.stream.Stream<org.apache.commons.lang3.Streams> streamsStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<org.apache.commons.lang3.Streams> streamsFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<org.apache.commons.lang3.Streams>(streamsStream0);
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.stream.Stream<java.util.AbstractList<java.util.stream.Collector.Characteristics>> characteristicsListStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.AbstractList<java.util.stream.Collector.Characteristics>> characteristicsListFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.AbstractList<java.util.stream.Collector.Characteristics>>(characteristicsListStream0);
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        java.lang.Class<?> wildcardClass5 = characteristicsSet3.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.util.stream.Stream<java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]>> strListFunctionStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]>> strListFunctionFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]>>(strListFunctionStream0);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.stream.Stream<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.List<java.util.stream.Collector.Characteristics>>(characteristicsListStream0);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.lang.Class<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorClass0);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass4 = strListBinaryOperator3.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector4 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector6 = strCollectorFailableStream1.reduce(strCollector4, strCollectorBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.util.stream.Stream<java.io.Serializable> serializableStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.io.Serializable> serializableFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.io.Serializable>(serializableStream0);
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.lang.Class<java.util.RandomAccess> randomAccessClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.RandomAccess> randomAccessArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.RandomAccess>(randomAccessClass0);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.util.stream.Stream<java.util.function.BinaryOperator<java.util.List<java.lang.String>>> strListBinaryOperatorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.function.BinaryOperator<java.util.List<java.lang.String>>> strListBinaryOperatorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.function.BinaryOperator<java.util.List<java.lang.String>>>(strListBinaryOperatorStream0);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.lang.Class<java.util.function.BiFunction<java.util.List<java.lang.String>, java.util.List<java.lang.String>, java.util.List<java.lang.String>>> strListBiFunctionClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.BiFunction<java.util.List<java.lang.String>, java.util.List<java.lang.String>, java.util.List<java.lang.String>>> strListBiFunctionArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.BiFunction<java.util.List<java.lang.String>, java.util.List<java.lang.String>, java.util.List<java.lang.String>>>(strListBiFunctionClass0);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector4.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass3 = strListFunction2.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector7.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector7.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.util.Collection<java.util.stream.Collector.Characteristics> characteristicsCollection0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream1 = org.apache.commons.lang3.Streams.stream(characteristicsCollection0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.lang.Class<java.lang.reflect.Type> typeClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.reflect.Type> typeArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.reflect.Type>(typeClass0);
        java.lang.Class<?> wildcardClass2 = typeArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector4.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.lang.Class<java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String>> strListBiConsumerClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String>> strListBiConsumerArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String>>(strListBiConsumerClass0);
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strListSupplier6.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector5.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector5.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        java.lang.Class<?> wildcardClass12 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector6.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector6.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector6.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        java.lang.Class<?> wildcardClass6 = characteristicsFailableStream5.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.util.stream.Stream<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.lang.Iterable<java.util.stream.Collector.Characteristics>>(characteristicsIterableStream0);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass6 = strListFunction5.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector5 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.lang.Class<java.lang.Comparable<java.lang.String>> strComparableClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Comparable<java.lang.String>> strComparableArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Comparable<java.lang.String>>(strComparableClass0);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector7.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector7.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector6.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.lang.Class<java.lang.reflect.AnnotatedElement> annotatedElementClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.reflect.AnnotatedElement> annotatedElementArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.reflect.AnnotatedElement>(annotatedElementClass0);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.lang.Class<org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>> strCollectorFailableStreamClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>> strCollectorFailableStreamArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>>(strCollectorFailableStreamClass0);
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strListBinaryOperator6.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.stream.Stream<java.lang.String> strStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.lang.String> strFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.lang.String>(strStream0);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector8.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.lang.Class<java.util.function.BinaryOperator<java.util.List<java.lang.String>>> strListBinaryOperatorClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.BinaryOperator<java.util.List<java.lang.String>>> strListBinaryOperatorArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.BinaryOperator<java.util.List<java.lang.String>>>(strListBinaryOperatorClass0);
        java.lang.Class<?> wildcardClass2 = strListBinaryOperatorArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        java.lang.Class<?> wildcardClass7 = characteristicsSet2.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        java.lang.Class<?> wildcardClass11 = characteristicsFailableStream10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.lang.Class<java.util.AbstractList<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.AbstractList<java.util.stream.Collector.Characteristics>> characteristicsListArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.AbstractList<java.util.stream.Collector.Characteristics>>(characteristicsListClass0);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.lang.Class<org.apache.commons.lang3.Streams> streamsClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<org.apache.commons.lang3.Streams> streamsArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<org.apache.commons.lang3.Streams>(streamsClass0);
        java.lang.Class<?> wildcardClass2 = streamsArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.lang.Class<java.io.Serializable> serializableClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.io.Serializable> serializableArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.io.Serializable>(serializableClass0);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector7.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.util.stream.Stream<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.Set<java.util.stream.Collector.Characteristics>>(characteristicsSetStream0);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector6.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector6.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass9 = strListBiConsumer8.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector8.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector8.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector5.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector5.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector9.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector5.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector5.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector5.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector5.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass5 = strListFunction4.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector4.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector4.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector4.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector7.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector7.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector7.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass13 = strListFunction12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector7.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector7.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector7.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector7.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector7.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass5 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector6.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector6.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.util.stream.Stream<org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>> strArrayCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>> strArrayCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>>(strArrayCollectorStream0);
        java.lang.Class<?> wildcardClass2 = strArrayCollectorFailableStream1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector9.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector9.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.stream.Stream<java.lang.reflect.GenericDeclaration> genericDeclarationStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.lang.reflect.GenericDeclaration> genericDeclarationFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.lang.reflect.GenericDeclaration>(genericDeclarationStream0);
        java.lang.Class<?> wildcardClass2 = genericDeclarationFailableStream1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass3 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass5 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector8.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector10.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector10.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector10.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = characteristicsSet10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strListBinaryOperator9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass6 = strListBinaryOperator5.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector4.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        java.lang.Class<?> wildcardClass12 = characteristicsSet10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strListFunction7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector5.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.lang.Class<java.util.function.Supplier<java.util.List<java.lang.String>>> strListSupplierClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.Supplier<java.util.List<java.lang.String>>> strListSupplierArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.Supplier<java.util.List<java.lang.String>>>(strListSupplierClass0);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector4.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector6.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector6.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector6.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass6 = strListFunction5.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strListBiConsumer9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.lang.Class<java.util.ArrayList<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.ArrayList<java.util.stream.Collector.Characteristics>> characteristicsListArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.ArrayList<java.util.stream.Collector.Characteristics>>(characteristicsListClass0);
        java.lang.Class<?> wildcardClass2 = characteristicsListArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass11 = strListSupplier10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector9.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector9.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector9.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListFunction19);
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector6.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector9.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector9.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector11.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector11.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector11.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListSupplier17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.lang.Class<?> wildcardClass7 = characteristicsSet5.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector7.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector7.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector7.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector7.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.util.stream.Stream<java.lang.reflect.Type> typeStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.lang.reflect.Type> typeFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.lang.reflect.Type>(typeStream0);
        java.lang.Class<?> wildcardClass2 = typeFailableStream1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector6.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector7.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector7.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector7.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector7.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector7.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector7.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector7.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector7.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListSupplier17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        java.lang.Class<?> wildcardClass7 = characteristicsSet4.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector4.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector4.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector4.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector12.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector12.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector12.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector8.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector8.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass5 = characteristicsSet4.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector9.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector9.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListSupplier17);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        java.lang.Class<?> wildcardClass8 = characteristicsFailableStream7.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector12.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector12.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector12.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(strListSupplier19);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector11.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector11.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector11.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector11.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector11.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector13.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListSupplier19);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector11.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector11.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector8 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListFunction6);
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector15.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector15.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector7 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce(strCollector7, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector7.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector7.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector7.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector7.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector7.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector4.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector4.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector4.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.util.stream.Stream<java.lang.reflect.AnnotatedElement> annotatedElementStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.lang.reflect.AnnotatedElement> annotatedElementFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.lang.reflect.AnnotatedElement>(annotatedElementStream0);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.stream.Stream<org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>> strCollectorFailableStreamStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>> strCollectorFailableStreamFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>>(strCollectorFailableStreamStream0);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector8.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector8.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector8.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector8.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector4.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector4.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.lang.Class<?> wildcardClass9 = characteristicsFailableStream8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass12 = strListSupplier11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass8 = strListSupplier7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strListFunction7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.lang.Class<?> wildcardClass10 = characteristicsFailableStream9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector15.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListSupplier19);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strListBinaryOperator6.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector5 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector7 = strCollectorFailableStream1.reduce(strCollector5, strCollectorBinaryOperator6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector13.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector13.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector13.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector13.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(strListFunction21);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.util.stream.Stream<java.lang.Cloneable> cloneableStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.lang.Cloneable> cloneableFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.lang.Cloneable>(cloneableStream0);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass6 = strListBiConsumer5.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass9 = strListFunction8.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector6.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector6.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce(strCollector11, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.util.stream.Stream<java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String>> strListBiConsumerStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String>> strListBiConsumerFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String>>(strListBiConsumerStream0);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        java.lang.Class<?> wildcardClass8 = characteristicsSet2.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector16.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector16.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector16.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector16.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector16.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector10.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector10.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass5 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector14.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector14.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector14.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector14.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector15.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector15.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector12.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector12.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass8 = strListBinaryOperator7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass3 = strCollectorStream2.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector5.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.util.stream.Stream<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>>(characteristicsCollectionStream0);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector13.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector13.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector10.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector10.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass6 = strListSupplier5.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass8 = strListSupplier7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector9.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector13.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector13.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector13.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector13.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector13.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(strListSupplier24);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector8 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce(strCollector8, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass4 = characteristicsSet3.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.util.stream.Stream<java.util.RandomAccess> randomAccessStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.RandomAccess> randomAccessFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.RandomAccess>(randomAccessStream0);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass9 = strListFunction8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass10 = strListFunction9.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector10.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector10.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector11.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector11.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector11.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector11.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector11.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector4.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector4.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector4.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector4.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector4.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass8 = characteristicsSet7.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector12.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector12.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector12.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector12.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(strListSupplier22);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        java.lang.Class<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Iterable<java.util.stream.Collector.Characteristics>> characteristicsIterableArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Iterable<java.util.stream.Collector.Characteristics>>(characteristicsIterableClass0);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass6 = characteristicsSet5.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector7.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector7.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector7.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector7.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector7.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector7.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector4.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector6.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector6.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector6.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector6.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector6.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector4.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector6.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector6.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector6.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector13.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector13.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector13.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector13.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector13.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListSupplier23);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector5.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector5.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector5.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector6.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector7.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector7.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector7.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector7.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector16.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector16.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector16.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector16.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector16.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector16.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strListBinaryOperator9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector19.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector19.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector19.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector19.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strListBinaryOperator6.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass4 = strListBinaryOperator3.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        java.lang.Class<?> wildcardClass6 = characteristicsSet2.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector15.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector15.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector4.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector4.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector4.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector4.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector18.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector18.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector18.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector18.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector18.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListSupplier25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector11.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector11.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector11.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector11.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector11.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector11.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector11.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(strListSupplier19);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector6.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector6.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass5 = characteristicsSet4.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass8 = strListBinaryOperator7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator2 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass4 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBinaryOperator2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector16.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector16.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector16.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector16.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector16.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector21.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector21.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector21.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector21.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListFunction27);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.util.stream.Stream<java.util.ArrayList<java.util.stream.Collector.Characteristics>> characteristicsListStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.ArrayList<java.util.stream.Collector.Characteristics>> characteristicsListFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.ArrayList<java.util.stream.Collector.Characteristics>>(characteristicsListStream0);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector8.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector8.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector8.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector8.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListFunction19);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.lang.Class<java.lang.reflect.GenericDeclaration> genericDeclarationClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.reflect.GenericDeclaration> genericDeclarationArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.reflect.GenericDeclaration>(genericDeclarationClass0);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector21.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector21.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector21.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector21.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector21.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector21.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector21.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListSupplier27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListFunction31);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        java.lang.Class<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.Collection<java.util.stream.Collector.Characteristics>>(characteristicsCollectionClass0);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strListSupplier6.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.util.stream.Stream<java.util.function.BiFunction<java.util.List<java.lang.String>, java.util.List<java.lang.String>, java.util.List<java.lang.String>>> strListBiFunctionStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.function.BiFunction<java.util.List<java.lang.String>, java.util.List<java.lang.String>, java.util.List<java.lang.String>>> strListBiFunctionFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.function.BiFunction<java.util.List<java.lang.String>, java.util.List<java.lang.String>, java.util.List<java.lang.String>>>(strListBiFunctionStream0);
        java.lang.Class<?> wildcardClass2 = strListBiFunctionFailableStream1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector14.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector14.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector14.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector14.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListSupplier21);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector12.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector12.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector12.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector11.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector11.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector11.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector11.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector11.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector23.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector23.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector23.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector23.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector23.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListFunction32);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector21.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector21.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector21.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector21.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector21.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector21.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(strListFunction31);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector21.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector21.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector21.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector21.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector21.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector21.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass8 = strListBinaryOperator7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.lang.Class<?> wildcardClass9 = characteristicsFailableStream8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.lang.Class<org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>> strArrayCollectorClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>> strArrayCollectorArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>>(strArrayCollectorClass0);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector6.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector6.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector6.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector6.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector6.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass17 = strCollectorStream16.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass15 = characteristicsSet14.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.lang.Class<?> wildcardClass8 = characteristicsFailableStream7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector23.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector23.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector23.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector20.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector20.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector20.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector20.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector20.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce(strCollector19, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector19.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector19.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector19.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass5 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector23.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector23.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector23.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListSupplier28);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector6.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector15.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector15.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector15.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector5.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector5.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector5.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector5.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector4.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector4.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector4.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.lang.Class<?> wildcardClass8 = characteristicsSet5.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector9.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector9.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector9.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.lang.Class<?> wildcardClass10 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass11 = strListBiConsumer10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector19.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector19.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector19.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector9.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector9.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector9.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.lang.Class<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.List<java.util.stream.Collector.Characteristics>> characteristicsListArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.List<java.util.stream.Collector.Characteristics>>(characteristicsListClass0);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector14.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListSupplier19);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.util.stream.Stream<java.lang.Comparable<java.lang.String>> strComparableStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.lang.Comparable<java.lang.String>> strComparableFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.lang.Comparable<java.lang.String>>(strComparableStream0);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.lang.Class<?> wildcardClass8 = characteristicsFailableStream7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass14 = strListSupplier13.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        java.lang.Class<?> wildcardClass10 = characteristicsFailableStream9.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        java.lang.Class<?> wildcardClass12 = characteristicsSet10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.util.stream.Collector.Characteristics[] characteristicsArray0 = new java.util.stream.Collector.Characteristics[] {};
        java.util.ArrayList<java.util.stream.Collector.Characteristics> characteristicsList1 = new java.util.ArrayList<java.util.stream.Collector.Characteristics>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1, characteristicsArray0);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsList1);
        java.lang.Class<?> wildcardClass5 = characteristicsFailableStream4.getClass();
        org.junit.Assert.assertNotNull(characteristicsArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        java.lang.Class<?> wildcardClass13 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector24.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector24.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector24.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector24.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector24.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector24.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector24.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector24.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector24.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector24.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListSupplier31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
        org.junit.Assert.assertNotNull(strListFunction34);
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector7.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector10.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector10.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector10.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector10.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector10.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(strListFunction20);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector18.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector18.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector18.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector18.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector18.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector18.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass12 = characteristicsSet11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector6.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector6.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector19.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector19.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector19.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector19.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector19.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListSupplier27);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector21.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector21.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector21.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector21.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector21.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector21.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector10.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector15.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector15.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector17.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector17.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector17.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce(strCollector13, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strListFunction6.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.util.stream.Stream<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.Collection<java.util.stream.Collector.Characteristics>> characteristicsCollectionFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.Collection<java.util.stream.Collector.Characteristics>>(characteristicsCollectionStream0);
        java.lang.Class<?> wildcardClass2 = characteristicsCollectionFailableStream1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector14.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector14.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector23.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector23.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector23.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector23.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector23.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector23.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.util.stream.Stream<java.lang.Object> objStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.lang.Object> objFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.lang.Object>(objStream0);
        java.lang.Class<?> wildcardClass2 = objFailableStream1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector9.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector9.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector9.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector4.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector4.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector4.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector25.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector25.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector25.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector25.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier35 = strArrayCollector25.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(strListSupplier32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListSupplier35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector25.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector25.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector8.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector8.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector8.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector8.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector8.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector8.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector8.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector8.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListSupplier20);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass13 = strListBiConsumer12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass13 = strListBinaryOperator12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListFunction24);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector8 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strListFunction6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier2 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListSupplier2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector10.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector10.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector10.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector10.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector10.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector4.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector14.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector14.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector14.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector14.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector14.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListSupplier23);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector7.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector7.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector7.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector7.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector7.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector7.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector7.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListSupplier16);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector23.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListSupplier28);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector9.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector9.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListFunction19);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector21.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector21.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector21.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListSupplier26);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce(strCollector23, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector20.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector20.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector20.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector20.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector20.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector10.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector10.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector18.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector18.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector18.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector18.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector18.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce(strCollector20, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector9.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector9.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector9.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector9.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListSupplier16);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strListBinaryOperator9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector4.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass11 = strListBinaryOperator10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector15.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector15.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector15.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector15.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass6 = strListSupplier5.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector3.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector24.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector24.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector24.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector24.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector24.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector24.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector26.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector26.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass7 = characteristicsSet6.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass7);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator2 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBinaryOperator2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass6 = strListBiConsumer5.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce(strCollector22, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector12.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector12.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector12.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector12.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListSupplier21);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector14.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector14.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector14.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector14.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector17.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector17.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector6.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector6.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector25.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector25.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector25.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(strListSupplier31);
        org.junit.Assert.assertNotNull(strListSupplier32);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce(strCollector14, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass11 = strListBiConsumer10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass13 = strListBiConsumer12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector14.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector14.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector25.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector25.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector25.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier33 = strArrayCollector25.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector25.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListSupplier33);
        org.junit.Assert.assertNotNull(strListSupplier34);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector9.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector9.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector9.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        java.lang.Class<?> wildcardClass16 = characteristicsFailableStream15.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector10.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector10.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass6 = strListBinaryOperator5.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector14.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector14.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector14.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector14.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector14.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector14.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector14.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector14.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListSupplier24);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strListFunction11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strListBiConsumer9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector9.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector9.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass5 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector28.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector28.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.lang.Class<?> wildcardClass7 = characteristicsSet5.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector10.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector10.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector24.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector24.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector24.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector24.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector24.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector24.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier33 = strArrayCollector24.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector24.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(strListSupplier33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector12.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector12.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector12.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListSupplier17);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector10.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector10.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector10.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }
}

