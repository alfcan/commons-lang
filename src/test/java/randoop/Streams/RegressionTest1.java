/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package randoop.Streams;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass26 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector27 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass26);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector27.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector27.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector27.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector27.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector27.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector27.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector27.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector27.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer36 = strArrayCollector27.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator37 = strArrayCollector27.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector39 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector27, strCollectorBinaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListBiConsumer36);
        org.junit.Assert.assertNotNull(strListBinaryOperator37);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        java.lang.Class<?> wildcardClass14 = objArrayCollector13.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector18.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector18.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector18.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector18.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strListBinaryOperator8.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass5 = characteristicsSet4.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass13 = strListSupplier12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.lang.Class<?> wildcardClass10 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strListBinaryOperator8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass14 = strListBiConsumer13.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector20.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector20.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector20.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector20.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(strListFunction29);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector13.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector13.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector13.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector13.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector13.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector13.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector8.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector8.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector8.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector28.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector28.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector28.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet36 = strArrayCollector28.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator37 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(characteristicsSet36);
        org.junit.Assert.assertNotNull(strListBinaryOperator37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce(strCollector15, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector23.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector23.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector23.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector23.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector23.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector15.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListSupplier24);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector15.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector15.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector10.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector26.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector26.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector26.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier35 = strArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector37 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListSupplier35);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector28.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector28.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector28.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector28.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListSupplier32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(strListFunction34);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strListSupplier8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector14.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListSupplier21);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector22.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector22.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector22.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector22.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector22.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector22.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector22.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector22.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector22.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector22.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector37 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListFunction35);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.lang.Class<java.lang.Cloneable> cloneableClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Cloneable> cloneableArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Cloneable>(cloneableClass0);
        java.lang.Class<?> wildcardClass2 = cloneableArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector18.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector18.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector18.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector18.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector18.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector18.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector18.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector18.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListSupplier30);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector26.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector26.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector26.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector26.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass12 = characteristicsSet11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.lang.Class<?> wildcardClass10 = characteristicsFailableStream9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass12 = characteristicsSet11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strListBiConsumer9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector17.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector17.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector17.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector5.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector5.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector5.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector5.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector5.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream16 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet15);
        java.lang.Class<?> wildcardClass17 = characteristicsFailableStream16.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(characteristicsFailableStream16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = characteristicsSet10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector12.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListFunction16);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector16.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector16.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector16.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector16.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector16.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector16.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector16.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector16.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector16.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector16.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListSupplier24);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector20.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector20.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector20.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector20.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector20.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListFunction31);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = strCollectorStream13.getClass();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strListFunction7.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector12.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strListFunction7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass13 = strListSupplier12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector12.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector12.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector23.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector23.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector23.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListSupplier31);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strListFunction6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass14 = strListFunction13.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector5.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector20.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector20.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector20.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector20.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector20.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector20.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector22.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector22.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector22.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector22.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector22.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector22.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier2 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListSupplier2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strListBinaryOperator9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector13.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector13.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector20.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector20.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector20.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector20.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector14.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector14.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector14.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector14.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector14.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass12 = strListBiConsumer11.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector6.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector6.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass17 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector16.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector16.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector16.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector16.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector16.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector10.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector10.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector10.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListSupplier17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector10.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector10.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector10.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector10.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListSupplier17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector25.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector25.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector25.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector11.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector11.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector11.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector11.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass15 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass7 = characteristicsSet6.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector8.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector8.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector8.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector23.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector20.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector20.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass15 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector5.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector5.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass7 = characteristicsSet6.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector12.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector12.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector12.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector12.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector12.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector25.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass14 = strListFunction13.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector10.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector22.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector22.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector22.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector22.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector22.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector22.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListSupplier25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListSupplier17);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector29.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector29.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector29.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier35 = strArrayCollector29.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer36 = strArrayCollector29.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator37 = strArrayCollector29.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer38 = strArrayCollector29.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListSupplier35);
        org.junit.Assert.assertNotNull(strListBiConsumer36);
        org.junit.Assert.assertNotNull(strListBinaryOperator37);
        org.junit.Assert.assertNotNull(strListBiConsumer38);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector13.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector13.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector13.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector13.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector5.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass26 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector27 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass26);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector27.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector27.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector27.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector27.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector27.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector27, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector23.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass6 = characteristicsSet5.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strListSupplier6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector21.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector21.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector21.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector21.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector21.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector21.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector21.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector21.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListSupplier27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListSupplier31);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector17.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.lang.Class<?> wildcardClass11 = characteristicsFailableStream10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass16 = strListBinaryOperator15.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector23.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector23.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector23.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector19.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector19.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector19.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListFunction25);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListSupplier15);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass10 = strListFunction9.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        java.lang.Class<?> wildcardClass10 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector19.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector19.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector19.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector19.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector19.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector19.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListSupplier31);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier2 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListSupplier2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector12.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector12.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector12.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector12.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector12.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector12.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector12.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector12.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strListSupplier6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector15.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector15.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector15.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector15.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector9.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector9.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector9.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector9.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector9.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strListSupplier8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        java.lang.Class<?> wildcardClass13 = characteristicsFailableStream12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector12.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector12.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.lang.Class<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>> characteristicsCollectionArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.AbstractCollection<java.util.stream.Collector.Characteristics>>(characteristicsCollectionClass0);
        java.lang.Class<?> wildcardClass2 = characteristicsCollectionArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector30.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector30.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector30.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector30.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector30.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier36 = strArrayCollector30.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction37 = strArrayCollector30.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector39 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListSupplier36);
        org.junit.Assert.assertNotNull(strListFunction37);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet13);
        java.lang.Class<?> wildcardClass15 = characteristicsFailableStream14.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        java.lang.Class<?> wildcardClass16 = characteristicsSet12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector25.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector25.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet14);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream16 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
        org.junit.Assert.assertNotNull(characteristicsFailableStream16);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass8 = strListBinaryOperator7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector14.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector14.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector14.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector14.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector14.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector14.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector9.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector9.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector9.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector9.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass14 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector16.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector16.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListFunction24);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass6 = strListBinaryOperator5.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass8 = characteristicsSet7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce(strCollector29, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector19.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector19.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector19.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector19.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector18.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector18.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector18.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector18.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector18.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector4.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector4.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector4.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass16 = characteristicsSet15.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector26.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector26.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector26.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListSupplier31);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass9 = strListFunction8.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector20.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector20.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListSupplier27);
        org.junit.Assert.assertNotNull(strListFunction28);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector30.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector30.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector30.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector30.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector30.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer36 = strArrayCollector30.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier37 = strArrayCollector30.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet38 = strArrayCollector30.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction39 = strArrayCollector30.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier40 = strArrayCollector30.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator41 = strArrayCollector30.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction42 = strArrayCollector30.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector44 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListBiConsumer36);
        org.junit.Assert.assertNotNull(strListSupplier37);
        org.junit.Assert.assertNotNull(characteristicsSet38);
        org.junit.Assert.assertNotNull(strListFunction39);
        org.junit.Assert.assertNotNull(strListSupplier40);
        org.junit.Assert.assertNotNull(strListBinaryOperator41);
        org.junit.Assert.assertNotNull(strListFunction42);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass8 = strListBinaryOperator7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector9.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector9.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector9.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector9.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListSupplier15);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector22.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector22.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector22.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector22.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector22.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector22.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector22.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector22.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(strListSupplier30);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListSupplier5);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector25.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector25.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector25.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector25.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector25.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector25.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector25.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector10.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector10.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListFunction19);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector9.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector9.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector9.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListSupplier17);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector13.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector13.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector6.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector6.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector6.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector30.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector30.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector30.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector30.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector30.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier36 = strArrayCollector30.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction37 = strArrayCollector30.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier38 = strArrayCollector30.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier39 = strArrayCollector30.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector41 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListFunction35);
        org.junit.Assert.assertNotNull(strListSupplier36);
        org.junit.Assert.assertNotNull(strListFunction37);
        org.junit.Assert.assertNotNull(strListSupplier38);
        org.junit.Assert.assertNotNull(strListSupplier39);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector25.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector25.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector25.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector25.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector25.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector25.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListSupplier27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strListSupplier8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.lang.Class<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.Set<java.util.stream.Collector.Characteristics>> characteristicsSetArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.Set<java.util.stream.Collector.Characteristics>>(characteristicsSetClass0);
        java.lang.Class<?> wildcardClass2 = characteristicsSetArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector19.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector19.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector19.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector19.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector19.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(strListFunction31);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass14 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector23.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector23.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector23.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListSupplier32);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass12 = strListBiConsumer11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector13.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector13.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector13.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector13.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector13.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector15.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector15.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector15.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass5 = strListBiConsumer4.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector3.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.lang.Class<?> wildcardClass9 = characteristicsSet7.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass26 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector27 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass26);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector27.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector27.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector27.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector27.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector27.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier33 = strArrayCollector27.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector27.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector27.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = strArrayCollector27.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector27.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = strArrayCollector27.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector41 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector27, strCollectorBinaryOperator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListSupplier33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass8 = strListBinaryOperator7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector30.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector30.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector30.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector30.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector30.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector30.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
        org.junit.Assert.assertNotNull(strListFunction35);
        org.junit.Assert.assertNotNull(strListFunction36);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strListSupplier6.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector3.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector3.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier2 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListSupplier2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strListFunction6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector5.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector5.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector5.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.util.stream.Stream<java.util.function.Supplier<java.util.List<java.lang.String>>> strListSupplierStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.function.Supplier<java.util.List<java.lang.String>>> strListSupplierFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.function.Supplier<java.util.List<java.lang.String>>>(strListSupplierStream0);
        java.lang.Class<?> wildcardClass2 = strListSupplierFailableStream1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector8.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector8.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector8.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector19.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector19.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector19.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector19.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector19.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector19.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListSupplier27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strListSupplier6.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector21.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector21.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector21.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector21.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector21.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector29.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector29.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector29.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer35 = strArrayCollector29.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier36 = strArrayCollector29.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction37 = strArrayCollector29.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector39 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListBiConsumer35);
        org.junit.Assert.assertNotNull(strListSupplier36);
        org.junit.Assert.assertNotNull(strListFunction37);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector30.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector30.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector30.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector30.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector30.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier36 = strArrayCollector30.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = strArrayCollector30.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector30.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier39 = strArrayCollector30.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer40 = strArrayCollector30.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector42 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListSupplier36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
        org.junit.Assert.assertNotNull(strListSupplier39);
        org.junit.Assert.assertNotNull(strListBiConsumer40);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector22.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector22.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector22.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector22.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector22.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector22.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector22.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector15.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector15.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream16 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
        org.junit.Assert.assertNotNull(characteristicsFailableStream16);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector23.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector23.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector23.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector23.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector23.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector12.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector12.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector12.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector12.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector12.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(strListFunction19);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector13.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector13.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector13.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector13.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector13.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListSupplier22);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector17.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector17.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector17.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector17.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector17.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector24.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector24.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector24.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector24.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector24.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector25.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector25.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector25.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector25.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector25.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListSupplier30);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector4.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector4.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector4.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        java.lang.Class<?> wildcardClass11 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector28.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector28.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector29.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector29.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector14.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector14.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector14.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector14.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector14.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector30.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector30.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector30.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector30.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector30.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier36 = strArrayCollector30.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = strArrayCollector30.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector30.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier39 = strArrayCollector30.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector41 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListSupplier36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
        org.junit.Assert.assertNotNull(strListSupplier39);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass7 = strListBiConsumer6.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector26.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector26.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector26.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListSupplier32);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass26 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector27 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass26);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector27.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector27.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector27.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector27.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector27.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector27, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator2 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBinaryOperator2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass13 = strListFunction12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector30.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector30.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier33 = strArrayCollector30.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector30.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector30.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector30.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier37 = strArrayCollector30.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier38 = strArrayCollector30.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListSupplier33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
        org.junit.Assert.assertNotNull(strListSupplier37);
        org.junit.Assert.assertNotNull(strListSupplier38);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.lang.Class<?> wildcardClass8 = characteristicsFailableStream7.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector10.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector10.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector19.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector19.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector30.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector30.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier33 = strArrayCollector30.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector30.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListSupplier33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass14 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector12.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector12.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector12.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector29.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector29.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector29.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector29.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet36 = strArrayCollector29.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = strArrayCollector29.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector29.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(characteristicsSet36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector29.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector29.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector29.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListFunction33);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector28.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector28.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector28.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.lang.Class<?> wildcardClass7 = characteristicsFailableStream6.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass6);
        java.lang.Class<?> wildcardClass8 = objArrayCollector7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector8.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector8.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector17.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector17.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector22.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector22.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector22.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector22.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector22.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector22.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector22.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector22.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListSupplier25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListSupplier31);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector8.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector8.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector8.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector8.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector8.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass10 = strListSupplier9.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector7.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector7.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector7.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector7.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector7.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector7.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        java.lang.Class<?> wildcardClass12 = characteristicsFailableStream11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.lang.Class<?> wildcardClass9 = characteristicsFailableStream8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        java.lang.Class<?> wildcardClass13 = characteristicsFailableStream12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector12.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector12.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector12.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector12.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass12 = strListBinaryOperator11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector17.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector17.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector17.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector17.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector17.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector17.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector13.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector10.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector10.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector10.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector10.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector24.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector24.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector24.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector24.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector24.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector24.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = characteristicsSet10.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector29.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector29.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector29.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector29.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector29.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer36 = strArrayCollector29.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = strArrayCollector29.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer38 = strArrayCollector29.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer39 = strArrayCollector29.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector41 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListBiConsumer36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(strListBiConsumer38);
        org.junit.Assert.assertNotNull(strListBiConsumer39);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListFunction18);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector26.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector26.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector26.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector26.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector26.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListSupplier32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector26.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector26.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector26.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListFunction19);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector11.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector11.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector11.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector11.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector11.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector11.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListSupplier18);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector17.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector17.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector17.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListSupplier27);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector23.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector23.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector23.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector23.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector23.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector23.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector23.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer37 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector23.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListFunction36);
        org.junit.Assert.assertNotNull(strListBiConsumer37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector15.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector15.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector15.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector15.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass5 = strListSupplier4.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector28.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier35 = strArrayCollector28.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector28.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = strArrayCollector28.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
        org.junit.Assert.assertNotNull(strListSupplier35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector25.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector25.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector14.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector14.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector14.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(strListSupplier19);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass15 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier2 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListSupplier2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strListFunction11.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }
}

