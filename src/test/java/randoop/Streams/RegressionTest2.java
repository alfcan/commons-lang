/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package randoop.Streams;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.lang.Class<?> wildcardClass8 = characteristicsFailableStream7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strListFunction11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass7 = strListBiConsumer6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass14 = strListSupplier13.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass14 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce(strCollector17, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector15.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector15.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListSupplier25);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector18.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector18.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector18.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector18.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListSupplier25);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector16.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector16.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector16.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector16.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector26.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector26.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector28.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector28.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListSupplier34);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector19.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector19.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector19.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector19.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector19.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector19.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector19.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListSupplier25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector20.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector20.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector20.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector20.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector20.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListSupplier25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector11.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector11.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector11.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector11.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector11.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector11.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector11.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector11.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector11.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector11.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListFunction16);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector5.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector5.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector5.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector5.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector5.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector5.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.lang.Class<?> wildcardClass8 = characteristicsSet6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass26 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector27 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass26);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector27.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector27.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector27.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector27.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector27.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector27.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector27.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector27.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector27.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector27, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector22.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector22.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector22.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector22.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector22.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector22.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector22.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector22.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector22.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector22.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListSupplier31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector10.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector19 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector19.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector19.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector19.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector19.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector19.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector19.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector28.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector28.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector28.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector28.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet36 = strArrayCollector28.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(characteristicsSet36);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector11.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector11.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector11.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector11.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector11.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector11.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector11.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator2 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBinaryOperator2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass16 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListSupplier17);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strListFunction11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector6.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector6.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector6.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector20.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector20.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector10.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector10.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector10.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector30.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector30.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector30.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector30.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer35 = strArrayCollector30.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet36 = strArrayCollector30.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer37 = strArrayCollector30.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector39 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListBiConsumer35);
        org.junit.Assert.assertNotNull(characteristicsSet36);
        org.junit.Assert.assertNotNull(strListBiConsumer37);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector23.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector23.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector23.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector5.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector5.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector5.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector5.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector5.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector5.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector5.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector5.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector5.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector5.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strListFunction6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector25.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector25.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector25.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListSupplier32);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector28.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector28.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector28.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector28.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector28.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer35 = strArrayCollector28.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListBiConsumer35);
        org.junit.Assert.assertNotNull(strListFunction36);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector19.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListSupplier24);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector8.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector8.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector8.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListFunction16);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream16 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream17 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
        org.junit.Assert.assertNotNull(characteristicsFailableStream16);
        org.junit.Assert.assertNotNull(characteristicsFailableStream17);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.lang.Class<?> wildcardClass2 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector22.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector22.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector22.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector22.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector22.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector22.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass26 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector27 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass26);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector27.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector27.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector27.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector27.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector27.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector27.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector27.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer35 = strArrayCollector27.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector37 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector27, strCollectorBinaryOperator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListBiConsumer35);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector6.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector6.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector6.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector6.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector9.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector9.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector9.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector9.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector9.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass9 = strListSupplier8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        java.lang.Class<java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]>> strListFunctionClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]>> strListFunctionArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]>>(strListFunctionClass0);
        java.lang.Class<?> wildcardClass2 = strListFunctionArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector16.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector16.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector16.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListSupplier24);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass6 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector7 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass6);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector7.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector7.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector7.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector7.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector7.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector7.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector7, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListFunction14);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector18.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector18.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector18.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector18.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector18.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector18.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector8.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector8.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector8.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.lang.Class<?> wildcardClass7 = characteristicsFailableStream6.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector16.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector16.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector16.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListFunction22);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass18 = strListBinaryOperator17.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier2 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListSupplier2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector6.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector6.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector6.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector6.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector16 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector17.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector17.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector17.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListSupplier25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListSupplier27);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        java.lang.Class<?> wildcardClass9 = characteristicsFailableStream8.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector25.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector25.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector25.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector25.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier33 = strArrayCollector25.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector25.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListSupplier31);
        org.junit.Assert.assertNotNull(strListSupplier32);
        org.junit.Assert.assertNotNull(strListSupplier33);
        org.junit.Assert.assertNotNull(strListSupplier34);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector24.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector24.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector24.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector24.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector24.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector24.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector24.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector24.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(strListSupplier31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector19.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector19.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector19.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector19.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector19.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector19.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector19.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListSupplier25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass29 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector30 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass29);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector30.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector30.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector30.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector30.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector30, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNotNull(strListSupplier31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass9 = strListBiConsumer8.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector10.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector10.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector10.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector10.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListSupplier5);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector8.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector8.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector8.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector8.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector8.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListSupplier14);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator2 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass30 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector31 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass30);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector31.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector31.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector31.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector31.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier36 = strArrayCollector31.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier37 = strArrayCollector31.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction38 = strArrayCollector31.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector31, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListFunction35);
        org.junit.Assert.assertNotNull(strListSupplier36);
        org.junit.Assert.assertNotNull(strListSupplier37);
        org.junit.Assert.assertNotNull(strListFunction38);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass8 = characteristicsSet7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass14 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strListBiConsumer7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector28.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector28.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier33 = strArrayCollector28.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector28.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer35 = strArrayCollector28.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListSupplier33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
        org.junit.Assert.assertNotNull(strListBiConsumer35);
        org.junit.Assert.assertNotNull(strListFunction36);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector23.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector23.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector23.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector23.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector23.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListSupplier31);
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListSupplier16);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector16.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector16.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector23.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector23.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector23.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector23.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector23.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass15 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream16 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet15);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream17 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(characteristicsFailableStream16);
        org.junit.Assert.assertNotNull(characteristicsFailableStream17);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce(strCollector12, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListFunction29);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector19.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector19.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass17 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector25.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector25.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector25.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector25.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector37 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass11 = strListBiConsumer10.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass12 = strListFunction11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector15.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strListBiConsumer7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass17 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector18 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass17);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector18.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector18.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector18.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector18.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector18.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector18.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector18, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector4.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector4.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector10 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass4 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector5 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass4);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector5.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector5.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector5.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector5.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector5.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector5.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector5, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass11 = strListBiConsumer10.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector4.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass8 = characteristicsSet7.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector15.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector15.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector15.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector15.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListSupplier25);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass11 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector12 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass11);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector12.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector12.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector12.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector12.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector12.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector12.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector12, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector17.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass18 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector19 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass18);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector19.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector19.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector19.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector19.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector19.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector19.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector19.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector19.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier30 = strArrayCollector19.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector19.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector19.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector19, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListSupplier27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListSupplier30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector16.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector16.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector16.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector16.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector16.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector16.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector30 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass7 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector8 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass7);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector8.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector8.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector8.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector8.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector8.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector8.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector8, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector25.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector25.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector25.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector25.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector25.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector25.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector25.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector25.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer36 = strArrayCollector25.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier37 = strArrayCollector25.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet38 = strArrayCollector25.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListSupplier31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
        org.junit.Assert.assertNotNull(strListFunction35);
        org.junit.Assert.assertNotNull(strListBiConsumer36);
        org.junit.Assert.assertNotNull(strListSupplier37);
        org.junit.Assert.assertNotNull(characteristicsSet38);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector28.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector28.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector28.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator37 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector39 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
        org.junit.Assert.assertNotNull(strListBinaryOperator37);
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strListBiConsumer9.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce(strCollector21, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector28.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector28.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier32 = strArrayCollector28.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector28.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListSupplier32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = characteristicsSet8.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector24.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector24.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector24.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector24.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector24.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector24.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector29.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector29.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector29.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector29.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier35 = strArrayCollector29.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet36 = strArrayCollector29.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet37 = strArrayCollector29.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer38 = strArrayCollector29.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer39 = strArrayCollector29.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator40 = strArrayCollector29.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator41 = strArrayCollector29.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet42 = strArrayCollector29.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector44 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListSupplier35);
        org.junit.Assert.assertNotNull(characteristicsSet36);
        org.junit.Assert.assertNotNull(characteristicsSet37);
        org.junit.Assert.assertNotNull(strListBiConsumer38);
        org.junit.Assert.assertNotNull(strListBiConsumer39);
        org.junit.Assert.assertNotNull(strListBinaryOperator40);
        org.junit.Assert.assertNotNull(strListBinaryOperator41);
        org.junit.Assert.assertNotNull(characteristicsSet42);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector26.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector26.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector26.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier35 = strArrayCollector26.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier36 = strArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator37 = strArrayCollector26.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector39 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListSupplier35);
        org.junit.Assert.assertNotNull(strListSupplier36);
        org.junit.Assert.assertNotNull(strListBinaryOperator37);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator18 = strArrayCollector14.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector14.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector14.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector14.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector23 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListBinaryOperator18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(strListSupplier21);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector6.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector6.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector6.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector6.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector6.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass14 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector15 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass14);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector15.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet17 = strArrayCollector15.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector15.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector15.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector15.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier21 = strArrayCollector15.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector15.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator23 = strArrayCollector15.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector15.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector15.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector15.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector15.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector15, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(characteristicsSet17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListSupplier21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListBinaryOperator23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector4.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector4.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector4.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector4.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector14 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strListBinaryOperator8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream30 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass31 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector32 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass31);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector32.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector32.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector32.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector32.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction37 = strArrayCollector32.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier38 = strArrayCollector32.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = strArrayCollector32.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = strArrayCollector32.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer41 = strArrayCollector32.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet42 = strArrayCollector32.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet43 = strArrayCollector32.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier44 = strArrayCollector32.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet45 = strArrayCollector32.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier46 = strArrayCollector32.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator47 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector48 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector32, strCollectorBinaryOperator47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNull(strCollectorStream30);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
        org.junit.Assert.assertNotNull(strListFunction35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
        org.junit.Assert.assertNotNull(strListFunction37);
        org.junit.Assert.assertNotNull(strListSupplier38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(strListBiConsumer41);
        org.junit.Assert.assertNotNull(characteristicsSet42);
        org.junit.Assert.assertNotNull(characteristicsSet43);
        org.junit.Assert.assertNotNull(strListSupplier44);
        org.junit.Assert.assertNotNull(characteristicsSet45);
        org.junit.Assert.assertNotNull(strListSupplier46);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass5 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector6 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass5);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector6.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector9 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector6, strCollectorBinaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector9.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector9.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector9.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector9.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector9.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListSupplier17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector28.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector28.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector28.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector13.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator17 = strArrayCollector13.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector13.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector13.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet20 = strArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector13.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator22 = strArrayCollector13.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector13.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector13.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator25 = strArrayCollector13.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListBinaryOperator17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(characteristicsSet20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListBinaryOperator22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListBinaryOperator25);
        org.junit.Assert.assertNotNull(strListSupplier26);
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass8 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass8);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector9.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector9.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector9.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector9.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector9.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector9.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector9.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector9, strCollectorBinaryOperator17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream30 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector31 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce(strCollector31, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNull(strCollectorStream30);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector29.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector29.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector29.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector29.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier35 = strArrayCollector29.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector29.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction37 = strArrayCollector29.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction38 = strArrayCollector29.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = strArrayCollector29.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier40 = strArrayCollector29.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet41 = strArrayCollector29.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet42 = strArrayCollector29.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator43 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector44 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListSupplier35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
        org.junit.Assert.assertNotNull(strListFunction37);
        org.junit.Assert.assertNotNull(strListFunction38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(strListSupplier40);
        org.junit.Assert.assertNotNull(characteristicsSet41);
        org.junit.Assert.assertNotNull(characteristicsSet42);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector3.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector18 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce(strCollector18, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass30 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector31 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass30);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector31.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector31.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector31.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector31.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector31.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer37 = strArrayCollector31.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction38 = strArrayCollector31.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector40 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector31, strCollectorBinaryOperator39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListFunction36);
        org.junit.Assert.assertNotNull(strListBiConsumer37);
        org.junit.Assert.assertNotNull(strListFunction38);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass6 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass21 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector22 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass21);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector22.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector22.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector22.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector22.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier28 = strArrayCollector22.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector22.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector22.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector22, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListSupplier28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        java.lang.Class<?> wildcardClass10 = characteristicsFailableStream9.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass13 = strListSupplier12.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator2 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBinaryOperator2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListSupplier16);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strListFunction7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListSupplier7);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass14 = strListBinaryOperator13.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass7 = characteristicsSet6.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector17.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector17.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector17.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator26 = strArrayCollector17.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector17.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector17.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector17.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBinaryOperator26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass15 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector28.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector28.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector28.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer36 = strArrayCollector28.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier37 = strArrayCollector28.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer38 = strArrayCollector28.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator39 = strArrayCollector28.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer40 = strArrayCollector28.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector42 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListBiConsumer36);
        org.junit.Assert.assertNotNull(strListSupplier37);
        org.junit.Assert.assertNotNull(strListBiConsumer38);
        org.junit.Assert.assertNotNull(strListBinaryOperator39);
        org.junit.Assert.assertNotNull(strListBiConsumer40);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strListFunction7.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass11 = strListBiConsumer10.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass10 = characteristicsSet9.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListSupplier13);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator14 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListBinaryOperator14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass27 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector28 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass27);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector28.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector28.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector28.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector28.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector28.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier35 = strArrayCollector28.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector28.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator37 = strArrayCollector28.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector28.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer39 = strArrayCollector28.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector41 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector28, strCollectorBinaryOperator40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListSupplier35);
        org.junit.Assert.assertNotNull(strListFunction36);
        org.junit.Assert.assertNotNull(strListBinaryOperator37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
        org.junit.Assert.assertNotNull(strListBiConsumer39);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector25.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier27 = strArrayCollector25.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector25.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector25.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector25.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector25.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
        org.junit.Assert.assertNotNull(strListSupplier27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass12 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream30 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass31 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector32 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass31);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector32.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector32.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector32.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector32.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer37 = strArrayCollector32.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector32.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = strArrayCollector32.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer40 = strArrayCollector32.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator41 = strArrayCollector32.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector43 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector32, strCollectorBinaryOperator42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNull(strCollectorStream30);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListFunction35);
        org.junit.Assert.assertNotNull(strListFunction36);
        org.junit.Assert.assertNotNull(strListBiConsumer37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(strListBiConsumer40);
        org.junit.Assert.assertNotNull(strListBinaryOperator41);
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector20.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector20.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector20.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector20.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListSupplier26);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
        org.junit.Assert.assertNotNull(strListFunction17);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector24.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector24.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector24.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector24.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector24.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector24.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector32 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass24 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector25 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass24);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector25.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector25.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector25.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector25.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector25.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector25.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector25.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector25, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector21.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector21.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector21.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector26 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass17 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass10 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector11 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass10);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector11.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator15 = strArrayCollector11.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector11.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector11.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector11.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector11, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBinaryOperator15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListFunction18);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream3 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream4 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream5 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet2);
        java.lang.Class<?> wildcardClass9 = characteristicsFailableStream8.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(characteristicsFailableStream3);
        org.junit.Assert.assertNotNull(characteristicsFailableStream4);
        org.junit.Assert.assertNotNull(characteristicsFailableStream5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass9 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass9);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector10.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector10.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector10.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector10.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector10.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector10.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector10.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer19 = strArrayCollector10.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector21 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector10, strCollectorBinaryOperator20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListFunction13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(strListBiConsumer19);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector4.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector4.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector4.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector4.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector4.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector12 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass7 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator2 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBinaryOperator2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector3.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector3.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector3.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass23 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector24 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass23);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector24.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet26 = strArrayCollector24.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector24.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator28 = strArrayCollector24.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator29 = strArrayCollector24.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector24.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier31 = strArrayCollector24.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector24.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector24.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector24.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer35 = strArrayCollector24.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier36 = strArrayCollector24.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator37 = strArrayCollector24.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector39 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector24, strCollectorBinaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(characteristicsSet26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListBinaryOperator28);
        org.junit.Assert.assertNotNull(strListBinaryOperator29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(strListSupplier31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListFunction33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListBiConsumer35);
        org.junit.Assert.assertNotNull(strListSupplier36);
        org.junit.Assert.assertNotNull(strListBinaryOperator37);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream14 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
        org.junit.Assert.assertNotNull(characteristicsFailableStream14);
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction13 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListFunction13);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListFunction15);
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector26.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector26.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector26.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet32 = strArrayCollector26.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator33 = strArrayCollector26.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(characteristicsSet32);
        org.junit.Assert.assertNotNull(strListBinaryOperator33);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass6 = strListSupplier5.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strListBinaryOperator8.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass30 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector31 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass30);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector31.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector31.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector31.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector31.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector31.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer37 = strArrayCollector31.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier38 = strArrayCollector31.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = strArrayCollector31.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction40 = strArrayCollector31.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier41 = strArrayCollector31.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator42 = strArrayCollector31.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction43 = strArrayCollector31.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction44 = strArrayCollector31.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector46 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector31, strCollectorBinaryOperator45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
        org.junit.Assert.assertNotNull(strListBiConsumer37);
        org.junit.Assert.assertNotNull(strListSupplier38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(strListFunction40);
        org.junit.Assert.assertNotNull(strListSupplier41);
        org.junit.Assert.assertNotNull(strListBinaryOperator42);
        org.junit.Assert.assertNotNull(strListFunction43);
        org.junit.Assert.assertNotNull(strListFunction44);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass10 = strListBiConsumer9.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector17.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction22 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector17.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier24 = strArrayCollector17.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector17.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListFunction22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListSupplier24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListFunction26);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass30 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector31 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass30);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector31.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet33 = strArrayCollector31.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction34 = strArrayCollector31.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector31.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector31.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier37 = strArrayCollector31.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet38 = strArrayCollector31.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = strArrayCollector31.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer40 = strArrayCollector31.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet41 = strArrayCollector31.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet42 = strArrayCollector31.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet43 = strArrayCollector31.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction44 = strArrayCollector31.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector46 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector31, strCollectorBinaryOperator45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(characteristicsSet33);
        org.junit.Assert.assertNotNull(strListFunction34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListFunction36);
        org.junit.Assert.assertNotNull(strListSupplier37);
        org.junit.Assert.assertNotNull(characteristicsSet38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(strListBiConsumer40);
        org.junit.Assert.assertNotNull(characteristicsSet41);
        org.junit.Assert.assertNotNull(characteristicsSet42);
        org.junit.Assert.assertNotNull(characteristicsSet43);
        org.junit.Assert.assertNotNull(strListFunction44);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector3.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector11 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass8 = strListFunction7.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector9 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass8);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass3 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector4 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass3);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector4.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector4.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector4.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector4.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector4.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector4.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector4.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector4.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector4.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector4.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector4.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector17 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector4, strCollectorBinaryOperator16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream15 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet14);
        java.lang.Class<?> wildcardClass16 = characteristicsSet14.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsFailableStream15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector3.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector3.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector3.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector15 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListFunction14);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer13 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListBiConsumer13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListSupplier16);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer16 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListBiConsumer16);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass13 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector14 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass13);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer15 = strArrayCollector14.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet16 = strArrayCollector14.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector14.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction18 = strArrayCollector14.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector14.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer20 = strArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector14.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector14.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector24 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector14, strCollectorBinaryOperator23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNotNull(strListBiConsumer15);
        org.junit.Assert.assertNotNull(characteristicsSet16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListFunction18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListBiConsumer20);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass22 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector23 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass22);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector23.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector23.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector23.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector23.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer29 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector23.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector23.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector33 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector23, strCollectorBinaryOperator32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListBiConsumer29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass28 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector29 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass28);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector29.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector29.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector29.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector29.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector29.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector36 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector29, strCollectorBinaryOperator35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer14 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass15 = strListBiConsumer14.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListBiConsumer14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass25 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector26 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass25);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector26.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector26.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector26.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator30 = strArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction31 = strArrayCollector26.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector26.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier33 = strArrayCollector26.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator34 = strArrayCollector26.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector26.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer36 = strArrayCollector26.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector38 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector26, strCollectorBinaryOperator37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(strListBinaryOperator30);
        org.junit.Assert.assertNotNull(strListFunction31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
        org.junit.Assert.assertNotNull(strListSupplier33);
        org.junit.Assert.assertNotNull(strListBinaryOperator34);
        org.junit.Assert.assertNotNull(strListFunction35);
        org.junit.Assert.assertNotNull(strListBiConsumer36);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector17.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector17.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector17.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet23 = strArrayCollector17.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector17.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier25 = strArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector17.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(characteristicsSet23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(strListSupplier25);
        org.junit.Assert.assertNotNull(strListFunction26);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListSupplier16);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector16.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier19 = strArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction20 = strArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet21 = strArrayCollector16.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector16.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector16.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector16.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector16.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListSupplier19);
        org.junit.Assert.assertNotNull(strListFunction20);
        org.junit.Assert.assertNotNull(characteristicsSet21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass12 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector13 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass12);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector13.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector13.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector13.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector13.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier18 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator19 = strArrayCollector13.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector13.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector22 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector13, strCollectorBinaryOperator21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(strListFunction16);
        org.junit.Assert.assertNotNull(strListFunction17);
        org.junit.Assert.assertNotNull(strListSupplier18);
        org.junit.Assert.assertNotNull(strListBinaryOperator19);
        org.junit.Assert.assertNotNull(strListSupplier20);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass20 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector21 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass20);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector21.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector21.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction24 = strArrayCollector21.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector21.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector21.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator27 = strArrayCollector21.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector21, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListFunction24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBinaryOperator27);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListSupplier6);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream13 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
        org.junit.Assert.assertNotNull(characteristicsFailableStream13);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream30 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream31 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass32 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector33 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass32);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer34 = strArrayCollector33.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector33.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector33.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator37 = strArrayCollector33.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction38 = strArrayCollector33.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier39 = strArrayCollector33.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = strArrayCollector33.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet41 = strArrayCollector33.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer42 = strArrayCollector33.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer43 = strArrayCollector33.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier44 = strArrayCollector33.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator45 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector46 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector33, strCollectorBinaryOperator45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNull(strCollectorStream30);
        org.junit.Assert.assertNull(strCollectorStream31);
        org.junit.Assert.assertNotNull(strListBiConsumer34);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListFunction36);
        org.junit.Assert.assertNotNull(strListBinaryOperator37);
        org.junit.Assert.assertNotNull(strListFunction38);
        org.junit.Assert.assertNotNull(strListSupplier39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(characteristicsSet41);
        org.junit.Assert.assertNotNull(strListBiConsumer42);
        org.junit.Assert.assertNotNull(strListBiConsumer43);
        org.junit.Assert.assertNotNull(strListSupplier44);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier2 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListSupplier2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator12 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListBinaryOperator12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListSupplier11);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream6 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet5);
        java.lang.Class<?> wildcardClass9 = characteristicsFailableStream8.getClass();
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object> objArrayCollector10 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.Object>((java.lang.Class<java.lang.Object>) wildcardClass9);
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsFailableStream6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
        org.junit.Assert.assertNotNull(strListSupplier12);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass16 = characteristicsSet15.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream30 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass31 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector32 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass31);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector32.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet34 = strArrayCollector32.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction35 = strArrayCollector32.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator36 = strArrayCollector32.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction37 = strArrayCollector32.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier38 = strArrayCollector32.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = strArrayCollector32.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet40 = strArrayCollector32.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator41 = strArrayCollector32.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet42 = strArrayCollector32.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction43 = strArrayCollector32.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet44 = strArrayCollector32.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet45 = strArrayCollector32.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet46 = strArrayCollector32.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator47 = strArrayCollector32.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector49 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector32, strCollectorBinaryOperator48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNull(strCollectorStream30);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(characteristicsSet34);
        org.junit.Assert.assertNotNull(strListFunction35);
        org.junit.Assert.assertNotNull(strListBinaryOperator36);
        org.junit.Assert.assertNotNull(strListFunction37);
        org.junit.Assert.assertNotNull(strListSupplier38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(characteristicsSet40);
        org.junit.Assert.assertNotNull(strListBinaryOperator41);
        org.junit.Assert.assertNotNull(characteristicsSet42);
        org.junit.Assert.assertNotNull(strListFunction43);
        org.junit.Assert.assertNotNull(characteristicsSet44);
        org.junit.Assert.assertNotNull(characteristicsSet45);
        org.junit.Assert.assertNotNull(characteristicsSet46);
        org.junit.Assert.assertNotNull(strListBinaryOperator47);
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet7);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer11 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator13 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListBiConsumer11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListBinaryOperator13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer12 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction15 = strArrayCollector1.finisher();
        java.lang.Class<?> wildcardClass16 = strListFunction15.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListBiConsumer12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListFunction15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet12 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction16 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsSet12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListFunction16);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListSupplier8);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListSupplier10);
        org.junit.Assert.assertNotNull(strListFunction11);
        org.junit.Assert.assertNotNull(strListFunction12);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier10 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListSupplier10);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier3 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(strListSupplier3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator11 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListBinaryOperator11);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass16 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector17 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass16);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet19 = strArrayCollector17.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier20 = strArrayCollector17.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction21 = strArrayCollector17.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier22 = strArrayCollector17.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer23 = strArrayCollector17.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer24 = strArrayCollector17.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet25 = strArrayCollector17.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer26 = strArrayCollector17.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector28 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector17, strCollectorBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
        org.junit.Assert.assertNotNull(characteristicsSet19);
        org.junit.Assert.assertNotNull(strListSupplier20);
        org.junit.Assert.assertNotNull(strListFunction21);
        org.junit.Assert.assertNotNull(strListSupplier22);
        org.junit.Assert.assertNotNull(strListBiConsumer23);
        org.junit.Assert.assertNotNull(strListBiConsumer24);
        org.junit.Assert.assertNotNull(characteristicsSet25);
        org.junit.Assert.assertNotNull(strListBiConsumer26);
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator2 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBinaryOperator2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass9 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass11 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream7 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream8 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream9 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet6);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(characteristicsFailableStream7);
        org.junit.Assert.assertNotNull(characteristicsFailableStream8);
        org.junit.Assert.assertNotNull(characteristicsFailableStream9);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer3 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator4 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListBiConsumer3);
        org.junit.Assert.assertNotNull(strListBinaryOperator4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier17 = strArrayCollector16.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer18 = strArrayCollector16.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector20 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListSupplier17);
        org.junit.Assert.assertNotNull(strListBiConsumer18);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass7 = strListBinaryOperator6.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction14 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction17 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(strListFunction14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListSupplier16);
        org.junit.Assert.assertNotNull(strListFunction17);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector25 = null;
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector27 = strCollectorFailableStream1.reduce(strCollector25, strCollectorBinaryOperator26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet13 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet14 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet15 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier16 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(characteristicsSet13);
        org.junit.Assert.assertNotNull(characteristicsSet14);
        org.junit.Assert.assertNotNull(characteristicsSet15);
        org.junit.Assert.assertNotNull(strListSupplier16);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier12 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass13 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListSupplier12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier8 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.lang.Class<?> wildcardClass10 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListSupplier8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass15 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector16 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass15);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer17 = strArrayCollector16.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet18 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction19 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator20 = strArrayCollector16.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator21 = strArrayCollector16.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer22 = strArrayCollector16.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier23 = strArrayCollector16.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector16.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector16.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector16.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction27 = strArrayCollector16.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction28 = strArrayCollector16.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction29 = strArrayCollector16.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet30 = strArrayCollector16.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer31 = strArrayCollector16.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector16.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction33 = strArrayCollector16.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector35 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector16, strCollectorBinaryOperator34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNotNull(strListBiConsumer17);
        org.junit.Assert.assertNotNull(characteristicsSet18);
        org.junit.Assert.assertNotNull(strListFunction19);
        org.junit.Assert.assertNotNull(strListBinaryOperator20);
        org.junit.Assert.assertNotNull(strListBinaryOperator21);
        org.junit.Assert.assertNotNull(strListBiConsumer22);
        org.junit.Assert.assertNotNull(strListSupplier23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(strListFunction27);
        org.junit.Assert.assertNotNull(strListFunction28);
        org.junit.Assert.assertNotNull(strListFunction29);
        org.junit.Assert.assertNotNull(characteristicsSet30);
        org.junit.Assert.assertNotNull(strListBiConsumer31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
        org.junit.Assert.assertNotNull(strListFunction33);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer6 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBiConsumer6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListFunction8);
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer10 = strArrayCollector1.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier11 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction12 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier13 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier14 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier15 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator16 = strArrayCollector1.combiner();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(strListBiConsumer10);
        org.junit.Assert.assertNotNull(strListSupplier11);
        org.junit.Assert.assertNotNull(strListFunction12);
        org.junit.Assert.assertNotNull(strListSupplier13);
        org.junit.Assert.assertNotNull(strListSupplier14);
        org.junit.Assert.assertNotNull(strListSupplier15);
        org.junit.Assert.assertNotNull(strListBinaryOperator16);
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass26 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector27 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass26);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector27.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet29 = strArrayCollector27.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction30 = strArrayCollector27.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator31 = strArrayCollector27.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction32 = strArrayCollector27.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer33 = strArrayCollector27.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier34 = strArrayCollector27.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator35 = strArrayCollector27.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector27.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer37 = strArrayCollector27.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector39 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector27, strCollectorBinaryOperator38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(characteristicsSet29);
        org.junit.Assert.assertNotNull(strListFunction30);
        org.junit.Assert.assertNotNull(strListBinaryOperator31);
        org.junit.Assert.assertNotNull(strListFunction32);
        org.junit.Assert.assertNotNull(strListBiConsumer33);
        org.junit.Assert.assertNotNull(strListSupplier34);
        org.junit.Assert.assertNotNull(strListBinaryOperator35);
        org.junit.Assert.assertNotNull(strListFunction36);
        org.junit.Assert.assertNotNull(strListBiConsumer37);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction2 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator3 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier5 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet9 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream10 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream11 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet9);
        org.junit.Assert.assertNotNull(strListFunction2);
        org.junit.Assert.assertNotNull(strListBinaryOperator3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListSupplier5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(characteristicsSet9);
        org.junit.Assert.assertNotNull(characteristicsFailableStream10);
        org.junit.Assert.assertNotNull(characteristicsFailableStream11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.lang.Class<?> wildcardClass8 = strArrayCollector1.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer7 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction10 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector.Characteristics> characteristicsFailableStream12 = org.apache.commons.lang3.Streams.stream((java.util.Collection<java.util.stream.Collector.Characteristics>) characteristicsSet11);
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBiConsumer7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListFunction10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(characteristicsFailableStream12);
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet4 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer5 = strArrayCollector1.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector1.accumulator();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(characteristicsSet4);
        org.junit.Assert.assertNotNull(strListBiConsumer5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet6 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction8 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier9 = strArrayCollector1.supplier();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(characteristicsSet6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListFunction8);
        org.junit.Assert.assertNotNull(strListSupplier9);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator7 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator8 = strArrayCollector1.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet10 = strArrayCollector1.characteristics();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListBinaryOperator7);
        org.junit.Assert.assertNotNull(strListBinaryOperator8);
        org.junit.Assert.assertNotNull(strListFunction9);
        org.junit.Assert.assertNotNull(characteristicsSet10);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream30 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream31 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream32 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass33 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector34 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass33);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer35 = strArrayCollector34.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet36 = strArrayCollector34.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction37 = strArrayCollector34.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator38 = strArrayCollector34.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet39 = strArrayCollector34.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction40 = strArrayCollector34.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator41 = strArrayCollector34.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier42 = strArrayCollector34.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator43 = strArrayCollector34.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction44 = strArrayCollector34.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet45 = strArrayCollector34.characteristics();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator46 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector47 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector34, strCollectorBinaryOperator46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNull(strCollectorStream30);
        org.junit.Assert.assertNull(strCollectorStream31);
        org.junit.Assert.assertNull(strCollectorStream32);
        org.junit.Assert.assertNotNull(strListBiConsumer35);
        org.junit.Assert.assertNotNull(characteristicsSet36);
        org.junit.Assert.assertNotNull(strListFunction37);
        org.junit.Assert.assertNotNull(strListBinaryOperator38);
        org.junit.Assert.assertNotNull(characteristicsSet39);
        org.junit.Assert.assertNotNull(strListFunction40);
        org.junit.Assert.assertNotNull(strListBinaryOperator41);
        org.junit.Assert.assertNotNull(strListSupplier42);
        org.junit.Assert.assertNotNull(strListBinaryOperator43);
        org.junit.Assert.assertNotNull(strListFunction44);
        org.junit.Assert.assertNotNull(characteristicsSet45);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.lang.Class<java.lang.String> strClass2 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector3 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass2);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer4 = strArrayCollector3.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet5 = strArrayCollector3.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction6 = strArrayCollector3.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction7 = strArrayCollector3.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector3.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer9 = strArrayCollector3.accumulator();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector3.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction11 = strArrayCollector3.finisher();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector13 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector3, strCollectorBinaryOperator12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strListBiConsumer4);
        org.junit.Assert.assertNotNull(characteristicsSet5);
        org.junit.Assert.assertNotNull(strListFunction6);
        org.junit.Assert.assertNotNull(strListFunction7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBiConsumer9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(strListFunction11);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector20.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector20.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector20.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet28 = strArrayCollector20.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector20.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer32 = strArrayCollector20.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(characteristicsSet28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBiConsumer32);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet24 = strArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer25 = strArrayCollector20.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction26 = strArrayCollector20.finisher();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer27 = strArrayCollector20.accumulator();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector29 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(characteristicsSet24);
        org.junit.Assert.assertNotNull(strListBiConsumer25);
        org.junit.Assert.assertNotNull(strListFunction26);
        org.junit.Assert.assertNotNull(strListBiConsumer27);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier7 = strArrayCollector1.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer8 = strArrayCollector1.accumulator();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction9 = strArrayCollector1.finisher();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(strListSupplier7);
        org.junit.Assert.assertNotNull(strListBiConsumer8);
        org.junit.Assert.assertNotNull(strListFunction9);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer2 = strArrayCollector1.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet3 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction4 = strArrayCollector1.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction5 = strArrayCollector1.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator6 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet8 = strArrayCollector1.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator9 = strArrayCollector1.combiner();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator10 = strArrayCollector1.combiner();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet11 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass12 = characteristicsSet11.getClass();
        org.junit.Assert.assertNotNull(strListBiConsumer2);
        org.junit.Assert.assertNotNull(characteristicsSet3);
        org.junit.Assert.assertNotNull(strListFunction4);
        org.junit.Assert.assertNotNull(strListFunction5);
        org.junit.Assert.assertNotNull(strListBinaryOperator6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(characteristicsSet8);
        org.junit.Assert.assertNotNull(strListBinaryOperator9);
        org.junit.Assert.assertNotNull(strListBinaryOperator10);
        org.junit.Assert.assertNotNull(characteristicsSet11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream19 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream20 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream21 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream22 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream23 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream24 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream25 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream26 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream27 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream28 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream29 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream30 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream31 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream32 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass33 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector34 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass33);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet35 = strArrayCollector34.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction36 = strArrayCollector34.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction37 = strArrayCollector34.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction38 = strArrayCollector34.finisher();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction39 = strArrayCollector34.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator40 = strArrayCollector34.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier41 = strArrayCollector34.supplier();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator42 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector43 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector34, strCollectorBinaryOperator42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNull(strCollectorStream19);
        org.junit.Assert.assertNull(strCollectorStream20);
        org.junit.Assert.assertNull(strCollectorStream21);
        org.junit.Assert.assertNull(strCollectorStream22);
        org.junit.Assert.assertNull(strCollectorStream23);
        org.junit.Assert.assertNull(strCollectorStream24);
        org.junit.Assert.assertNull(strCollectorStream25);
        org.junit.Assert.assertNull(strCollectorStream26);
        org.junit.Assert.assertNull(strCollectorStream27);
        org.junit.Assert.assertNull(strCollectorStream28);
        org.junit.Assert.assertNull(strCollectorStream29);
        org.junit.Assert.assertNull(strCollectorStream30);
        org.junit.Assert.assertNull(strCollectorStream31);
        org.junit.Assert.assertNull(strCollectorStream32);
        org.junit.Assert.assertNotNull(characteristicsSet35);
        org.junit.Assert.assertNotNull(strListFunction36);
        org.junit.Assert.assertNotNull(strListFunction37);
        org.junit.Assert.assertNotNull(strListFunction38);
        org.junit.Assert.assertNotNull(strListFunction39);
        org.junit.Assert.assertNotNull(strListBinaryOperator40);
        org.junit.Assert.assertNotNull(strListSupplier41);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        java.lang.Class<java.lang.String> strClass0 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector1 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass0);
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet2 = strArrayCollector1.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction3 = strArrayCollector1.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier4 = strArrayCollector1.supplier();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator5 = strArrayCollector1.combiner();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier6 = strArrayCollector1.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet7 = strArrayCollector1.characteristics();
        java.lang.Class<?> wildcardClass8 = characteristicsSet7.getClass();
        org.junit.Assert.assertNotNull(characteristicsSet2);
        org.junit.Assert.assertNotNull(strListFunction3);
        org.junit.Assert.assertNotNull(strListSupplier4);
        org.junit.Assert.assertNotNull(strListBinaryOperator5);
        org.junit.Assert.assertNotNull(strListSupplier6);
        org.junit.Assert.assertNotNull(characteristicsSet7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream0 = null;
        org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorFailableStream1 = new org.apache.commons.lang3.Streams.FailableStream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>>(strCollectorStream0);
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream2 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream3 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream4 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream5 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream6 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream7 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream8 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream9 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream10 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream11 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream12 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream13 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream14 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream15 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream16 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream17 = strCollectorFailableStream1.stream();
        java.util.stream.Stream<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorStream18 = strCollectorFailableStream1.stream();
        java.lang.Class<java.lang.String> strClass19 = null;
        org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String> strArrayCollector20 = new org.apache.commons.lang3.Streams.ArrayCollector<java.lang.String>(strClass19);
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer21 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet22 = strArrayCollector20.characteristics();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction23 = strArrayCollector20.finisher();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator24 = strArrayCollector20.combiner();
        java.util.function.Function<java.util.List<java.lang.String>, java.lang.String[]> strListFunction25 = strArrayCollector20.finisher();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier26 = strArrayCollector20.supplier();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet27 = strArrayCollector20.characteristics();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer28 = strArrayCollector20.accumulator();
        java.util.function.Supplier<java.util.List<java.lang.String>> strListSupplier29 = strArrayCollector20.supplier();
        java.util.function.BiConsumer<java.util.List<java.lang.String>, java.lang.String> strListBiConsumer30 = strArrayCollector20.accumulator();
        java.util.Set<java.util.stream.Collector.Characteristics> characteristicsSet31 = strArrayCollector20.characteristics();
        java.util.function.BinaryOperator<java.util.List<java.lang.String>> strListBinaryOperator32 = strArrayCollector20.combiner();
        java.util.function.BinaryOperator<java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>> strCollectorBinaryOperator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]> strCollector34 = strCollectorFailableStream1.reduce((java.util.stream.Collector<java.lang.String, java.util.List<java.lang.String>, java.lang.String[]>) strArrayCollector20, strCollectorBinaryOperator33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(strCollectorStream2);
        org.junit.Assert.assertNull(strCollectorStream3);
        org.junit.Assert.assertNull(strCollectorStream4);
        org.junit.Assert.assertNull(strCollectorStream5);
        org.junit.Assert.assertNull(strCollectorStream6);
        org.junit.Assert.assertNull(strCollectorStream7);
        org.junit.Assert.assertNull(strCollectorStream8);
        org.junit.Assert.assertNull(strCollectorStream9);
        org.junit.Assert.assertNull(strCollectorStream10);
        org.junit.Assert.assertNull(strCollectorStream11);
        org.junit.Assert.assertNull(strCollectorStream12);
        org.junit.Assert.assertNull(strCollectorStream13);
        org.junit.Assert.assertNull(strCollectorStream14);
        org.junit.Assert.assertNull(strCollectorStream15);
        org.junit.Assert.assertNull(strCollectorStream16);
        org.junit.Assert.assertNull(strCollectorStream17);
        org.junit.Assert.assertNull(strCollectorStream18);
        org.junit.Assert.assertNotNull(strListBiConsumer21);
        org.junit.Assert.assertNotNull(characteristicsSet22);
        org.junit.Assert.assertNotNull(strListFunction23);
        org.junit.Assert.assertNotNull(strListBinaryOperator24);
        org.junit.Assert.assertNotNull(strListFunction25);
        org.junit.Assert.assertNotNull(strListSupplier26);
        org.junit.Assert.assertNotNull(characteristicsSet27);
        org.junit.Assert.assertNotNull(strListBiConsumer28);
        org.junit.Assert.assertNotNull(strListSupplier29);
        org.junit.Assert.assertNotNull(strListBiConsumer30);
        org.junit.Assert.assertNotNull(characteristicsSet31);
        org.junit.Assert.assertNotNull(strListBinaryOperator32);
    }
}

