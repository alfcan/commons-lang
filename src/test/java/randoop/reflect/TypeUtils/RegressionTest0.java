/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package randoop.reflect.TypeUtils;

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test001");
        java.lang.reflect.Type type0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str1 = org.apache.commons.lang3.reflect.TypeUtils.toString(type0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: type");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test002");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.equals(type0, type1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test003");
        org.apache.commons.lang3.reflect.TypeUtils typeUtils0 = new org.apache.commons.lang3.reflect.TypeUtils();
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test004");
        java.lang.reflect.WildcardType wildcardType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: wildcardType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test005");
        java.lang.reflect.ParameterizedType parameterizedType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type> wildcardTypeVariableMap1 = org.apache.commons.lang3.reflect.TypeUtils.getTypeArguments(parameterizedType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test006");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped12 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test007");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.String str9 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "java.lang.reflect.Type[]" + "'", str9, "java.lang.reflect.Type[]");
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test008");
        java.lang.reflect.Type[] typeArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: bounds");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test009");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.GenericDeclaration> genericDeclarationTyped7 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass1);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type> typeTyped8 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationTyped7);
        org.junit.Assert.assertNotNull(typeTyped8);
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test010");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped12 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        java.lang.String str13 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "java.lang.reflect.Type[]" + "'", str13, "java.lang.reflect.Type[]");
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test011");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.AnnotatedElement> annotatedElementTyped1 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type0);
        org.junit.Assert.assertNotNull(annotatedElementTyped1);
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test012");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = null;
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, type5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = org.apache.commons.lang3.reflect.TypeUtils.toString(type5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: type");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test013");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = null;
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType0, type2);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test014");
        java.lang.reflect.Type type0 = null;
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray4.getClass();
        java.lang.Class<?> wildcardClass7 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals(type0, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test015");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.GenericDeclaration> genericDeclarationTyped7 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass1);
        java.lang.Class<?> wildcardClass8 = genericDeclarationTyped7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationTyped7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test016");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type23 = null;
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { type23 };
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        java.lang.reflect.Type type28 = null;
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { type28 };
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray30.getClass();
        java.lang.reflect.Type type32 = null;
        java.lang.reflect.Type[] typeArray33 = new java.lang.reflect.Type[] { type32 };
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray34.getClass();
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass31, (java.lang.reflect.Type) wildcardClass35);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped37 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.GenericArrayType genericArrayType38 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass35);
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) genericArrayType38);
        boolean boolean40 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass18, (java.lang.reflect.Type) wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(strTyped37);
        org.junit.Assert.assertNotNull(genericArrayType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test017");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.Class<?> wildcardClass5 = wildcardType2.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test018");
        java.lang.reflect.Type type0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.GenericArrayType genericArrayType1 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType(type0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: componentType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test019");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test020");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        boolean boolean2 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test021");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test022");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.Class<?> wildcardClass22 = genericArrayType20.getClass();
        java.lang.String str23 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) genericArrayType20);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.lang.reflect.Type[][]" + "'", str23, "java.lang.reflect.Type[][]");
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test023");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped4 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped15 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.GenericArrayType genericArrayType16 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass20, (java.lang.reflect.Type) wildcardClass24);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped26 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass24);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType16, (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type28 = null;
        java.lang.Class<?> wildcardClass29 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass27, type28);
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass29);
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass38);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped40 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass38);
        boolean boolean41 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass38);
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass3, (java.lang.reflect.Type) wildcardClass29);
        java.lang.reflect.Type type43 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(objTyped4);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strTyped15);
        org.junit.Assert.assertNotNull(genericArrayType16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strTyped26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strTyped40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(type43);
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test024");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray11.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.GenericArrayType genericArrayType16 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass13);
        java.lang.String str17 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(genericArrayType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.lang.reflect.Type[]" + "'", str17, "java.lang.reflect.Type[]");
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test025");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.Class<?> wildcardClass53 = typeArray52.getClass();
        java.lang.reflect.Type type54 = null;
        java.lang.reflect.Type[] typeArray55 = new java.lang.reflect.Type[] { type54 };
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray56.getClass();
        boolean boolean58 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass53, (java.lang.reflect.Type) wildcardClass57);
        java.lang.reflect.Type type59 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass53);
        java.lang.reflect.Type type60 = null;
        java.lang.reflect.Type[] typeArray61 = new java.lang.reflect.Type[] { type60 };
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray61);
        java.lang.Class<?> wildcardClass63 = typeArray62.getClass();
        java.lang.reflect.Type type64 = null;
        java.lang.reflect.Type[] typeArray65 = new java.lang.reflect.Type[] { type64 };
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray65);
        java.lang.Class<?> wildcardClass67 = typeArray66.getClass();
        boolean boolean68 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass63, (java.lang.reflect.Type) wildcardClass67);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped69 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass67);
        java.lang.reflect.GenericArrayType genericArrayType70 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass67);
        java.lang.Class<?> wildcardClass71 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass53, (java.lang.reflect.Type) genericArrayType70);
        java.lang.reflect.Type type72 = null;
        java.lang.reflect.Type[] typeArray73 = new java.lang.reflect.Type[] { type72 };
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray73);
        java.lang.Class<?> wildcardClass75 = typeArray74.getClass();
        java.lang.reflect.Type type76 = null;
        java.lang.reflect.Type[] typeArray77 = new java.lang.reflect.Type[] { type76 };
        java.lang.reflect.Type[] typeArray78 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray77);
        java.lang.Class<?> wildcardClass79 = typeArray78.getClass();
        boolean boolean80 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass75, (java.lang.reflect.Type) wildcardClass79);
        java.lang.Object obj81 = new java.lang.Object();
        java.lang.Class<?> wildcardClass82 = obj81.getClass();
        boolean boolean83 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass75, (java.lang.reflect.Type) wildcardClass82);
        java.lang.reflect.Type type84 = null;
        java.lang.reflect.Type[] typeArray85 = new java.lang.reflect.Type[] { type84 };
        java.lang.reflect.Type[] typeArray86 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray85);
        java.lang.Class<?> wildcardClass87 = typeArray86.getClass();
        java.lang.reflect.Type type88 = null;
        java.lang.reflect.Type[] typeArray89 = new java.lang.reflect.Type[] { type88 };
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray89);
        java.lang.Class<?> wildcardClass91 = typeArray90.getClass();
        boolean boolean92 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass87, (java.lang.reflect.Type) wildcardClass91);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped93 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass91);
        boolean boolean94 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass82, (java.lang.reflect.Type) wildcardClass91);
        boolean boolean95 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType70, (java.lang.reflect.Type) wildcardClass82);
        java.lang.reflect.WildcardType wildcardType96 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray97 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType96);
        boolean boolean98 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType70, (java.lang.reflect.Type) wildcardType96);
        java.lang.Class<?> wildcardClass99 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType49, (java.lang.reflect.Type) genericArrayType70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(type59);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(strTyped69);
        org.junit.Assert.assertNotNull(genericArrayType70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertNotNull(wildcardClass87);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(wildcardClass91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(strTyped93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(wildcardType96);
        org.junit.Assert.assertNotNull(typeArray97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertNull(wildcardClass99);
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test026");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray11.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.GenericArrayType genericArrayType16 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass13);
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass13);
        java.lang.String str18 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(genericArrayType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "java.lang.reflect.Type[]" + "'", str18, "java.lang.reflect.Type[]");
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test027");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type0);
        org.junit.Assert.assertNull(type1);
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test028");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass16);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped18 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass16);
        java.lang.reflect.GenericArrayType genericArrayType19 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass16);
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass8, (java.lang.reflect.Type) genericArrayType19);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType0, (java.lang.reflect.Type) genericArrayType19);
        java.lang.String str22 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) genericArrayType19);
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) genericArrayType19);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strTyped18);
        org.junit.Assert.assertNotNull(genericArrayType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.reflect.Type[][]" + "'", str22, "java.lang.reflect.Type[][]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test029");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass10, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { type23 };
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray25.getClass();
        java.lang.reflect.Type type27 = null;
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { type27 };
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        boolean boolean31 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass26, (java.lang.reflect.Type) wildcardClass30);
        java.lang.reflect.Type type32 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass26);
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean22, type32);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(type32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test030");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test031");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType21 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType21);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder20.withUpperBounds(typeArray22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = wildcardTypeBuilder19.withUpperBounds(typeArray22);
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder24.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type36 = null;
        java.lang.reflect.Type[] typeArray37 = new java.lang.reflect.Type[] { type36 };
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray38.getClass();
        java.lang.reflect.Type type40 = null;
        java.lang.reflect.Type[] typeArray41 = new java.lang.reflect.Type[] { type40 };
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray41);
        java.lang.Class<?> wildcardClass43 = typeArray42.getClass();
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass43);
        java.lang.reflect.Type type45 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass39);
        java.lang.reflect.Type type46 = null;
        java.lang.reflect.Type[] typeArray47 = new java.lang.reflect.Type[] { type46 };
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray47);
        java.lang.Class<?> wildcardClass49 = typeArray48.getClass();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.Class<?> wildcardClass53 = typeArray52.getClass();
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass53);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped55 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass53);
        java.lang.reflect.GenericArrayType genericArrayType56 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass53);
        java.lang.Class<?> wildcardClass57 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) genericArrayType56);
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { wildcardType35, genericArrayType56 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder34.withUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder33.withUpperBounds(typeArray58);
        java.lang.reflect.WildcardType wildcardType61 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder60.withLowerBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder29.withLowerBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder8.withLowerBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType66 = wildcardTypeBuilder8.build();
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strTyped55);
        org.junit.Assert.assertNotNull(genericArrayType56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(typeArray67);
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test032");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        java.lang.Class<?> wildcardClass52 = typeArray51.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test033");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type10 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder11 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType12 = wildcardTypeBuilder11.build();
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type10, (java.lang.reflect.Type) wildcardType12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass14 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder11);
        org.junit.Assert.assertNotNull(wildcardType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test034");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray1.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped4 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped15 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.GenericArrayType genericArrayType16 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass20, (java.lang.reflect.Type) wildcardClass24);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped26 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass24);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType16, (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type28 = null;
        java.lang.Class<?> wildcardClass29 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass27, type28);
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass29);
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass38);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped40 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass38);
        boolean boolean41 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass38);
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass3, (java.lang.reflect.Type) wildcardClass29);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.Typed<java.lang.String>> strTypedTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(objTyped4);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strTyped15);
        org.junit.Assert.assertNotNull(genericArrayType16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strTyped26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strTyped40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strTypedTyped43);
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test035");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.Class<?> wildcardClass2 = wildcardType0.getClass();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        java.lang.reflect.Type type29 = null;
        java.lang.reflect.Type[] typeArray30 = new java.lang.reflect.Type[] { type29 };
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass32);
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray39.getClass();
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped46 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass35, (java.lang.reflect.Type) wildcardClass44);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType23, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType23, (java.lang.reflect.Type) wildcardType49);
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardType49);
        boolean boolean53 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType49);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strTyped46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test036");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray11.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type25 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass19);
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass3, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type> typeTyped27 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(typeTyped27);
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test037");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass16);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped18 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass16);
        java.lang.reflect.GenericArrayType genericArrayType19 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass16);
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass8, (java.lang.reflect.Type) genericArrayType19);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType0, (java.lang.reflect.Type) genericArrayType19);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strTyped18);
        org.junit.Assert.assertNotNull(genericArrayType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test038");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type> typeTyped4 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.GenericArrayType genericArrayType5 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder6 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType7 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType7);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = wildcardTypeBuilder6.withUpperBounds(typeArray8);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type21 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass15);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped31 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass29);
        java.lang.reflect.GenericArrayType genericArrayType32 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass29);
        java.lang.Class<?> wildcardClass33 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) genericArrayType32);
        java.lang.reflect.Type[] typeArray34 = new java.lang.reflect.Type[] { wildcardType11, genericArrayType32 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = wildcardTypeBuilder10.withUpperBounds(typeArray34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder9.withUpperBounds(typeArray34);
        java.lang.reflect.WildcardType wildcardType37 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder36.withLowerBounds(typeArray38);
        java.lang.reflect.Type type40 = null;
        java.lang.reflect.Type[] typeArray41 = new java.lang.reflect.Type[] { type40 };
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray41);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = wildcardTypeBuilder39.withLowerBounds(typeArray44);
        java.lang.Class<?> wildcardClass46 = wildcardTypeBuilder45.getClass();
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType5, (java.lang.reflect.Type) wildcardClass46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) genericArrayType5);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeTyped4);
        org.junit.Assert.assertNotNull(genericArrayType5);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder6);
        org.junit.Assert.assertNotNull(wildcardType7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(type21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(strTyped31);
        org.junit.Assert.assertNotNull(genericArrayType32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(wildcardType37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test039");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.ParameterizedType> parameterizedTypeTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(parameterizedTypeTyped9);
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test040");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType3 = wildcardTypeBuilder0.build();
        java.lang.Class<?> wildcardClass4 = wildcardTypeBuilder0.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardType3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test041");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType1);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test042");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.GenericArrayType genericArrayType4 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(genericArrayType4);
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test043");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder0, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder0.withLowerBounds(typeArray30);
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test044");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(typeArray59);
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test045");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped12 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass20);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test046");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = null;
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType0, type2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.GenericArrayType genericArrayType4 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: componentType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(wildcardClass3);
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test047");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = null;
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass21, type22);
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass23);
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test048");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type9);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test049");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString(type5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: type");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNull(type5);
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test050");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType1, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test051");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test052");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = wildcardTypeBuilder3.withLowerBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType15 = wildcardTypeBuilder14.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test053");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass22, type23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray39.getClass();
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.Type type46 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass40);
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass40);
        java.lang.reflect.GenericArrayType genericArrayType48 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(genericArrayType48);
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test054");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        java.lang.String str12 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.lang.reflect.Type[]" + "'", str12, "java.lang.reflect.Type[]");
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test055");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        java.lang.reflect.WildcardType wildcardType59 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder52.withLowerBounds(typeArray60);
        java.lang.reflect.WildcardType wildcardType62 = wildcardTypeBuilder61.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardType59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test056");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass9);
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass9);
        java.lang.String str12 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.lang.Object" + "'", str12, "java.lang.Object");
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test057");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type> typeTyped12 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass10);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeTyped12);
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test058");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type25 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.GenericArrayType genericArrayType36 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass33);
        java.lang.Class<?> wildcardClass37 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) genericArrayType36);
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { wildcardType15, genericArrayType36 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder14.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType41 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder40.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder43.withUpperBounds(typeArray46);
        java.lang.reflect.Type type49 = null;
        java.lang.reflect.Type[] typeArray50 = new java.lang.reflect.Type[] { type49 };
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = wildcardTypeBuilder48.withUpperBounds(typeArray52);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder39.withLowerBounds(typeArray52);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType56 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder55.withUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType60 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        java.lang.reflect.Type type65 = null;
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { type65 };
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        java.lang.Class<?> wildcardClass68 = typeArray67.getClass();
        boolean boolean69 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass64, (java.lang.reflect.Type) wildcardClass68);
        java.lang.reflect.Type type70 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.Type type71 = null;
        java.lang.reflect.Type[] typeArray72 = new java.lang.reflect.Type[] { type71 };
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray72);
        java.lang.Class<?> wildcardClass74 = typeArray73.getClass();
        java.lang.reflect.Type type75 = null;
        java.lang.reflect.Type[] typeArray76 = new java.lang.reflect.Type[] { type75 };
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray76);
        java.lang.Class<?> wildcardClass78 = typeArray77.getClass();
        boolean boolean79 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass74, (java.lang.reflect.Type) wildcardClass78);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped80 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass78);
        java.lang.reflect.GenericArrayType genericArrayType81 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass78);
        java.lang.Class<?> wildcardClass82 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass64, (java.lang.reflect.Type) genericArrayType81);
        java.lang.reflect.Type[] typeArray83 = new java.lang.reflect.Type[] { wildcardType60, genericArrayType81 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder84 = wildcardTypeBuilder59.withUpperBounds(typeArray83);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder85 = wildcardTypeBuilder58.withUpperBounds(typeArray83);
        java.lang.reflect.WildcardType wildcardType86 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray87 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType86);
        java.lang.reflect.Type[] typeArray88 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType86);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder89 = wildcardTypeBuilder85.withLowerBounds(typeArray88);
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder91 = wildcardTypeBuilder39.withLowerBounds(typeArray88);
        java.lang.reflect.Type[] typeArray92 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder93 = wildcardTypeBuilder13.withUpperBounds(typeArray88);
        java.lang.reflect.Type type94 = null;
        java.lang.reflect.Type[] typeArray95 = new java.lang.reflect.Type[] { type94 };
        java.lang.reflect.Type[] typeArray96 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray95);
        java.lang.reflect.Type[] typeArray97 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray96);
        java.lang.reflect.Type[] typeArray98 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray97);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder99 = wildcardTypeBuilder13.withUpperBounds(typeArray98);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertNotNull(genericArrayType36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardType56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strTyped80);
        org.junit.Assert.assertNotNull(genericArrayType81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder84);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder85);
        org.junit.Assert.assertNotNull(wildcardType86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder93);
        org.junit.Assert.assertNotNull(typeArray95);
        org.junit.Assert.assertNotNull(typeArray96);
        org.junit.Assert.assertNotNull(typeArray97);
        org.junit.Assert.assertNotNull(typeArray98);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder99);
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test059");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType40 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder39.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType44 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder46 = wildcardTypeBuilder43.withUpperBounds(typeArray45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder42.withUpperBounds(typeArray45);
        java.lang.reflect.WildcardType wildcardType48 = wildcardTypeBuilder42.build();
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType48);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder38.withUpperBounds(typeArray49);
        java.lang.reflect.WildcardType wildcardType52 = wildcardTypeBuilder51.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardType44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardType48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardType52);
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test060");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test061");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType41 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder40.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type46 = null;
        java.lang.reflect.Type[] typeArray47 = new java.lang.reflect.Type[] { type46 };
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray47);
        java.lang.Class<?> wildcardClass49 = typeArray48.getClass();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.Class<?> wildcardClass53 = typeArray52.getClass();
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass53);
        java.lang.reflect.Type type55 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass49);
        java.lang.reflect.Type type56 = null;
        java.lang.reflect.Type[] typeArray57 = new java.lang.reflect.Type[] { type56 };
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray57);
        java.lang.Class<?> wildcardClass59 = typeArray58.getClass();
        java.lang.reflect.Type type60 = null;
        java.lang.reflect.Type[] typeArray61 = new java.lang.reflect.Type[] { type60 };
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray61);
        java.lang.Class<?> wildcardClass63 = typeArray62.getClass();
        boolean boolean64 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass59, (java.lang.reflect.Type) wildcardClass63);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped65 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass63);
        java.lang.reflect.GenericArrayType genericArrayType66 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass63);
        java.lang.Class<?> wildcardClass67 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) genericArrayType66);
        java.lang.reflect.Type[] typeArray68 = new java.lang.reflect.Type[] { wildcardType45, genericArrayType66 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = wildcardTypeBuilder44.withUpperBounds(typeArray68);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder43.withUpperBounds(typeArray68);
        java.lang.reflect.WildcardType wildcardType71 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray72 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType71);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder73 = wildcardTypeBuilder70.withLowerBounds(typeArray72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder74 = wildcardTypeBuilder39.withLowerBounds(typeArray72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder25.withUpperBounds(typeArray72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(type55);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(strTyped65);
        org.junit.Assert.assertNotNull(genericArrayType66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardType71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder73);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test062");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType10);
        java.lang.reflect.Type type23 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType10);
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        java.lang.String str25 = org.apache.commons.lang3.reflect.TypeUtils.toString(type23);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeUtilsTyped22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.lang.reflect.Type[]" + "'", str25, "java.lang.reflect.Type[]");
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test063");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.String str7 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "?" + "'", str7, "?");
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test064");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = wildcardTypeBuilder3.withLowerBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType16 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass20, (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.Type type27 = null;
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { type27 };
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) wildcardClass34);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped36 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass34);
        java.lang.reflect.GenericArrayType genericArrayType37 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass34);
        java.lang.Class<?> wildcardClass38 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass20, (java.lang.reflect.Type) genericArrayType37);
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { wildcardType16, genericArrayType37 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder15.withUpperBounds(typeArray39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder49.withUpperBounds(typeArray53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = wildcardTypeBuilder40.withLowerBounds(typeArray53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType57 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder56.withUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType61 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type62 = null;
        java.lang.reflect.Type[] typeArray63 = new java.lang.reflect.Type[] { type62 };
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray63);
        java.lang.Class<?> wildcardClass65 = typeArray64.getClass();
        java.lang.reflect.Type type66 = null;
        java.lang.reflect.Type[] typeArray67 = new java.lang.reflect.Type[] { type66 };
        java.lang.reflect.Type[] typeArray68 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray67);
        java.lang.Class<?> wildcardClass69 = typeArray68.getClass();
        boolean boolean70 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass65, (java.lang.reflect.Type) wildcardClass69);
        java.lang.reflect.Type type71 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass65);
        java.lang.reflect.Type type72 = null;
        java.lang.reflect.Type[] typeArray73 = new java.lang.reflect.Type[] { type72 };
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray73);
        java.lang.Class<?> wildcardClass75 = typeArray74.getClass();
        java.lang.reflect.Type type76 = null;
        java.lang.reflect.Type[] typeArray77 = new java.lang.reflect.Type[] { type76 };
        java.lang.reflect.Type[] typeArray78 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray77);
        java.lang.Class<?> wildcardClass79 = typeArray78.getClass();
        boolean boolean80 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass75, (java.lang.reflect.Type) wildcardClass79);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped81 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass79);
        java.lang.reflect.GenericArrayType genericArrayType82 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass79);
        java.lang.Class<?> wildcardClass83 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass65, (java.lang.reflect.Type) genericArrayType82);
        java.lang.reflect.Type[] typeArray84 = new java.lang.reflect.Type[] { wildcardType61, genericArrayType82 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder85 = wildcardTypeBuilder60.withUpperBounds(typeArray84);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder86 = wildcardTypeBuilder59.withUpperBounds(typeArray84);
        java.lang.reflect.WildcardType wildcardType87 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray88 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType87);
        java.lang.reflect.Type[] typeArray89 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType87);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder90 = wildcardTypeBuilder86.withLowerBounds(typeArray89);
        java.lang.reflect.Type[] typeArray91 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray89);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder92 = wildcardTypeBuilder40.withLowerBounds(typeArray89);
        java.lang.reflect.Type[] typeArray93 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray89);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder94 = wildcardTypeBuilder3.withUpperBounds(typeArray89);
        java.lang.Class<?> wildcardClass95 = wildcardTypeBuilder3.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(type26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strTyped36);
        org.junit.Assert.assertNotNull(genericArrayType37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(wildcardClass69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(type71);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(strTyped81);
        org.junit.Assert.assertNotNull(genericArrayType82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder85);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder86);
        org.junit.Assert.assertNotNull(wildcardType87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder94);
        org.junit.Assert.assertNotNull(wildcardClass95);
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test065");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray21.getClass();
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass18, (java.lang.reflect.Type) wildcardClass22);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped24 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass22);
        java.lang.reflect.GenericArrayType genericArrayType25 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass22);
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) genericArrayType25);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType9, (java.lang.reflect.Type) genericArrayType25);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.WildcardType> wildcardTypeTyped28 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated array contains null element at index: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strTyped24);
        org.junit.Assert.assertNotNull(genericArrayType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardTypeTyped28);
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test066");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) genericArrayType7);
        java.lang.String str9 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) genericArrayType7);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.builder.Builder<java.lang.reflect.WildcardType>> wildcardTypeBuilderTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "?[]" + "'", str9, "?[]");
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped10);
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test067");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder2 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType3 = wildcardTypeBuilder2.build();
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder2.build();
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType4);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder0.withLowerBounds(typeArray7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder2);
        org.junit.Assert.assertNotNull(wildcardType3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test068");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type10 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray12.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped15 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass14);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass14);
        java.lang.reflect.GenericArrayType genericArrayType17 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass14);
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals(type0, (java.lang.reflect.Type) genericArrayType17);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objTyped15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(genericArrayType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test069");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = null;
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass21, type22);
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass23);
        java.lang.String str25 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.lang.reflect.Type[][]" + "'", str25, "java.lang.reflect.Type[][]");
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test070");
        java.lang.reflect.WildcardType wildcardType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: wildcardType");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test071");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder34.withUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder37.withUpperBounds(typeArray40);
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder42.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder30.withUpperBounds(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test072");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder48.withLowerBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType52 = wildcardTypeBuilder51.build();
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.Class<?> wildcardClass56 = typeArray55.getClass();
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        boolean boolean61 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass56, (java.lang.reflect.Type) wildcardClass60);
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        boolean boolean64 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass56, (java.lang.reflect.Type) wildcardClass63);
        java.lang.reflect.Type type65 = null;
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { type65 };
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        java.lang.Class<?> wildcardClass68 = typeArray67.getClass();
        java.lang.reflect.Type type69 = null;
        java.lang.reflect.Type[] typeArray70 = new java.lang.reflect.Type[] { type69 };
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray70);
        java.lang.Class<?> wildcardClass72 = typeArray71.getClass();
        boolean boolean73 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass68, (java.lang.reflect.Type) wildcardClass72);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped74 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass72);
        boolean boolean75 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass63, (java.lang.reflect.Type) wildcardClass72);
        boolean boolean76 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardType52, (java.lang.reflect.Type) wildcardClass72);
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardType52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strTyped74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(typeArray77);
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test073");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType21 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType21);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder20.withUpperBounds(typeArray22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = wildcardTypeBuilder19.withUpperBounds(typeArray22);
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder24.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type36 = null;
        java.lang.reflect.Type[] typeArray37 = new java.lang.reflect.Type[] { type36 };
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray38.getClass();
        java.lang.reflect.Type type40 = null;
        java.lang.reflect.Type[] typeArray41 = new java.lang.reflect.Type[] { type40 };
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray41);
        java.lang.Class<?> wildcardClass43 = typeArray42.getClass();
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass43);
        java.lang.reflect.Type type45 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass39);
        java.lang.reflect.Type type46 = null;
        java.lang.reflect.Type[] typeArray47 = new java.lang.reflect.Type[] { type46 };
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray47);
        java.lang.Class<?> wildcardClass49 = typeArray48.getClass();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.Class<?> wildcardClass53 = typeArray52.getClass();
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass53);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped55 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass53);
        java.lang.reflect.GenericArrayType genericArrayType56 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass53);
        java.lang.Class<?> wildcardClass57 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) genericArrayType56);
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { wildcardType35, genericArrayType56 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder34.withUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder33.withUpperBounds(typeArray58);
        java.lang.reflect.WildcardType wildcardType61 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder60.withLowerBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder29.withLowerBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder8.withLowerBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType66 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType67 = wildcardTypeBuilder8.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strTyped55);
        org.junit.Assert.assertNotNull(genericArrayType56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(wildcardType67);
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test074");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        java.lang.reflect.WildcardType wildcardType59 = wildcardTypeBuilder52.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardType59);
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test075");
        java.lang.reflect.Type type0 = null;
        boolean boolean1 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test076");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder48.withLowerBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType52 = wildcardTypeBuilder51.build();
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardType52);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test077");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType10);
        java.lang.reflect.Type type23 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType10);
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        java.lang.reflect.Type type28 = null;
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { type28 };
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray30.getClass();
        boolean boolean32 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) wildcardClass31);
        java.lang.reflect.Type type33 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        java.lang.reflect.GenericArrayType genericArrayType44 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass41);
        java.lang.Class<?> wildcardClass45 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) genericArrayType44);
        java.lang.Class<?> wildcardClass46 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type23, (java.lang.reflect.Type) wildcardClass27);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.builder.Builder<java.lang.reflect.WildcardType>> wildcardTypeBuilderTyped47 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type23);
        java.lang.Class<?> wildcardClass48 = type23.getClass();
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeUtilsTyped22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertNotNull(genericArrayType44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped47);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test078");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType8 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType8);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = wildcardTypeBuilder0.withUpperBounds(typeArray9);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = wildcardTypeBuilder10.withLowerBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType15 = wildcardTypeBuilder10.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test079");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test080");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass22, type23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray39.getClass();
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped46 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.GenericArrayType genericArrayType47 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        java.lang.reflect.Type type52 = null;
        java.lang.reflect.Type[] typeArray53 = new java.lang.reflect.Type[] { type52 };
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray53);
        java.lang.Class<?> wildcardClass55 = typeArray54.getClass();
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass51, (java.lang.reflect.Type) wildcardClass55);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped57 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass55);
        java.lang.Class<?> wildcardClass58 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType47, (java.lang.reflect.Type) wildcardClass55);
        boolean boolean59 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) genericArrayType47);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strTyped46);
        org.junit.Assert.assertNotNull(genericArrayType47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strTyped57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test081");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType0);
        boolean boolean4 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test082");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Class<?> wildcardClass2 = wildcardTypeBuilder0.getClass();
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder> wildcardTypeBuilderTyped3 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped3);
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test083");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type20 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass14);
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        boolean boolean29 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass28);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped30 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass28);
        java.lang.reflect.GenericArrayType genericArrayType31 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass28);
        java.lang.Class<?> wildcardClass32 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) genericArrayType31);
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass32);
        java.lang.String str34 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass32);
        java.lang.Class<?> wildcardClass35 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass32);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.GenericArrayType> genericArrayTypeTyped36 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass35);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strTyped30);
        org.junit.Assert.assertNotNull(genericArrayType31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.lang.reflect.Type[]" + "'", str34, "java.lang.reflect.Type[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(genericArrayTypeTyped36);
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test084");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder2 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType3 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray10.getClass();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass11);
        java.lang.reflect.Type type13 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        java.lang.reflect.Type type18 = null;
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] { type18 };
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) wildcardClass21);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped23 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass21);
        java.lang.reflect.GenericArrayType genericArrayType24 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass21);
        java.lang.Class<?> wildcardClass25 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) genericArrayType24);
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { wildcardType3, genericArrayType24 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = wildcardTypeBuilder2.withUpperBounds(typeArray26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType29 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder28.withUpperBounds(typeArray30);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType33 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = wildcardTypeBuilder32.withUpperBounds(typeArray34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder31.withUpperBounds(typeArray34);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder36.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder27.withLowerBounds(typeArray40);
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.Class<?> wildcardClass46 = typeArray45.getClass();
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass50);
        java.lang.Object obj52 = new java.lang.Object();
        java.lang.Class<?> wildcardClass53 = obj52.getClass();
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass53);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped55 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass46);
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass46);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped57 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass46);
        boolean boolean58 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder27, (java.lang.reflect.Type) wildcardClass46);
        java.lang.String str59 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass46);
        boolean boolean60 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder2);
        org.junit.Assert.assertNotNull(wildcardType3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(type13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strTyped23);
        org.junit.Assert.assertNotNull(genericArrayType24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardType29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
        org.junit.Assert.assertNotNull(wildcardType33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objTyped57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "java.lang.reflect.Type[]" + "'", str59, "java.lang.reflect.Type[]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test085");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        java.lang.String str7 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "java.lang.reflect.Type[]" + "'", str7, "java.lang.reflect.Type[]");
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test086");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder8.withUpperBounds(typeArray18);
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = wildcardTypeBuilder20.withUpperBounds(typeArray26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType29 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder28.withUpperBounds(typeArray30);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType33 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        java.lang.reflect.Type type43 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.Type type44 = null;
        java.lang.reflect.Type[] typeArray45 = new java.lang.reflect.Type[] { type44 };
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.Class<?> wildcardClass47 = typeArray46.getClass();
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass51);
        java.lang.reflect.GenericArrayType genericArrayType54 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass51);
        java.lang.Class<?> wildcardClass55 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) genericArrayType54);
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { wildcardType33, genericArrayType54 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder32.withUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder31.withUpperBounds(typeArray56);
        java.lang.reflect.WildcardType wildcardType59 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder58.withLowerBounds(typeArray60);
        java.lang.reflect.WildcardType wildcardType62 = wildcardTypeBuilder58.build();
        java.lang.reflect.Type type63 = null;
        java.lang.reflect.Type[] typeArray64 = new java.lang.reflect.Type[] { type63 };
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray64);
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray64);
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder68 = wildcardTypeBuilder58.withLowerBounds(typeArray66);
        java.lang.reflect.WildcardType wildcardType69 = wildcardTypeBuilder68.build();
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder27.withLowerBounds(typeArray70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardType29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
        org.junit.Assert.assertNotNull(wildcardType33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(type43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strTyped53);
        org.junit.Assert.assertNotNull(genericArrayType54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardType59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder68);
        org.junit.Assert.assertNotNull(wildcardType69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test087");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType22 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = wildcardTypeBuilder21.withUpperBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType26 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = wildcardTypeBuilder25.withUpperBounds(typeArray27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder24.withUpperBounds(typeArray27);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType36 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder35.withUpperBounds(typeArray37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType40 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray47.getClass();
        boolean boolean49 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass48);
        java.lang.reflect.Type type50 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        java.lang.reflect.Type type55 = null;
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { type55 };
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.Class<?> wildcardClass58 = typeArray57.getClass();
        boolean boolean59 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass58);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped60 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass58);
        java.lang.reflect.GenericArrayType genericArrayType61 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass58);
        java.lang.Class<?> wildcardClass62 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) genericArrayType61);
        java.lang.reflect.Type[] typeArray63 = new java.lang.reflect.Type[] { wildcardType40, genericArrayType61 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder39.withUpperBounds(typeArray63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder38.withUpperBounds(typeArray63);
        java.lang.reflect.WildcardType wildcardType66 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType66);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder68 = wildcardTypeBuilder65.withLowerBounds(typeArray67);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = wildcardTypeBuilder34.withLowerBounds(typeArray67);
        java.lang.reflect.WildcardType wildcardType70 = wildcardTypeBuilder69.build();
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType70);
        java.lang.reflect.Type[] typeArray72 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType70);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder73 = wildcardTypeBuilder15.withUpperBounds(typeArray72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardType26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardType36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strTyped60);
        org.junit.Assert.assertNotNull(genericArrayType61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
        org.junit.Assert.assertNotNull(wildcardType70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder73);
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test088");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.WildcardType wildcardType53 = wildcardTypeBuilder40.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType53);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated array contains null element at index: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test089");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray10.getClass();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass11);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped13 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass11);
        java.lang.reflect.GenericArrayType genericArrayType14 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass11);
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray21.getClass();
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass18, (java.lang.reflect.Type) wildcardClass22);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped24 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass22);
        java.lang.Class<?> wildcardClass25 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType14, (java.lang.reflect.Type) wildcardClass22);
        java.lang.Class<?> wildcardClass26 = genericArrayType14.getClass();
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) genericArrayType14);
        java.lang.String str28 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) genericArrayType14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strTyped13);
        org.junit.Assert.assertNotNull(genericArrayType14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strTyped24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "java.lang.reflect.Type[][]" + "'", str28, "java.lang.reflect.Type[][]");
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test090");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType10 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder9.withUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType14 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = wildcardTypeBuilder13.withUpperBounds(typeArray15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray15);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder12.build();
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder8.withUpperBounds(typeArray20);
        java.lang.reflect.WildcardType wildcardType22 = wildcardTypeBuilder8.build();
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(typeArray23);
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test091");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type type49 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType20);
        boolean boolean50 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) genericArrayType20);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test092");
        java.lang.reflect.Type type0 = null;
        boolean boolean1 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test093");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test094");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test095");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder48.withUpperBounds(typeArray53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType56 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder55.withUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType60 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = wildcardTypeBuilder59.withUpperBounds(typeArray61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder58.withUpperBounds(typeArray61);
        java.lang.reflect.Type type64 = null;
        java.lang.reflect.Type[] typeArray65 = new java.lang.reflect.Type[] { type64 };
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray65);
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray65);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder68 = wildcardTypeBuilder63.withUpperBounds(typeArray67);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = wildcardTypeBuilder54.withLowerBounds(typeArray67);
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardType56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
        org.junit.Assert.assertNotNull(typeArray70);
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test096");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = null;
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType0, type2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test097");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType10 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder9.withUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType14 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = wildcardTypeBuilder13.withUpperBounds(typeArray15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray15);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder12.build();
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder8.withUpperBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType23 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder22.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type28 = null;
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { type28 };
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray30.getClass();
        java.lang.reflect.Type type32 = null;
        java.lang.reflect.Type[] typeArray33 = new java.lang.reflect.Type[] { type32 };
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray34.getClass();
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass31, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.Type type37 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass31);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        java.lang.reflect.Type type42 = null;
        java.lang.reflect.Type[] typeArray43 = new java.lang.reflect.Type[] { type42 };
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray43);
        java.lang.Class<?> wildcardClass45 = typeArray44.getClass();
        boolean boolean46 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass41, (java.lang.reflect.Type) wildcardClass45);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped47 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass45);
        java.lang.reflect.GenericArrayType genericArrayType48 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass45);
        java.lang.Class<?> wildcardClass49 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass31, (java.lang.reflect.Type) genericArrayType48);
        java.lang.reflect.Type[] typeArray50 = new java.lang.reflect.Type[] { wildcardType27, genericArrayType48 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder26.withUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder25.withUpperBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType53 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType53);
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder52.withLowerBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder8.withUpperBounds(typeArray57);
        java.lang.reflect.WildcardType wildcardType59 = wildcardTypeBuilder8.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strTyped47);
        org.junit.Assert.assertNotNull(genericArrayType48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardType59);
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test098");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test099");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder13.build();
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test100");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.Class<?> wildcardClass49 = typeArray46.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test101");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test102");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped12 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass20);
        java.lang.String str22 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass20);
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass20);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.reflect.Type[]" + "'", str22, "java.lang.reflect.Type[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test103");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        java.lang.Class<?> wildcardClass35 = wildcardType34.getClass();
        java.lang.reflect.GenericArrayType genericArrayType36 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(genericArrayType36);
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test104");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Class<?> wildcardClass2 = wildcardTypeBuilder0.getClass();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray10.getClass();
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass15);
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass18);
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass11);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass7);
        java.lang.String str22 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped23 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.reflect.Type[]" + "'", str22, "java.lang.reflect.Type[]");
        org.junit.Assert.assertNotNull(typeArrayTyped23);
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test105");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test106");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Class<?> wildcardClass2 = wildcardTypeBuilder0.getClass();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray10.getClass();
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass15);
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass18);
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass11);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test107");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = wildcardTypeBuilder10.build();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type9, (java.lang.reflect.Type) wildcardType11);
        org.apache.commons.lang3.reflect.Typed<java.lang.Class<?>> wildcardClassTyped13 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type9);
        java.lang.String str14 = org.apache.commons.lang3.reflect.TypeUtils.toString(type9);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClassTyped13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "java.lang.reflect.Type" + "'", str14, "java.lang.reflect.Type");
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test108");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray11.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.GenericArrayType genericArrayType16 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass13);
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass13);
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray21.getClass();
        java.lang.reflect.Type type23 = null;
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { type23 };
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray25.getClass();
        boolean boolean27 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass22, (java.lang.reflect.Type) wildcardClass26);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped28 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass26);
        java.lang.reflect.GenericArrayType genericArrayType29 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass26);
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass26);
        java.lang.Class<?> wildcardClass31 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass26);
        boolean boolean32 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(genericArrayType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(strTyped28);
        org.junit.Assert.assertNotNull(genericArrayType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test109");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass22, type23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.Comparable<java.lang.String>> strComparableTyped37 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.WildcardType wildcardType38 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType38);
        java.lang.reflect.Type type40 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType38);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType38);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType38);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType38);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardType38);
        java.lang.reflect.GenericArrayType genericArrayType45 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType38);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strComparableTyped37);
        org.junit.Assert.assertNotNull(wildcardType38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(genericArrayType45);
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test110");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder48.withLowerBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType53 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = wildcardTypeBuilder52.withUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType57 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder56.withUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder55.withUpperBounds(typeArray58);
        java.lang.reflect.WildcardType wildcardType61 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType61);
        java.lang.reflect.Type type63 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType61);
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType61);
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType61);
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray65);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = wildcardTypeBuilder60.withUpperBounds(typeArray65);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder68 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType69 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder68.withUpperBounds(typeArray70);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder72 = wildcardTypeBuilder67.withUpperBounds(typeArray70);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder73 = wildcardTypeBuilder48.withUpperBounds(typeArray70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNull(type63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder68);
        org.junit.Assert.assertNotNull(wildcardType69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder73);
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test111");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped12 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test112");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = null;
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass21, type22);
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type26 = null;
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, type26);
        java.lang.reflect.GenericArrayType genericArrayType28 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(genericArrayType28);
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test113");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.Type type19 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped24 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass26 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass23);
        boolean boolean27 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type28 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.ParameterizedType> parameterizedTypeTyped29 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type28);
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type28);
        java.lang.reflect.GenericArrayType genericArrayType31 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType(type28);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objTyped24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertNotNull(parameterizedTypeTyped29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(genericArrayType31);
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test114");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = wildcardTypeBuilder20.withLowerBounds(typeArray23);
        java.lang.reflect.WildcardType wildcardType27 = wildcardTypeBuilder26.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test115");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType16 = wildcardTypeBuilder15.build();
        java.lang.reflect.WildcardType wildcardType17 = wildcardTypeBuilder15.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(wildcardType17);
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test116");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray10.getClass();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass11);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped13 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass11);
        java.lang.reflect.GenericArrayType genericArrayType14 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass11);
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray21.getClass();
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass18, (java.lang.reflect.Type) wildcardClass22);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped24 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass22);
        java.lang.Class<?> wildcardClass25 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType14, (java.lang.reflect.Type) wildcardClass22);
        java.lang.Class<?> wildcardClass26 = genericArrayType14.getClass();
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) genericArrayType14);
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type type29 = null;
        java.lang.reflect.Type[] typeArray30 = new java.lang.reflect.Type[] { type29 };
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        java.lang.reflect.Type type33 = null;
        java.lang.reflect.Type[] typeArray34 = new java.lang.reflect.Type[] { type33 };
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray34);
        java.lang.Class<?> wildcardClass36 = typeArray35.getClass();
        boolean boolean37 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass36);
        java.lang.reflect.Type type38 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray40.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass42);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass42);
        java.lang.String str45 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass32);
        boolean boolean46 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strTyped13);
        org.junit.Assert.assertNotNull(genericArrayType14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strTyped24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(type38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(objTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.lang.reflect.Type[]" + "'", str45, "java.lang.reflect.Type[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test117");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder1 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder1.build();
        java.lang.reflect.WildcardType wildcardType3 = wildcardTypeBuilder1.build();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray10.getClass();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass11);
        java.lang.Object obj13 = new java.lang.Object();
        java.lang.Class<?> wildcardClass14 = obj13.getClass();
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass14);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped16 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped18 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass24);
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder1, (java.lang.reflect.Type) wildcardClass7);
        boolean boolean27 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardType3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objTyped18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test118");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = wildcardTypeBuilder10.build();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type9, (java.lang.reflect.Type) wildcardType11);
        java.lang.reflect.Type type13 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType11);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNull(type13);
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test119");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass9);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped11 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strTyped11);
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test120");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder11 = wildcardTypeBuilder8.withUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder7.withUpperBounds(typeArray10);
        java.lang.reflect.WildcardType wildcardType13 = wildcardTypeBuilder7.build();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = wildcardTypeBuilder7.withLowerBounds(typeArray17);
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType19);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder18.withUpperBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = wildcardTypeBuilder0.withUpperBounds(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardType13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test121");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test122");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        java.lang.reflect.Type type37 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType35);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType35);
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.Class<?> wildcardClass43 = typeArray42.getClass();
        java.lang.reflect.Type type44 = null;
        java.lang.reflect.Type[] typeArray45 = new java.lang.reflect.Type[] { type44 };
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.Class<?> wildcardClass47 = typeArray46.getClass();
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass51);
        java.lang.reflect.GenericArrayType genericArrayType54 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass51);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.Type) genericArrayType54);
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType35, (java.lang.reflect.Type) genericArrayType54);
        boolean boolean57 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type34, (java.lang.reflect.Type) wildcardType35);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType35);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder30.withUpperBounds(typeArray59);
        java.lang.reflect.Type type62 = null;
        boolean boolean63 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder61, type62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strTyped53);
        org.junit.Assert.assertNotNull(genericArrayType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test123");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped12 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type16 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(type16);
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test124");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass21);
        java.lang.String str23 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass21);
        java.lang.reflect.Type type24 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "java.lang.reflect.Type[]" + "'", str23, "java.lang.reflect.Type[]");
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test125");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test126");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.Class<?> wildcardClass8 = wildcardType1.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test127");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.Comparable<java.lang.String>> strComparableTyped23 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(strComparableTyped23);
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test128");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type> typeTyped1 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type0);
        org.junit.Assert.assertNotNull(typeTyped1);
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test129");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test130");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test131");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder48.withLowerBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType52 = wildcardTypeBuilder51.build();
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.Class<?> wildcardClass56 = typeArray55.getClass();
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        boolean boolean61 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass56, (java.lang.reflect.Type) wildcardClass60);
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        boolean boolean64 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass56, (java.lang.reflect.Type) wildcardClass63);
        java.lang.reflect.Type type65 = null;
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { type65 };
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        java.lang.Class<?> wildcardClass68 = typeArray67.getClass();
        java.lang.reflect.Type type69 = null;
        java.lang.reflect.Type[] typeArray70 = new java.lang.reflect.Type[] { type69 };
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray70);
        java.lang.Class<?> wildcardClass72 = typeArray71.getClass();
        boolean boolean73 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass68, (java.lang.reflect.Type) wildcardClass72);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped74 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass72);
        boolean boolean75 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass63, (java.lang.reflect.Type) wildcardClass72);
        boolean boolean76 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardType52, (java.lang.reflect.Type) wildcardClass72);
        java.lang.String str77 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardType52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strTyped74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "java.lang.reflect.Type[]" + "'", str77, "java.lang.reflect.Type[]");
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test132");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder0, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder0.withLowerBounds(typeArray30);
        java.lang.reflect.WildcardType wildcardType32 = wildcardTypeBuilder0.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardType32);
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test133");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString(type5);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "java.lang.reflect.Type" + "'", str6, "java.lang.reflect.Type");
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test134");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass22, type23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.Comparable<java.lang.String>> strComparableTyped37 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strComparableTyped37);
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test135");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType8 = wildcardTypeBuilder7.build();
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass16);
        java.lang.reflect.Type type18 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass12);
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray20.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped23 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass22);
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass22);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType8, (java.lang.reflect.Type) wildcardClass12);
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(type18);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(objTyped23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test136");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.WildcardType wildcardType2 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type type7 = null;
        java.lang.Class<?> wildcardClass8 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType2, type7);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType10);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(type11);
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test137");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType10 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder9.withUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType14 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = wildcardTypeBuilder13.withUpperBounds(typeArray15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray15);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder12.build();
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder8.withUpperBounds(typeArray20);
        java.lang.reflect.WildcardType wildcardType22 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType23 = wildcardTypeBuilder8.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType25 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType25);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = wildcardTypeBuilder24.withUpperBounds(typeArray26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType29 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder28.withUpperBounds(typeArray30);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = wildcardTypeBuilder27.withUpperBounds(typeArray30);
        java.lang.reflect.WildcardType wildcardType33 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType33);
        java.lang.reflect.Type type35 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType33);
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType33);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType33);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder32.withUpperBounds(typeArray37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType41 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder40.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder32.withUpperBounds(typeArray42);
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray47);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder44.withUpperBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType52 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType52);
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType52);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = wildcardTypeBuilder44.withUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder8.withLowerBounds(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(wildcardType25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardType29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
        org.junit.Assert.assertNotNull(wildcardType33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNull(type35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardType52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test138");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        java.lang.reflect.Type type59 = null;
        java.lang.reflect.Type[] typeArray60 = new java.lang.reflect.Type[] { type59 };
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray61);
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder52.withUpperBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType65 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType65);
        java.lang.reflect.Type type67 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType65);
        java.lang.reflect.Type[] typeArray68 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType65);
        java.lang.reflect.Type type69 = null;
        java.lang.reflect.Type[] typeArray70 = new java.lang.reflect.Type[] { type69 };
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray70);
        java.lang.reflect.Type[] typeArray72 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray70);
        java.lang.Class<?> wildcardClass73 = typeArray72.getClass();
        java.lang.reflect.Type type74 = null;
        java.lang.reflect.Type[] typeArray75 = new java.lang.reflect.Type[] { type74 };
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray75);
        java.lang.Class<?> wildcardClass77 = typeArray76.getClass();
        java.lang.reflect.Type type78 = null;
        java.lang.reflect.Type[] typeArray79 = new java.lang.reflect.Type[] { type78 };
        java.lang.reflect.Type[] typeArray80 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray79);
        java.lang.Class<?> wildcardClass81 = typeArray80.getClass();
        boolean boolean82 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass77, (java.lang.reflect.Type) wildcardClass81);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped83 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass81);
        java.lang.reflect.GenericArrayType genericArrayType84 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass81);
        boolean boolean85 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass73, (java.lang.reflect.Type) genericArrayType84);
        boolean boolean86 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType65, (java.lang.reflect.Type) genericArrayType84);
        java.lang.reflect.Type[] typeArray87 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType65);
        java.lang.reflect.Type[] typeArray88 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray87);
        java.lang.reflect.Type[] typeArray89 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray87);
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray87);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder91 = wildcardTypeBuilder64.withUpperBounds(typeArray90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardType65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNull(type67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(wildcardClass73);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(wildcardClass77);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(strTyped83);
        org.junit.Assert.assertNotNull(genericArrayType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder91);
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test139");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.WildcardType wildcardType39 = wildcardTypeBuilder34.build();
        java.lang.reflect.Type type40 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType39);
        boolean boolean41 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNull(type40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test140");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test141");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test142");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = wildcardTypeBuilder3.withLowerBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder17.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test143");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.WildcardType wildcardType53 = wildcardTypeBuilder52.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test144");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test145");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.WildcardType wildcardType39 = wildcardTypeBuilder34.build();
        boolean boolean40 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(typeArray41);
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test146");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass22, type23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType38 = wildcardTypeBuilder37.build();
        java.lang.Object obj39 = new java.lang.Object();
        java.lang.Class<?> wildcardClass40 = obj39.getClass();
        java.lang.reflect.Type type41 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass40);
        java.lang.Class<?> wildcardClass42 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType38, type41);
        java.lang.String str43 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType38);
        java.lang.reflect.GenericArrayType genericArrayType44 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType38);
        java.lang.Class<?> wildcardClass45 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) genericArrayType44);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped46 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType44);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardType38);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNull(type41);
        org.junit.Assert.assertNull(wildcardClass42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "?" + "'", str43, "?");
        org.junit.Assert.assertNotNull(genericArrayType44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(typeUtilsTyped46);
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test147");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Class<?> wildcardClass2 = wildcardTypeBuilder0.getClass();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray10.getClass();
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass15);
        java.lang.Object obj17 = new java.lang.Object();
        java.lang.Class<?> wildcardClass18 = obj17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass11, (java.lang.reflect.Type) wildcardClass18);
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass11);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type22 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType24 = wildcardTypeBuilder23.build();
        java.lang.Class<?> wildcardClass25 = wildcardTypeBuilder23.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass38);
        java.lang.Object obj40 = new java.lang.Object();
        java.lang.Class<?> wildcardClass41 = obj40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) wildcardClass34);
        java.lang.Class<?> wildcardClass44 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass30);
        java.lang.String str45 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass30);
        java.lang.Class<?> wildcardClass46 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass30);
        java.lang.reflect.GenericArrayType genericArrayType47 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(wildcardType24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "java.lang.reflect.Type[]" + "'", str45, "java.lang.reflect.Type[]");
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(genericArrayType47);
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test148");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray11.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.GenericArrayType genericArrayType16 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass13);
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type18 = null;
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] { type18 };
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass21, (java.lang.reflect.Type) wildcardClass25);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped27 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass25);
        java.lang.reflect.GenericArrayType genericArrayType28 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass25);
        java.lang.reflect.Type type29 = null;
        java.lang.reflect.Type[] typeArray30 = new java.lang.reflect.Type[] { type29 };
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        java.lang.reflect.Type type33 = null;
        java.lang.reflect.Type[] typeArray34 = new java.lang.reflect.Type[] { type33 };
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray34);
        java.lang.Class<?> wildcardClass36 = typeArray35.getClass();
        boolean boolean37 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass36);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped38 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass36);
        java.lang.Class<?> wildcardClass39 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType28, (java.lang.reflect.Type) wildcardClass36);
        java.lang.String str40 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass39);
        boolean boolean41 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass39);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped42 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(genericArrayType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strTyped27);
        org.junit.Assert.assertNotNull(genericArrayType28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardClass36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strTyped38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "java.lang.reflect.Type[][]" + "'", str40, "java.lang.reflect.Type[][]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(typeArrayTyped42);
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test149");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder48.withLowerBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType53 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = wildcardTypeBuilder52.withUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType57 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type58 = null;
        java.lang.reflect.Type[] typeArray59 = new java.lang.reflect.Type[] { type58 };
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        java.lang.Class<?> wildcardClass61 = typeArray60.getClass();
        java.lang.reflect.Type type62 = null;
        java.lang.reflect.Type[] typeArray63 = new java.lang.reflect.Type[] { type62 };
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray63);
        java.lang.Class<?> wildcardClass65 = typeArray64.getClass();
        boolean boolean66 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass61, (java.lang.reflect.Type) wildcardClass65);
        java.lang.reflect.Type type67 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass61);
        java.lang.reflect.Type type68 = null;
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { type68 };
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray69);
        java.lang.Class<?> wildcardClass71 = typeArray70.getClass();
        java.lang.reflect.Type type72 = null;
        java.lang.reflect.Type[] typeArray73 = new java.lang.reflect.Type[] { type72 };
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray73);
        java.lang.Class<?> wildcardClass75 = typeArray74.getClass();
        boolean boolean76 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass71, (java.lang.reflect.Type) wildcardClass75);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped77 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass75);
        java.lang.reflect.GenericArrayType genericArrayType78 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass75);
        java.lang.Class<?> wildcardClass79 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass61, (java.lang.reflect.Type) genericArrayType78);
        java.lang.reflect.Type[] typeArray80 = new java.lang.reflect.Type[] { wildcardType57, genericArrayType78 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder81 = wildcardTypeBuilder56.withUpperBounds(typeArray80);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder82 = wildcardTypeBuilder55.withUpperBounds(typeArray80);
        java.lang.reflect.WildcardType wildcardType83 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray84 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType83);
        java.lang.reflect.Type[] typeArray85 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType83);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder86 = wildcardTypeBuilder82.withLowerBounds(typeArray85);
        java.lang.reflect.Type type87 = null;
        java.lang.reflect.Type[] typeArray88 = new java.lang.reflect.Type[] { type87 };
        java.lang.reflect.Type[] typeArray89 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder90 = wildcardTypeBuilder86.withLowerBounds(typeArray88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder91 = wildcardTypeBuilder48.withUpperBounds(typeArray88);
        java.lang.reflect.WildcardType wildcardType92 = wildcardTypeBuilder91.build();
        java.lang.reflect.Type[] typeArray93 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType92);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strTyped77);
        org.junit.Assert.assertNotNull(genericArrayType78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder81);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder82);
        org.junit.Assert.assertNotNull(wildcardType83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder86);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder91);
        org.junit.Assert.assertNotNull(wildcardType92);
        org.junit.Assert.assertNotNull(typeArray93);
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test150");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type[] typeArray35 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder30.withUpperBounds(typeArray35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test151");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = wildcardTypeBuilder10.build();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type9, (java.lang.reflect.Type) wildcardType11);
        org.apache.commons.lang3.reflect.Typed<java.lang.Class<?>> wildcardClassTyped13 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type9);
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray15.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass20 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type9, (java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.Type type21 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type9);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(wildcardClassTyped13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(typeArrayTyped19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNull(type21);
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test152");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type type8 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNull(type8);
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test153");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass9);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder11 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType12 = wildcardTypeBuilder11.build();
        java.lang.reflect.WildcardType wildcardType13 = wildcardTypeBuilder11.build();
        java.lang.Object obj14 = new java.lang.Object();
        java.lang.Class<?> wildcardClass15 = obj14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray17.getClass();
        java.lang.Class<?> wildcardClass20 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType13, (java.lang.reflect.Type) wildcardClass20);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) boolean10, (java.lang.reflect.Type) wildcardType13);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.GenericArrayType> genericArrayTypeTyped23 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType13);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder11);
        org.junit.Assert.assertNotNull(wildcardType12);
        org.junit.Assert.assertNotNull(wildcardType13);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(genericArrayTypeTyped23);
        org.junit.Assert.assertNotNull(typeArray24);
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test154");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type10 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray12.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped15 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass14);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass14);
        java.lang.reflect.GenericArrayType genericArrayType17 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass14);
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals(type0, (java.lang.reflect.Type) wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objTyped15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(genericArrayType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test155");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.String str5 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.lang.reflect.Type[]" + "'", str5, "java.lang.reflect.Type[]");
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test156");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type> typeTyped4 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.GenericArrayType genericArrayType5 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeTyped4);
        org.junit.Assert.assertNotNull(genericArrayType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test157");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder38.withUpperBounds(typeArray43);
        java.lang.reflect.WildcardType wildcardType45 = wildcardTypeBuilder44.build();
        java.lang.reflect.GenericArrayType genericArrayType46 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType45);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(genericArrayType46);
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test158");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType16 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType17 = wildcardTypeBuilder8.build();
        java.lang.reflect.GenericArrayType genericArrayType18 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(genericArrayType18);
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test159");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        java.lang.reflect.Type type37 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType35);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType35);
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.Class<?> wildcardClass43 = typeArray42.getClass();
        java.lang.reflect.Type type44 = null;
        java.lang.reflect.Type[] typeArray45 = new java.lang.reflect.Type[] { type44 };
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.Class<?> wildcardClass47 = typeArray46.getClass();
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass51);
        java.lang.reflect.GenericArrayType genericArrayType54 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass51);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.Type) genericArrayType54);
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType35, (java.lang.reflect.Type) genericArrayType54);
        boolean boolean57 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type34, (java.lang.reflect.Type) wildcardType35);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType35);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder30.withUpperBounds(typeArray59);
        java.lang.Class<?> wildcardClass62 = wildcardTypeBuilder61.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strTyped53);
        org.junit.Assert.assertNotNull(genericArrayType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test160");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = wildcardTypeBuilder3.withLowerBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType15 = wildcardTypeBuilder3.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test161");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test162");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type10 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray12.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped15 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass14);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass14);
        java.lang.reflect.GenericArrayType genericArrayType17 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass14);
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass14);
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(type10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(objTyped15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(genericArrayType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test163");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass13);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped15 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass6);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass6);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped17 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass6);
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder0, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder0.withLowerBounds(typeArray29);
        java.lang.reflect.WildcardType wildcardType32 = wildcardTypeBuilder31.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objTyped17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardType32);
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test164");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass4);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped6 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(type5);
        org.junit.Assert.assertNotNull(typeUtilsTyped6);
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test165");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType40 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder39.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType44 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder46 = wildcardTypeBuilder43.withUpperBounds(typeArray45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder42.withUpperBounds(typeArray45);
        java.lang.reflect.WildcardType wildcardType48 = wildcardTypeBuilder42.build();
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType48);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder38.withUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass52 = typeArray49.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardType44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardType48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardClass52);
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test166");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) genericArrayType7);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) genericArrayType7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test167");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass22, type23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray39.getClass();
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.Type type46 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass40);
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass40);
        java.lang.String str48 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "java.lang.reflect.Type[][]" + "'", str48, "java.lang.reflect.Type[][]");
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test168");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass18);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test169");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType0);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder> wildcardTypeBuilderTyped8 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType7);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped8);
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test170");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type20 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass14);
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        boolean boolean29 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass28);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped30 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass28);
        java.lang.reflect.GenericArrayType genericArrayType31 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass28);
        java.lang.Class<?> wildcardClass32 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) genericArrayType31);
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass32);
        java.lang.String str34 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass32);
        java.lang.Class<?> wildcardClass35 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.GenericArrayType genericArrayType36 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass32);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strTyped30);
        org.junit.Assert.assertNotNull(genericArrayType31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.lang.reflect.Type[]" + "'", str34, "java.lang.reflect.Type[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(genericArrayType36);
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test171");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.Class<?> wildcardClass2 = wildcardType0.getClass();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        java.lang.reflect.Type type29 = null;
        java.lang.reflect.Type[] typeArray30 = new java.lang.reflect.Type[] { type29 };
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass32);
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray39.getClass();
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped46 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass35, (java.lang.reflect.Type) wildcardClass44);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType23, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType23, (java.lang.reflect.Type) wildcardType49);
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardType49);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.GenericDeclaration> genericDeclarationTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType49);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strTyped46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(genericDeclarationTyped53);
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test172");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.Type type19 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped29 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.GenericArrayType genericArrayType30 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass27);
        java.lang.Class<?> wildcardClass31 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) genericArrayType30);
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { wildcardType9, genericArrayType30 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder8.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder34.withUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder37.withUpperBounds(typeArray40);
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder42.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder33.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType50 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder49.withUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType54 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder53.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder52.withUpperBounds(typeArray55);
        java.lang.reflect.WildcardType wildcardType58 = wildcardTypeBuilder52.build();
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder0.withLowerBounds(typeArray59);
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strTyped29);
        org.junit.Assert.assertNotNull(genericArrayType30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardType54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(typeArray62);
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test173");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.Type type19 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped29 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.GenericArrayType genericArrayType30 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass27);
        java.lang.Class<?> wildcardClass31 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) genericArrayType30);
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { wildcardType9, genericArrayType30 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder8.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder34.withUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder37.withUpperBounds(typeArray40);
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder42.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder33.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType50 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder49.withUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType54 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder53.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder52.withUpperBounds(typeArray55);
        java.lang.reflect.WildcardType wildcardType58 = wildcardTypeBuilder52.build();
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder0.withLowerBounds(typeArray59);
        java.lang.reflect.Type[] typeArray62 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder61.withLowerBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType64 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType64);
        java.lang.reflect.Type type66 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType64);
        boolean boolean67 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType64);
        java.lang.reflect.Type[] typeArray68 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = wildcardTypeBuilder63.withLowerBounds(typeArray68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strTyped29);
        org.junit.Assert.assertNotNull(genericArrayType30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardType54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardType64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNull(type66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test174");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder48.withLowerBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType52 = wildcardTypeBuilder51.build();
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.Class<?> wildcardClass56 = typeArray55.getClass();
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        boolean boolean61 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass56, (java.lang.reflect.Type) wildcardClass60);
        java.lang.Object obj62 = new java.lang.Object();
        java.lang.Class<?> wildcardClass63 = obj62.getClass();
        boolean boolean64 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass56, (java.lang.reflect.Type) wildcardClass63);
        java.lang.reflect.Type type65 = null;
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { type65 };
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        java.lang.Class<?> wildcardClass68 = typeArray67.getClass();
        java.lang.reflect.Type type69 = null;
        java.lang.reflect.Type[] typeArray70 = new java.lang.reflect.Type[] { type69 };
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray70);
        java.lang.Class<?> wildcardClass72 = typeArray71.getClass();
        boolean boolean73 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass68, (java.lang.reflect.Type) wildcardClass72);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped74 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass72);
        boolean boolean75 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass63, (java.lang.reflect.Type) wildcardClass72);
        boolean boolean76 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardType52, (java.lang.reflect.Type) wildcardClass72);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated array contains null element at index: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardType52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(wildcardClass63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(strTyped74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test175");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) wildcardClass54);
        java.lang.reflect.Type type56 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        boolean boolean65 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass60, (java.lang.reflect.Type) wildcardClass64);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped66 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.GenericArrayType genericArrayType67 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass64);
        java.lang.Class<?> wildcardClass68 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) genericArrayType67);
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { wildcardType46, genericArrayType67 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder45.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder44.withUpperBounds(typeArray69);
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder71.withLowerBounds(typeArray74);
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder77 = wildcardTypeBuilder25.withLowerBounds(typeArray74);
        java.lang.reflect.WildcardType wildcardType78 = wildcardTypeBuilder25.build();
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType78);
        java.lang.Class<?> wildcardClass80 = typeArray79.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strTyped66);
        org.junit.Assert.assertNotNull(genericArrayType67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder77);
        org.junit.Assert.assertNotNull(wildcardType78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test176");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass8, (java.lang.reflect.Type) wildcardClass12);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass12);
        java.lang.reflect.GenericArrayType genericArrayType15 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass12);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) genericArrayType15);
        java.lang.reflect.GenericArrayType genericArrayType17 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) genericArrayType15);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strTyped14);
        org.junit.Assert.assertNotNull(genericArrayType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(genericArrayType17);
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test177");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray11.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass13);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type25 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass19);
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass3, (java.lang.reflect.Type) wildcardClass19);
        boolean boolean27 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass19);
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test178");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(typeArray7);
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test179");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder33.withLowerBounds(typeArray38);
        java.lang.reflect.Type type40 = null;
        java.lang.reflect.WildcardType wildcardType41 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType41);
        java.lang.reflect.Type type43 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType41);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.Class<?> wildcardClass49 = typeArray48.getClass();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.Class<?> wildcardClass53 = typeArray52.getClass();
        java.lang.reflect.Type type54 = null;
        java.lang.reflect.Type[] typeArray55 = new java.lang.reflect.Type[] { type54 };
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray56.getClass();
        boolean boolean58 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass53, (java.lang.reflect.Type) wildcardClass57);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped59 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass57);
        java.lang.reflect.GenericArrayType genericArrayType60 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass57);
        boolean boolean61 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) genericArrayType60);
        boolean boolean62 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType41, (java.lang.reflect.Type) genericArrayType60);
        boolean boolean63 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type40, (java.lang.reflect.Type) wildcardType41);
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder33.withLowerBounds(typeArray64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNull(type43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(strTyped59);
        org.junit.Assert.assertNotNull(genericArrayType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test180");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        java.lang.reflect.Type type59 = null;
        java.lang.reflect.Type[] typeArray60 = new java.lang.reflect.Type[] { type59 };
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray61);
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder52.withUpperBounds(typeArray62);
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test181");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass16);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped18 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass16);
        java.lang.reflect.GenericArrayType genericArrayType19 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass16);
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass8, (java.lang.reflect.Type) genericArrayType19);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType0, (java.lang.reflect.Type) genericArrayType19);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strTyped18);
        org.junit.Assert.assertNotNull(genericArrayType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test182");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.GenericDeclaration> genericDeclarationTyped1 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type0);
        org.junit.Assert.assertNotNull(genericDeclarationTyped1);
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test183");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder38.withUpperBounds(typeArray43);
        java.lang.reflect.WildcardType wildcardType45 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type type46 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType45);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The validated array contains null element at index: 0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNull(type46);
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test184");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType20 = wildcardTypeBuilder16.build();
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType20);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder8.withUpperBounds(typeArray22);
        java.lang.reflect.Type type24 = null;
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) typeArray22, type24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardType20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test185");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        java.lang.reflect.Type type37 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType35);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType35);
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.Class<?> wildcardClass43 = typeArray42.getClass();
        java.lang.reflect.Type type44 = null;
        java.lang.reflect.Type[] typeArray45 = new java.lang.reflect.Type[] { type44 };
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.Class<?> wildcardClass47 = typeArray46.getClass();
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass51);
        java.lang.reflect.GenericArrayType genericArrayType54 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass51);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.Type) genericArrayType54);
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType35, (java.lang.reflect.Type) genericArrayType54);
        boolean boolean57 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type34, (java.lang.reflect.Type) wildcardType35);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType35);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder30.withUpperBounds(typeArray59);
        java.lang.reflect.WildcardType wildcardType62 = wildcardTypeBuilder61.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strTyped53);
        org.junit.Assert.assertNotNull(genericArrayType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test186");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.WildcardType wildcardType39 = wildcardTypeBuilder34.build();
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(genericArrayType40);
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test187");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(typeArray34);
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test188");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder30.withLowerBounds(typeArray38);
        java.lang.Class<?> wildcardClass41 = wildcardTypeBuilder40.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardClass41);
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test189");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType16 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType17 = wildcardTypeBuilder8.build();
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test190");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType34);
        java.lang.reflect.Type type36 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.Class<?> wildcardClass46 = typeArray45.getClass();
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass50);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped52 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.GenericArrayType genericArrayType53 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass50);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass42, (java.lang.reflect.Type) genericArrayType53);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType34, (java.lang.reflect.Type) genericArrayType53);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder33.withLowerBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType59 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder58.withUpperBounds(typeArray60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType63 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder62.withUpperBounds(typeArray64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder66 = wildcardTypeBuilder61.withUpperBounds(typeArray64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType68 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray69 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType68);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder67.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder74 = wildcardTypeBuilder71.withUpperBounds(typeArray73);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder70.withUpperBounds(typeArray73);
        java.lang.reflect.WildcardType wildcardType76 = wildcardTypeBuilder70.build();
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType76);
        java.lang.reflect.Type[] typeArray78 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType76);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder79 = wildcardTypeBuilder66.withUpperBounds(typeArray78);
        java.lang.reflect.WildcardType wildcardType80 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray81 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType80);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder82 = wildcardTypeBuilder79.withUpperBounds(typeArray81);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder83 = wildcardTypeBuilder57.withUpperBounds(typeArray81);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder84 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType85 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray86 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType85);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder87 = wildcardTypeBuilder84.withUpperBounds(typeArray86);
        java.lang.reflect.WildcardType wildcardType88 = wildcardTypeBuilder84.build();
        java.lang.reflect.WildcardType wildcardType89 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType89);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder91 = wildcardTypeBuilder84.withLowerBounds(typeArray90);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder92 = wildcardTypeBuilder57.withUpperBounds(typeArray90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strTyped52);
        org.junit.Assert.assertNotNull(genericArrayType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardType59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardType63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
        org.junit.Assert.assertNotNull(wildcardType68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(wildcardType76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder79);
        org.junit.Assert.assertNotNull(wildcardType80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder82);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder83);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder84);
        org.junit.Assert.assertNotNull(wildcardType85);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder87);
        org.junit.Assert.assertNotNull(wildcardType88);
        org.junit.Assert.assertNotNull(wildcardType89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder91);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder92);
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test191");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.GenericArrayType genericArrayType1 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.GenericArrayType genericArrayType2 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) genericArrayType1);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(genericArrayType1);
        org.junit.Assert.assertNotNull(genericArrayType2);
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test192");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test193");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass22, type23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray39.getClass();
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.Type type46 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass40);
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass40);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type> typeTyped48 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(type46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(typeTyped48);
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test194");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type20 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass14);
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        boolean boolean29 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass28);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped30 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass28);
        java.lang.reflect.GenericArrayType genericArrayType31 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass28);
        java.lang.Class<?> wildcardClass32 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) genericArrayType31);
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass32);
        java.lang.String str34 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass32);
        java.lang.Class<?> wildcardClass35 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass32);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder> wildcardTypeBuilderTyped36 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(type20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strTyped30);
        org.junit.Assert.assertNotNull(genericArrayType31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "java.lang.reflect.Type[]" + "'", str34, "java.lang.reflect.Type[]");
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped36);
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test195");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass13);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped15 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass6);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass6);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped17 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass6);
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder0, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder0.withLowerBounds(typeArray29);
        java.lang.reflect.WildcardType wildcardType32 = wildcardTypeBuilder0.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objTyped17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardType32);
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test196");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test197");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type46 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass32);
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass32);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(type46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test198");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray47.getClass();
        boolean boolean49 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass48);
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped55 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder25, (java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType58 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder57.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType62 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder61.withUpperBounds(typeArray63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder60.withUpperBounds(typeArray63);
        java.lang.reflect.WildcardType wildcardType66 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType66);
        java.lang.reflect.Type type68 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType66);
        java.lang.reflect.Type[] typeArray69 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType66);
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType66);
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray70);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder72 = wildcardTypeBuilder65.withUpperBounds(typeArray70);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder73 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType74 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray75 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType74);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder76 = wildcardTypeBuilder73.withUpperBounds(typeArray75);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder77 = wildcardTypeBuilder72.withUpperBounds(typeArray75);
        java.lang.reflect.Type[] typeArray78 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray75);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder79 = wildcardTypeBuilder25.withLowerBounds(typeArray78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objTyped55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNull(type68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder73);
        org.junit.Assert.assertNotNull(wildcardType74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder79);
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test199");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType10 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder9.withUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType14 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = wildcardTypeBuilder13.withUpperBounds(typeArray15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray15);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder12.build();
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder8.withUpperBounds(typeArray20);
        java.lang.reflect.WildcardType wildcardType22 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType23 = wildcardTypeBuilder8.build();
        java.lang.Class<?> wildcardClass24 = wildcardType23.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test200");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder48.withUpperBounds(typeArray53);
        java.lang.reflect.Type type55 = null;
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { type55 };
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withLowerBounds(typeArray58);
        java.lang.Class<?> wildcardClass61 = wildcardTypeBuilder48.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test201");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.Type type19 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped29 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.GenericArrayType genericArrayType30 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass27);
        java.lang.Class<?> wildcardClass31 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) genericArrayType30);
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { wildcardType9, genericArrayType30 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder8.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder34.withUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder37.withUpperBounds(typeArray40);
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder42.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder33.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType50 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder49.withUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType54 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder53.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder52.withUpperBounds(typeArray55);
        java.lang.reflect.WildcardType wildcardType58 = wildcardTypeBuilder52.build();
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder0.withLowerBounds(typeArray59);
        java.lang.reflect.Type[] typeArray62 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder61.withLowerBounds(typeArray62);
        java.lang.reflect.Type[] typeArray64 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder61.withLowerBounds(typeArray64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strTyped29);
        org.junit.Assert.assertNotNull(genericArrayType30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardType54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test202");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type25 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.GenericArrayType genericArrayType36 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass33);
        java.lang.Class<?> wildcardClass37 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) genericArrayType36);
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { wildcardType15, genericArrayType36 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder14.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType41 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder40.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder43.withUpperBounds(typeArray46);
        java.lang.reflect.Type type49 = null;
        java.lang.reflect.Type[] typeArray50 = new java.lang.reflect.Type[] { type49 };
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = wildcardTypeBuilder48.withUpperBounds(typeArray52);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder39.withLowerBounds(typeArray52);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType56 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder55.withUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType60 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        java.lang.reflect.Type type65 = null;
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { type65 };
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        java.lang.Class<?> wildcardClass68 = typeArray67.getClass();
        boolean boolean69 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass64, (java.lang.reflect.Type) wildcardClass68);
        java.lang.reflect.Type type70 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.Type type71 = null;
        java.lang.reflect.Type[] typeArray72 = new java.lang.reflect.Type[] { type71 };
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray72);
        java.lang.Class<?> wildcardClass74 = typeArray73.getClass();
        java.lang.reflect.Type type75 = null;
        java.lang.reflect.Type[] typeArray76 = new java.lang.reflect.Type[] { type75 };
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray76);
        java.lang.Class<?> wildcardClass78 = typeArray77.getClass();
        boolean boolean79 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass74, (java.lang.reflect.Type) wildcardClass78);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped80 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass78);
        java.lang.reflect.GenericArrayType genericArrayType81 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass78);
        java.lang.Class<?> wildcardClass82 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass64, (java.lang.reflect.Type) genericArrayType81);
        java.lang.reflect.Type[] typeArray83 = new java.lang.reflect.Type[] { wildcardType60, genericArrayType81 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder84 = wildcardTypeBuilder59.withUpperBounds(typeArray83);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder85 = wildcardTypeBuilder58.withUpperBounds(typeArray83);
        java.lang.reflect.WildcardType wildcardType86 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray87 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType86);
        java.lang.reflect.Type[] typeArray88 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType86);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder89 = wildcardTypeBuilder85.withLowerBounds(typeArray88);
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder91 = wildcardTypeBuilder39.withLowerBounds(typeArray88);
        java.lang.reflect.Type[] typeArray92 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder93 = wildcardTypeBuilder13.withUpperBounds(typeArray88);
        java.lang.reflect.Type[] typeArray94 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray88);
        java.lang.reflect.Type[] typeArray95 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray94);
        java.lang.reflect.Type[] typeArray96 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray94);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(type25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertNotNull(genericArrayType36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardType56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strTyped80);
        org.junit.Assert.assertNotNull(genericArrayType81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder84);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder85);
        org.junit.Assert.assertNotNull(wildcardType86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder93);
        org.junit.Assert.assertNotNull(typeArray94);
        org.junit.Assert.assertNotNull(typeArray95);
        org.junit.Assert.assertNotNull(typeArray96);
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test203");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray47.getClass();
        boolean boolean49 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass48);
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped55 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder25, (java.lang.reflect.Type) wildcardClass44);
        java.lang.String str57 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.AnnotatedElement> annotatedElementTyped58 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objTyped55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "java.lang.reflect.Type[]" + "'", str57, "java.lang.reflect.Type[]");
        org.junit.Assert.assertNotNull(annotatedElementTyped58);
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test204");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.Type type19 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped29 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.GenericArrayType genericArrayType30 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass27);
        java.lang.Class<?> wildcardClass31 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) genericArrayType30);
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { wildcardType9, genericArrayType30 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder8.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder34.withUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder37.withUpperBounds(typeArray40);
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder42.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder33.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType50 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder49.withUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType54 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder53.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder52.withUpperBounds(typeArray55);
        java.lang.reflect.WildcardType wildcardType58 = wildcardTypeBuilder52.build();
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder0.withLowerBounds(typeArray59);
        java.lang.reflect.Type[] typeArray62 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder61.withLowerBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType64 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType64);
        java.lang.reflect.Type type66 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType64);
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType64);
        java.lang.reflect.Type type68 = null;
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { type68 };
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray69);
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray69);
        java.lang.Class<?> wildcardClass72 = typeArray71.getClass();
        java.lang.reflect.Type type73 = null;
        java.lang.reflect.Type[] typeArray74 = new java.lang.reflect.Type[] { type73 };
        java.lang.reflect.Type[] typeArray75 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        java.lang.Class<?> wildcardClass76 = typeArray75.getClass();
        java.lang.reflect.Type type77 = null;
        java.lang.reflect.Type[] typeArray78 = new java.lang.reflect.Type[] { type77 };
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray78);
        java.lang.Class<?> wildcardClass80 = typeArray79.getClass();
        boolean boolean81 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass76, (java.lang.reflect.Type) wildcardClass80);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped82 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass80);
        java.lang.reflect.GenericArrayType genericArrayType83 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass80);
        boolean boolean84 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass72, (java.lang.reflect.Type) genericArrayType83);
        boolean boolean85 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType64, (java.lang.reflect.Type) genericArrayType83);
        java.lang.reflect.Type[] typeArray86 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType64);
        java.lang.reflect.Type[] typeArray87 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray86);
        java.lang.reflect.Type[] typeArray88 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray86);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder89 = wildcardTypeBuilder63.withLowerBounds(typeArray86);
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray86);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strTyped29);
        org.junit.Assert.assertNotNull(genericArrayType30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardType54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardType64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNull(type66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(wildcardClass72);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strTyped82);
        org.junit.Assert.assertNotNull(genericArrayType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(typeArray86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder89);
        org.junit.Assert.assertNotNull(typeArray90);
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test205");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        org.apache.commons.lang3.reflect.Typed<java.io.Serializable> serializableTyped6 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType2);
        java.lang.String str7 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(serializableTyped6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "?" + "'", str7, "?");
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test206");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        java.lang.reflect.Type type18 = null;
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] { type18 };
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass21, (java.lang.reflect.Type) wildcardClass25);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped27 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass25);
        java.lang.reflect.GenericArrayType genericArrayType28 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean29 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) genericArrayType28);
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType9, (java.lang.reflect.Type) genericArrayType28);
        boolean boolean31 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type8, (java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder0.withUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType38 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder37.withUpperBounds(typeArray39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = wildcardTypeBuilder40.withUpperBounds(typeArray43);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.Type type48 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder45.withUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType54 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder53.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder45.withUpperBounds(typeArray55);
        java.lang.reflect.Type type58 = null;
        java.lang.reflect.Type[] typeArray59 = new java.lang.reflect.Type[] { type58 };
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray61);
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder57.withUpperBounds(typeArray63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType66 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType66);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder68 = wildcardTypeBuilder65.withUpperBounds(typeArray67);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType70 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType70);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder72 = wildcardTypeBuilder69.withUpperBounds(typeArray71);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder73 = wildcardTypeBuilder68.withUpperBounds(typeArray71);
        java.lang.reflect.WildcardType wildcardType74 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray75 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType74);
        java.lang.reflect.Type type76 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType74);
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType74);
        java.lang.reflect.Type[] typeArray78 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType74);
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray78);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder80 = wildcardTypeBuilder73.withUpperBounds(typeArray78);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder81 = wildcardTypeBuilder57.withUpperBounds(typeArray78);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder82 = wildcardTypeBuilder0.withLowerBounds(typeArray78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strTyped27);
        org.junit.Assert.assertNotNull(genericArrayType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardType38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardType54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
        org.junit.Assert.assertNotNull(wildcardType70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder73);
        org.junit.Assert.assertNotNull(wildcardType74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNull(type76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder80);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder81);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder82);
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test207");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder25.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test208");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = null;
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass21, type22);
        java.lang.reflect.GenericArrayType genericArrayType24 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(genericArrayType24);
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test209");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test210");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.GenericArrayType genericArrayType5 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(genericArrayType5);
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test211");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType2);
        java.lang.String str7 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "?" + "'", str7, "?");
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test212");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        java.lang.reflect.Type type35 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNull(type35);
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test213");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test214");
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = null;
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass22, type23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.GenericArrayType genericArrayType37 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass33);
        java.lang.String str38 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) genericArrayType37);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(genericArrayType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.lang.reflect.Type[][]" + "'", str38, "java.lang.reflect.Type[][]");
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test215");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = wildcardTypeBuilder10.build();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type9, (java.lang.reflect.Type) wildcardType11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType11);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray13.getClass();
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test216");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test217");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder> wildcardTypeBuilderTyped4 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped4);
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test218");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType16 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        java.lang.reflect.Type type18 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType16);
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType16);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder15.withLowerBounds(typeArray20);
        java.lang.reflect.WildcardType wildcardType22 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType22);
        java.lang.reflect.Type type24 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType22);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType22);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass38);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped40 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass38);
        java.lang.reflect.GenericArrayType genericArrayType41 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass38);
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) genericArrayType41);
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType22, (java.lang.reflect.Type) genericArrayType41);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType22);
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder21.withUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray49 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder50 = wildcardTypeBuilder48.withUpperBounds(typeArray49);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strTyped40);
        org.junit.Assert.assertNotNull(genericArrayType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder50);
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test219");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass21);
        java.lang.Class<?> wildcardClass23 = type22.getClass();
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test220");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.GenericArrayType genericArrayType50 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType46);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(genericArrayType50);
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test221");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.Type type36 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(type36);
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test222");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.Typed<java.lang.Class<?>> wildcardClassTyped1 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type0);
        java.lang.Class<?> wildcardClass2 = wildcardClassTyped1.getClass();
        org.junit.Assert.assertNotNull(wildcardClassTyped1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test223");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType1, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test224");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) wildcardClass54);
        java.lang.reflect.Type type56 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        boolean boolean65 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass60, (java.lang.reflect.Type) wildcardClass64);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped66 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.GenericArrayType genericArrayType67 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass64);
        java.lang.Class<?> wildcardClass68 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) genericArrayType67);
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { wildcardType46, genericArrayType67 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder45.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder44.withUpperBounds(typeArray69);
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder71.withLowerBounds(typeArray74);
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder77 = wildcardTypeBuilder25.withLowerBounds(typeArray74);
        java.lang.reflect.WildcardType wildcardType78 = wildcardTypeBuilder25.build();
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType78);
        java.lang.Object obj80 = new java.lang.Object();
        java.lang.Class<?> wildcardClass81 = obj80.getClass();
        java.lang.reflect.Type type82 = null;
        java.lang.reflect.Type[] typeArray83 = new java.lang.reflect.Type[] { type82 };
        java.lang.reflect.Type[] typeArray84 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray83);
        java.lang.Class<?> wildcardClass85 = typeArray83.getClass();
        java.lang.Class<?> wildcardClass86 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass81, (java.lang.reflect.Type) wildcardClass85);
        java.lang.String str87 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass86);
        boolean boolean88 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass86);
        boolean boolean89 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType78, (java.lang.reflect.Type) wildcardClass86);
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType78);
        java.lang.reflect.Type[] typeArray91 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strTyped66);
        org.junit.Assert.assertNotNull(genericArrayType67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder77);
        org.junit.Assert.assertNotNull(wildcardType78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "java.lang.Object" + "'", str87, "java.lang.Object");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeArray91);
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test225");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType1, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType24 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType1);
        java.lang.Class<?> wildcardClass25 = wildcardType1.getClass();
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(genericArrayType24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test226");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType20 = wildcardTypeBuilder16.build();
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType20);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder8.withUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray22.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardType20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test227");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.WildcardType wildcardType50 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        java.lang.reflect.Type type52 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType50);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType50);
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder48.withUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType58 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder57.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType62 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type63 = null;
        java.lang.reflect.Type[] typeArray64 = new java.lang.reflect.Type[] { type63 };
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray64);
        java.lang.Class<?> wildcardClass66 = typeArray65.getClass();
        java.lang.reflect.Type type67 = null;
        java.lang.reflect.Type[] typeArray68 = new java.lang.reflect.Type[] { type67 };
        java.lang.reflect.Type[] typeArray69 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray68);
        java.lang.Class<?> wildcardClass70 = typeArray69.getClass();
        boolean boolean71 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass66, (java.lang.reflect.Type) wildcardClass70);
        java.lang.reflect.Type type72 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass66);
        java.lang.reflect.Type type73 = null;
        java.lang.reflect.Type[] typeArray74 = new java.lang.reflect.Type[] { type73 };
        java.lang.reflect.Type[] typeArray75 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        java.lang.Class<?> wildcardClass76 = typeArray75.getClass();
        java.lang.reflect.Type type77 = null;
        java.lang.reflect.Type[] typeArray78 = new java.lang.reflect.Type[] { type77 };
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray78);
        java.lang.Class<?> wildcardClass80 = typeArray79.getClass();
        boolean boolean81 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass76, (java.lang.reflect.Type) wildcardClass80);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped82 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass80);
        java.lang.reflect.GenericArrayType genericArrayType83 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass80);
        java.lang.Class<?> wildcardClass84 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass66, (java.lang.reflect.Type) genericArrayType83);
        java.lang.reflect.Type[] typeArray85 = new java.lang.reflect.Type[] { wildcardType62, genericArrayType83 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder86 = wildcardTypeBuilder61.withUpperBounds(typeArray85);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder87 = wildcardTypeBuilder60.withUpperBounds(typeArray85);
        java.lang.reflect.WildcardType wildcardType88 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray89 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType88);
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder91 = wildcardTypeBuilder87.withLowerBounds(typeArray90);
        java.lang.reflect.Type[] typeArray92 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray90);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder93 = wildcardTypeBuilder56.withUpperBounds(typeArray92);
        java.lang.reflect.WildcardType wildcardType94 = wildcardTypeBuilder56.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(wildcardClass66);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strTyped82);
        org.junit.Assert.assertNotNull(genericArrayType83);
        org.junit.Assert.assertNotNull(wildcardClass84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder86);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder87);
        org.junit.Assert.assertNotNull(wildcardType88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder93);
        org.junit.Assert.assertNotNull(wildcardType94);
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test228");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder8.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder10.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = wildcardTypeBuilder13.withUpperBounds(typeArray16);
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder18.withUpperBounds(typeArray22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = wildcardTypeBuilder8.withLowerBounds(typeArray22);
        java.lang.reflect.WildcardType wildcardType25 = wildcardTypeBuilder24.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(wildcardType25);
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test229");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        java.lang.reflect.WildcardType wildcardType14 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType15 = wildcardTypeBuilder8.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(wildcardType15);
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test230");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.GenericDeclaration> genericDeclarationTyped7 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationTyped7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test231");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType34);
        java.lang.reflect.Type type36 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.Class<?> wildcardClass46 = typeArray45.getClass();
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass50);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped52 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.GenericArrayType genericArrayType53 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass50);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass42, (java.lang.reflect.Type) genericArrayType53);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType34, (java.lang.reflect.Type) genericArrayType53);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder33.withLowerBounds(typeArray56);
        java.lang.reflect.WildcardType wildcardType58 = wildcardTypeBuilder57.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strTyped52);
        org.junit.Assert.assertNotNull(genericArrayType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test232");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = wildcardTypeBuilder10.build();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type9, (java.lang.reflect.Type) wildcardType11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType11);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test233");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) wildcardClass54);
        java.lang.reflect.Type type56 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        boolean boolean65 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass60, (java.lang.reflect.Type) wildcardClass64);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped66 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.GenericArrayType genericArrayType67 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass64);
        java.lang.Class<?> wildcardClass68 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) genericArrayType67);
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { wildcardType46, genericArrayType67 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder45.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder44.withUpperBounds(typeArray69);
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder71.withLowerBounds(typeArray74);
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder77 = wildcardTypeBuilder25.withLowerBounds(typeArray74);
        java.lang.reflect.WildcardType wildcardType78 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType78);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder80 = wildcardTypeBuilder77.withLowerBounds(typeArray79);
        java.lang.reflect.WildcardType wildcardType81 = wildcardTypeBuilder77.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strTyped66);
        org.junit.Assert.assertNotNull(genericArrayType67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder77);
        org.junit.Assert.assertNotNull(wildcardType78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder80);
        org.junit.Assert.assertNotNull(wildcardType81);
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test234");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray9);
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test235");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped12 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass20);
        java.lang.String str22 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.Type type23 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = type23.getClass();
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objTyped14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.reflect.Type[]" + "'", str22, "java.lang.reflect.Type[]");
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test236");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test237");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType23 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder22.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder25.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type type33 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType31);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder30.withUpperBounds(typeArray35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder37.withUpperBounds(typeArray40);
        java.lang.reflect.WildcardType wildcardType43 = wildcardTypeBuilder42.build();
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = wildcardTypeBuilder20.withLowerBounds(typeArray44);
        java.lang.reflect.WildcardType wildcardType46 = wildcardTypeBuilder20.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardType43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test238");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType60 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = wildcardTypeBuilder59.withUpperBounds(typeArray61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType64 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder66 = wildcardTypeBuilder63.withUpperBounds(typeArray65);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = wildcardTypeBuilder62.withUpperBounds(typeArray65);
        java.lang.reflect.WildcardType wildcardType68 = wildcardTypeBuilder62.build();
        java.lang.reflect.Type[] typeArray69 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType68);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder52.withUpperBounds(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardType64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
        org.junit.Assert.assertNotNull(wildcardType68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test239");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) wildcardClass54);
        java.lang.reflect.Type type56 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        boolean boolean65 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass60, (java.lang.reflect.Type) wildcardClass64);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped66 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.GenericArrayType genericArrayType67 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass64);
        java.lang.Class<?> wildcardClass68 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) genericArrayType67);
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { wildcardType46, genericArrayType67 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder45.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder44.withUpperBounds(typeArray69);
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder71.withLowerBounds(typeArray74);
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder77 = wildcardTypeBuilder25.withLowerBounds(typeArray74);
        java.lang.reflect.WildcardType wildcardType78 = wildcardTypeBuilder25.build();
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType78);
        java.lang.Object obj80 = new java.lang.Object();
        java.lang.Class<?> wildcardClass81 = obj80.getClass();
        java.lang.reflect.Type type82 = null;
        java.lang.reflect.Type[] typeArray83 = new java.lang.reflect.Type[] { type82 };
        java.lang.reflect.Type[] typeArray84 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray83);
        java.lang.Class<?> wildcardClass85 = typeArray83.getClass();
        java.lang.Class<?> wildcardClass86 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass81, (java.lang.reflect.Type) wildcardClass85);
        java.lang.String str87 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass86);
        boolean boolean88 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass86);
        boolean boolean89 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType78, (java.lang.reflect.Type) wildcardClass86);
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType78);
        java.lang.reflect.Type[] typeArray91 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strTyped66);
        org.junit.Assert.assertNotNull(genericArrayType67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder77);
        org.junit.Assert.assertNotNull(wildcardType78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(wildcardClass81);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertNotNull(wildcardClass86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "java.lang.Object" + "'", str87, "java.lang.Object");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeArray91);
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test240");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test241");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder48.withLowerBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType53 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = wildcardTypeBuilder52.withUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType57 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type58 = null;
        java.lang.reflect.Type[] typeArray59 = new java.lang.reflect.Type[] { type58 };
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        java.lang.Class<?> wildcardClass61 = typeArray60.getClass();
        java.lang.reflect.Type type62 = null;
        java.lang.reflect.Type[] typeArray63 = new java.lang.reflect.Type[] { type62 };
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray63);
        java.lang.Class<?> wildcardClass65 = typeArray64.getClass();
        boolean boolean66 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass61, (java.lang.reflect.Type) wildcardClass65);
        java.lang.reflect.Type type67 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass61);
        java.lang.reflect.Type type68 = null;
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { type68 };
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray69);
        java.lang.Class<?> wildcardClass71 = typeArray70.getClass();
        java.lang.reflect.Type type72 = null;
        java.lang.reflect.Type[] typeArray73 = new java.lang.reflect.Type[] { type72 };
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray73);
        java.lang.Class<?> wildcardClass75 = typeArray74.getClass();
        boolean boolean76 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass71, (java.lang.reflect.Type) wildcardClass75);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped77 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass75);
        java.lang.reflect.GenericArrayType genericArrayType78 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass75);
        java.lang.Class<?> wildcardClass79 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass61, (java.lang.reflect.Type) genericArrayType78);
        java.lang.reflect.Type[] typeArray80 = new java.lang.reflect.Type[] { wildcardType57, genericArrayType78 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder81 = wildcardTypeBuilder56.withUpperBounds(typeArray80);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder82 = wildcardTypeBuilder55.withUpperBounds(typeArray80);
        java.lang.reflect.WildcardType wildcardType83 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray84 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType83);
        java.lang.reflect.Type[] typeArray85 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType83);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder86 = wildcardTypeBuilder82.withLowerBounds(typeArray85);
        java.lang.reflect.Type type87 = null;
        java.lang.reflect.Type[] typeArray88 = new java.lang.reflect.Type[] { type87 };
        java.lang.reflect.Type[] typeArray89 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder90 = wildcardTypeBuilder86.withLowerBounds(typeArray88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder91 = wildcardTypeBuilder48.withUpperBounds(typeArray88);
        java.lang.reflect.WildcardType wildcardType92 = wildcardTypeBuilder48.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(type67);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(strTyped77);
        org.junit.Assert.assertNotNull(genericArrayType78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder81);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder82);
        org.junit.Assert.assertNotNull(wildcardType83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder86);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder90);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder91);
        org.junit.Assert.assertNotNull(wildcardType92);
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test242");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type4 = null;
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType0, type4);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test243");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.GenericArrayType genericArrayType5 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(genericArrayType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test244");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType10);
        java.lang.reflect.Type type23 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType10);
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        java.lang.reflect.Type type28 = null;
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { type28 };
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray30.getClass();
        boolean boolean32 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) wildcardClass31);
        java.lang.reflect.Type type33 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        java.lang.reflect.GenericArrayType genericArrayType44 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass41);
        java.lang.Class<?> wildcardClass45 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) genericArrayType44);
        java.lang.Class<?> wildcardClass46 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.GenericArrayType genericArrayType47 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass27);
        org.apache.commons.lang3.reflect.Typed<java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>> wildcardTypeVariableMapTyped48 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType47);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeUtilsTyped22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertNotNull(genericArrayType44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(genericArrayType47);
        org.junit.Assert.assertNotNull(wildcardTypeVariableMapTyped48);
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test245");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType34);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.builder.Builder<java.lang.reflect.WildcardType>> wildcardTypeBuilderTyped36 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped36);
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test246");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder11 = wildcardTypeBuilder8.withUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder7.withUpperBounds(typeArray10);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray16);
        java.lang.reflect.WildcardType wildcardType18 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type type20 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType18);
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType18);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass26 = typeArray25.getClass();
        java.lang.reflect.Type type27 = null;
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { type27 };
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) wildcardClass34);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped36 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass34);
        java.lang.reflect.GenericArrayType genericArrayType37 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass34);
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass26, (java.lang.reflect.Type) genericArrayType37);
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType18, (java.lang.reflect.Type) genericArrayType37);
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder12.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder3.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder48.withUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder47.withUpperBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType53 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType53);
        java.lang.reflect.Type type55 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType53);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType53);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType53);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        java.lang.reflect.WildcardType wildcardType60 = wildcardTypeBuilder59.build();
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = wildcardTypeBuilder3.withUpperBounds(typeArray61);
        java.lang.Class<?> wildcardClass63 = wildcardTypeBuilder62.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strTyped36);
        org.junit.Assert.assertNotNull(genericArrayType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNull(type55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardClass63);
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test247");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(typeArray41);
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test248");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType1, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test249");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder33.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType40 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType40);
        java.lang.reflect.Type type42 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType40);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType40);
        java.lang.reflect.Type type44 = null;
        java.lang.reflect.Type[] typeArray45 = new java.lang.reflect.Type[] { type44 };
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.Class<?> wildcardClass48 = typeArray47.getClass();
        java.lang.reflect.Type type49 = null;
        java.lang.reflect.Type[] typeArray50 = new java.lang.reflect.Type[] { type49 };
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        java.lang.Class<?> wildcardClass52 = typeArray51.getClass();
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.Class<?> wildcardClass56 = typeArray55.getClass();
        boolean boolean57 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass52, (java.lang.reflect.Type) wildcardClass56);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped58 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass56);
        java.lang.reflect.GenericArrayType genericArrayType59 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass56);
        boolean boolean60 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass48, (java.lang.reflect.Type) genericArrayType59);
        boolean boolean61 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType40, (java.lang.reflect.Type) genericArrayType59);
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType40);
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder39.withLowerBounds(typeArray62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNull(type42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strTyped58);
        org.junit.Assert.assertNotNull(genericArrayType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test250");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        boolean boolean5 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test251");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder11 = wildcardTypeBuilder8.withUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder7.withUpperBounds(typeArray10);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray16);
        java.lang.reflect.WildcardType wildcardType18 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type type20 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType18);
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType18);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass26 = typeArray25.getClass();
        java.lang.reflect.Type type27 = null;
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { type27 };
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) wildcardClass34);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped36 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass34);
        java.lang.reflect.GenericArrayType genericArrayType37 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass34);
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass26, (java.lang.reflect.Type) genericArrayType37);
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType18, (java.lang.reflect.Type) genericArrayType37);
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder12.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder3.withUpperBounds(typeArray41);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNull(type20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strTyped36);
        org.junit.Assert.assertNotNull(genericArrayType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(typeArray44);
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test252");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder38.withUpperBounds(typeArray43);
        java.lang.reflect.WildcardType wildcardType45 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        java.lang.reflect.GenericArrayType genericArrayType47 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType45);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(genericArrayType47);
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test253");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder30.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test254");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = wildcardTypeBuilder3.withLowerBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType16 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = wildcardTypeBuilder15.withUpperBounds(typeArray17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType20 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = wildcardTypeBuilder19.withUpperBounds(typeArray21);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder18.withUpperBounds(typeArray21);
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = wildcardTypeBuilder23.withUpperBounds(typeArray27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType30 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType30);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = wildcardTypeBuilder29.withUpperBounds(typeArray31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType34 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass38, (java.lang.reflect.Type) wildcardClass42);
        java.lang.reflect.Type type44 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass38);
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray47.getClass();
        java.lang.reflect.Type type49 = null;
        java.lang.reflect.Type[] typeArray50 = new java.lang.reflect.Type[] { type49 };
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        java.lang.Class<?> wildcardClass52 = typeArray51.getClass();
        boolean boolean53 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass48, (java.lang.reflect.Type) wildcardClass52);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped54 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass52);
        java.lang.reflect.GenericArrayType genericArrayType55 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass52);
        java.lang.Class<?> wildcardClass56 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass38, (java.lang.reflect.Type) genericArrayType55);
        java.lang.reflect.Type[] typeArray57 = new java.lang.reflect.Type[] { wildcardType34, genericArrayType55 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder33.withUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder32.withUpperBounds(typeArray57);
        java.lang.reflect.WildcardType wildcardType60 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = wildcardTypeBuilder59.withLowerBounds(typeArray61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder28.withLowerBounds(typeArray61);
        java.lang.reflect.WildcardType wildcardType64 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder66 = wildcardTypeBuilder63.withLowerBounds(typeArray65);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = wildcardTypeBuilder14.withUpperBounds(typeArray65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardType20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardType30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strTyped54);
        org.junit.Assert.assertNotNull(genericArrayType55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardType64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test255");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType34);
        java.lang.reflect.Type type36 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.Class<?> wildcardClass46 = typeArray45.getClass();
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass50);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped52 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.GenericArrayType genericArrayType53 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass50);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass42, (java.lang.reflect.Type) genericArrayType53);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType34, (java.lang.reflect.Type) genericArrayType53);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder33.withLowerBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType59 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder58.withUpperBounds(typeArray60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType63 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder62.withUpperBounds(typeArray64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder66 = wildcardTypeBuilder61.withUpperBounds(typeArray64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType68 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray69 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType68);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder67.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder74 = wildcardTypeBuilder71.withUpperBounds(typeArray73);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder70.withUpperBounds(typeArray73);
        java.lang.reflect.WildcardType wildcardType76 = wildcardTypeBuilder70.build();
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType76);
        java.lang.reflect.Type[] typeArray78 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType76);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder79 = wildcardTypeBuilder66.withUpperBounds(typeArray78);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder80 = wildcardTypeBuilder57.withUpperBounds(typeArray78);
        java.lang.reflect.WildcardType wildcardType81 = wildcardTypeBuilder57.build();
        java.lang.String str82 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType81);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strTyped52);
        org.junit.Assert.assertNotNull(genericArrayType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardType59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardType63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
        org.junit.Assert.assertNotNull(wildcardType68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(wildcardType76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder79);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder80);
        org.junit.Assert.assertNotNull(wildcardType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "? super java.lang.Object" + "'", str82, "? super java.lang.Object");
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test256");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.GenericDeclaration> genericDeclarationTyped7 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass1);
        java.lang.Class<?> wildcardClass8 = genericDeclarationTyped7.getClass();
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(genericDeclarationTyped7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNull(type9);
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test257");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder30.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        java.lang.Class<?> wildcardClass42 = wildcardTypeBuilder40.getClass();
        java.lang.reflect.GenericArrayType genericArrayType43 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(genericArrayType43);
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test258");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(typeArray14);
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test259");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test260");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType34);
        java.lang.reflect.Type type36 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.Class<?> wildcardClass46 = typeArray45.getClass();
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass50);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped52 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.GenericArrayType genericArrayType53 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass50);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass42, (java.lang.reflect.Type) genericArrayType53);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType34, (java.lang.reflect.Type) genericArrayType53);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder33.withLowerBounds(typeArray56);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strTyped52);
        org.junit.Assert.assertNotNull(genericArrayType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(typeArray58);
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test261");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.Class<?> wildcardClass2 = wildcardType0.getClass();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        java.lang.reflect.Type type29 = null;
        java.lang.reflect.Type[] typeArray30 = new java.lang.reflect.Type[] { type29 };
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass32);
        java.lang.Object obj34 = new java.lang.Object();
        java.lang.Class<?> wildcardClass35 = obj34.getClass();
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray39.getClass();
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped46 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass35, (java.lang.reflect.Type) wildcardClass44);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType23, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType23, (java.lang.reflect.Type) wildcardType49);
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardType49);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strTyped46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test262");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.WildcardType wildcardType39 = wildcardTypeBuilder34.build();
        java.lang.reflect.Type type40 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType39);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNull(type40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test263");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType16 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        java.lang.reflect.Type type18 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType16);
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType16);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder15.withLowerBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType23 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder22.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder25.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type type33 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType31);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder30.withUpperBounds(typeArray35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder37.withUpperBounds(typeArray40);
        java.lang.reflect.WildcardType wildcardType43 = wildcardTypeBuilder42.build();
        java.lang.reflect.Type type44 = null;
        java.lang.reflect.Type[] typeArray45 = new java.lang.reflect.Type[] { type44 };
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.Class<?> wildcardClass47 = typeArray46.getClass();
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass51);
        java.lang.reflect.Type type54 = null;
        java.lang.reflect.Type[] typeArray55 = new java.lang.reflect.Type[] { type54 };
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray56.getClass();
        java.lang.reflect.Type type58 = null;
        java.lang.reflect.Type[] typeArray59 = new java.lang.reflect.Type[] { type58 };
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        java.lang.Class<?> wildcardClass61 = typeArray60.getClass();
        boolean boolean62 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass57, (java.lang.reflect.Type) wildcardClass61);
        java.lang.reflect.Type type63 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass57);
        java.lang.reflect.Type type64 = null;
        java.lang.reflect.Type[] typeArray65 = new java.lang.reflect.Type[] { type64 };
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray65);
        java.lang.Class<?> wildcardClass67 = typeArray65.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped68 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass67);
        boolean boolean69 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass57, (java.lang.reflect.Type) wildcardClass67);
        java.lang.Class<?> wildcardClass70 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass51, (java.lang.reflect.Type) wildcardClass67);
        boolean boolean71 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass51);
        java.lang.reflect.Type type72 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.ParameterizedType> parameterizedTypeTyped73 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type72);
        boolean boolean74 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type72);
        boolean boolean75 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType43, type72);
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder77 = wildcardTypeBuilder15.withUpperBounds(typeArray76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardType43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strTyped53);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(type63);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(wildcardClass67);
        org.junit.Assert.assertNotNull(objTyped68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(wildcardClass70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(type72);
        org.junit.Assert.assertNotNull(parameterizedTypeTyped73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder77);
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test264");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.WildcardType wildcardType50 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        java.lang.reflect.Type type52 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType50);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType50);
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder48.withUpperBounds(typeArray54);
        java.lang.reflect.WildcardType wildcardType57 = wildcardTypeBuilder48.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test265");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder10.withUpperBounds(typeArray12);
        java.lang.reflect.WildcardType wildcardType14 = wildcardTypeBuilder10.build();
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType14);
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType14);
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = wildcardTypeBuilder3.withLowerBounds(typeArray17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test266");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = null;
        java.lang.Class<?> wildcardClass3 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType0, type2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test267");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) wildcardClass54);
        java.lang.reflect.Type type56 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        boolean boolean65 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass60, (java.lang.reflect.Type) wildcardClass64);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped66 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.GenericArrayType genericArrayType67 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass64);
        java.lang.Class<?> wildcardClass68 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) genericArrayType67);
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { wildcardType46, genericArrayType67 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder45.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder44.withUpperBounds(typeArray69);
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder71.withLowerBounds(typeArray74);
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder77 = wildcardTypeBuilder25.withLowerBounds(typeArray74);
        java.lang.reflect.WildcardType wildcardType78 = wildcardTypeBuilder25.build();
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType78);
        java.lang.reflect.Type[] typeArray80 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray79);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strTyped66);
        org.junit.Assert.assertNotNull(genericArrayType67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder77);
        org.junit.Assert.assertNotNull(wildcardType78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(typeArray80);
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test268");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder48.withUpperBounds(typeArray53);
        java.lang.reflect.Type[] typeArray55 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder48.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType58 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder57.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType62 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder61.withUpperBounds(typeArray63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder60.withUpperBounds(typeArray63);
        java.lang.reflect.WildcardType wildcardType66 = wildcardTypeBuilder65.build();
        java.lang.reflect.WildcardType wildcardType67 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray68 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType67);
        java.lang.reflect.Type type69 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType67);
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType67);
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType67);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder72 = wildcardTypeBuilder65.withUpperBounds(typeArray71);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder73 = wildcardTypeBuilder56.withLowerBounds(typeArray71);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(wildcardType67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder73);
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test269");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = null;
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType2, type11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test270");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean50 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType46);
        java.lang.String str51 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "?" + "'", str51, "?");
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test271");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type type3 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType1, (java.lang.reflect.Type) genericArrayType20);
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNull(type3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test272");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        java.lang.reflect.GenericArrayType genericArrayType44 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(genericArrayType44);
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test273");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass21);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped23 = org.apache.commons.lang3.reflect.TypeUtils.wrap(type22);
        java.lang.reflect.GenericArrayType genericArrayType24 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType(type22);
        java.lang.String str25 = org.apache.commons.lang3.reflect.TypeUtils.toString(type22);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(strTyped23);
        org.junit.Assert.assertNotNull(genericArrayType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.lang.reflect.Type" + "'", str25, "java.lang.reflect.Type");
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test274");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test275");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test276");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        boolean boolean49 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType46);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped50 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type type51 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType46);
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType(type51);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strTyped50);
        org.junit.Assert.assertNull(type51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test277");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) wildcardClass54);
        java.lang.reflect.Type type56 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.Type type57 = null;
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { type57 };
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        boolean boolean65 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass60, (java.lang.reflect.Type) wildcardClass64);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped66 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.GenericArrayType genericArrayType67 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass64);
        java.lang.Class<?> wildcardClass68 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass50, (java.lang.reflect.Type) genericArrayType67);
        java.lang.reflect.Type[] typeArray69 = new java.lang.reflect.Type[] { wildcardType46, genericArrayType67 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder45.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder44.withUpperBounds(typeArray69);
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder71.withLowerBounds(typeArray74);
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder77 = wildcardTypeBuilder25.withLowerBounds(typeArray74);
        java.lang.reflect.WildcardType wildcardType78 = wildcardTypeBuilder25.build();
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType78);
        java.lang.reflect.Type[] typeArray80 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(type56);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strTyped66);
        org.junit.Assert.assertNotNull(genericArrayType67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder77);
        org.junit.Assert.assertNotNull(wildcardType78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(typeArray80);
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test278");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.Class<?> wildcardClass49 = wildcardTypeBuilder13.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardClass49);
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test279");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType8 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) genericArrayType7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType8);
        java.lang.reflect.Type type10 = null;
        java.lang.Object obj11 = new java.lang.Object();
        java.lang.Class<?> wildcardClass12 = obj11.getClass();
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray14.getClass();
        java.lang.Class<?> wildcardClass17 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass16);
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals(type10, (java.lang.reflect.Type) wildcardClass16);
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) type9, type10);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertNotNull(genericArrayType8);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test280");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType35);
        java.lang.reflect.Type type37 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType35);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType35);
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.Class<?> wildcardClass43 = typeArray42.getClass();
        java.lang.reflect.Type type44 = null;
        java.lang.reflect.Type[] typeArray45 = new java.lang.reflect.Type[] { type44 };
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.Class<?> wildcardClass47 = typeArray46.getClass();
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass51);
        java.lang.reflect.GenericArrayType genericArrayType54 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass51);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass43, (java.lang.reflect.Type) genericArrayType54);
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType35, (java.lang.reflect.Type) genericArrayType54);
        boolean boolean57 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type34, (java.lang.reflect.Type) wildcardType35);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType35);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder30.withUpperBounds(typeArray59);
        java.lang.reflect.WildcardType wildcardType62 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType62);
        java.lang.reflect.Type type64 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType62);
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType62);
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = wildcardTypeBuilder61.withUpperBounds(typeArray66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNull(type37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strTyped53);
        org.junit.Assert.assertNotNull(genericArrayType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNull(type64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test281");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType8 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) genericArrayType7);
        java.lang.reflect.GenericArrayType genericArrayType9 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) genericArrayType8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertNotNull(genericArrayType8);
        org.junit.Assert.assertNotNull(genericArrayType9);
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test282");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        java.lang.reflect.Type type18 = null;
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] { type18 };
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass21, (java.lang.reflect.Type) wildcardClass25);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped27 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass25);
        java.lang.reflect.GenericArrayType genericArrayType28 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean29 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) genericArrayType28);
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType9, (java.lang.reflect.Type) genericArrayType28);
        boolean boolean31 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type8, (java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder0.withUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType38 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder37.withUpperBounds(typeArray39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = wildcardTypeBuilder40.withUpperBounds(typeArray43);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.Type type48 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder45.withUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType54 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder53.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder52.withUpperBounds(typeArray55);
        java.lang.reflect.WildcardType wildcardType58 = wildcardTypeBuilder57.build();
        java.lang.reflect.Type type59 = null;
        java.lang.reflect.Type[] typeArray60 = new java.lang.reflect.Type[] { type59 };
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder57.withLowerBounds(typeArray60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType65 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType65);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = wildcardTypeBuilder64.withUpperBounds(typeArray66);
        java.lang.reflect.WildcardType wildcardType68 = wildcardTypeBuilder64.build();
        java.lang.reflect.Type[] typeArray69 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType68);
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType68);
        java.lang.reflect.Type[] typeArray71 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray70);
        java.lang.reflect.Type[] typeArray72 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray71);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder73 = wildcardTypeBuilder63.withUpperBounds(typeArray72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder74 = wildcardTypeBuilder0.withUpperBounds(typeArray72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strTyped27);
        org.junit.Assert.assertNotNull(genericArrayType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardType38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardType54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardType65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
        org.junit.Assert.assertNotNull(wildcardType68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder73);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder74);
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test283");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType8 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType8);
        java.lang.reflect.Type type10 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType8);
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass20, (java.lang.reflect.Type) wildcardClass24);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped26 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.GenericArrayType genericArrayType27 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass24);
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) genericArrayType27);
        boolean boolean29 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType8, (java.lang.reflect.Type) genericArrayType27);
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType8);
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = wildcardTypeBuilder0.withUpperBounds(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strTyped26);
        org.junit.Assert.assertNotNull(genericArrayType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test284");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean50 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType46);
        java.lang.String str51 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType46);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.Typed<java.lang.String>> strTypedTyped52 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType46);
        org.apache.commons.lang3.reflect.Typed<java.util.Map<java.lang.reflect.TypeVariable<?>, java.lang.reflect.Type>> wildcardTypeVariableMapTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType46);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "?" + "'", str51, "?");
        org.junit.Assert.assertNotNull(strTypedTyped52);
        org.junit.Assert.assertNotNull(wildcardTypeVariableMapTyped53);
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test285");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.WildcardType wildcardType39 = wildcardTypeBuilder34.build();
        boolean boolean40 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType39);
        boolean boolean41 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType39);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType39);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test286");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.Object obj9 = new java.lang.Object();
        java.lang.Class<?> wildcardClass10 = obj9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass10, (java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.Type type23 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.GenericArrayType genericArrayType24 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType26 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = wildcardTypeBuilder25.withUpperBounds(typeArray27);
        java.lang.reflect.WildcardType wildcardType29 = wildcardTypeBuilder25.build();
        java.lang.reflect.GenericArrayType genericArrayType30 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType29);
        java.lang.reflect.Type type31 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType30);
        java.lang.Class<?> wildcardClass32 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType24, (java.lang.reflect.Type) genericArrayType30);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(type23);
        org.junit.Assert.assertNotNull(genericArrayType24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardType26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardType29);
        org.junit.Assert.assertNotNull(genericArrayType30);
        org.junit.Assert.assertNotNull(type31);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test287");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test288");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder48.withUpperBounds(typeArray53);
        java.lang.reflect.Type type55 = null;
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { type55 };
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withLowerBounds(typeArray58);
        java.lang.reflect.Type[] typeArray61 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = wildcardTypeBuilder60.withLowerBounds(typeArray61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test289");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType23 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder22.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder25.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type type33 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType31);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder30.withUpperBounds(typeArray35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder37.withUpperBounds(typeArray40);
        java.lang.reflect.WildcardType wildcardType43 = wildcardTypeBuilder42.build();
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = wildcardTypeBuilder20.withLowerBounds(typeArray44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder46 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType47 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder46.withUpperBounds(typeArray48);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder50 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType51 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = wildcardTypeBuilder50.withUpperBounds(typeArray52);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder49.withUpperBounds(typeArray52);
        java.lang.reflect.WildcardType wildcardType55 = wildcardTypeBuilder49.build();
        java.lang.reflect.Type type56 = null;
        java.lang.reflect.Type[] typeArray57 = new java.lang.reflect.Type[] { type56 };
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray57);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder49.withLowerBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder20.withLowerBounds(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNull(type33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardType43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder46);
        org.junit.Assert.assertNotNull(wildcardType47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder50);
        org.junit.Assert.assertNotNull(wildcardType51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardType55);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test290");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        java.lang.reflect.WildcardType wildcardType14 = wildcardTypeBuilder8.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType16 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = wildcardTypeBuilder15.withUpperBounds(typeArray17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType20 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = wildcardTypeBuilder19.withUpperBounds(typeArray21);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder18.withUpperBounds(typeArray21);
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = wildcardTypeBuilder23.withUpperBounds(typeArray27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType30 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType30);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = wildcardTypeBuilder29.withUpperBounds(typeArray31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType34 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass38, (java.lang.reflect.Type) wildcardClass42);
        java.lang.reflect.Type type44 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass38);
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray47.getClass();
        java.lang.reflect.Type type49 = null;
        java.lang.reflect.Type[] typeArray50 = new java.lang.reflect.Type[] { type49 };
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        java.lang.Class<?> wildcardClass52 = typeArray51.getClass();
        boolean boolean53 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass48, (java.lang.reflect.Type) wildcardClass52);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped54 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass52);
        java.lang.reflect.GenericArrayType genericArrayType55 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass52);
        java.lang.Class<?> wildcardClass56 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass38, (java.lang.reflect.Type) genericArrayType55);
        java.lang.reflect.Type[] typeArray57 = new java.lang.reflect.Type[] { wildcardType34, genericArrayType55 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder33.withUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder32.withUpperBounds(typeArray57);
        java.lang.reflect.WildcardType wildcardType60 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = wildcardTypeBuilder59.withLowerBounds(typeArray61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder28.withLowerBounds(typeArray61);
        java.lang.reflect.WildcardType wildcardType64 = wildcardTypeBuilder63.build();
        java.lang.reflect.Type type65 = null;
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { type65 };
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        java.lang.reflect.Type[] typeArray68 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = wildcardTypeBuilder63.withUpperBounds(typeArray68);
        java.lang.reflect.Type type70 = null;
        java.lang.reflect.Type[] typeArray71 = new java.lang.reflect.Type[] { type70 };
        java.lang.reflect.Type[] typeArray72 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray71);
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray71);
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray73);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder63.withLowerBounds(typeArray73);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder76 = wildcardTypeBuilder8.withLowerBounds(typeArray73);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardType20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardType30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(type44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardClass52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strTyped54);
        org.junit.Assert.assertNotNull(genericArrayType55);
        org.junit.Assert.assertNotNull(wildcardClass56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardType64);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
        org.junit.Assert.assertNotNull(typeArray71);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder76);
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test291");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder48.withUpperBounds(typeArray53);
        java.lang.reflect.Type type55 = null;
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { type55 };
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withLowerBounds(typeArray58);
        java.lang.reflect.WildcardType wildcardType61 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder48.withUpperBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType64 = wildcardTypeBuilder48.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardType64);
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test292");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder8.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType22 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = wildcardTypeBuilder21.withUpperBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType26 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = wildcardTypeBuilder25.withUpperBounds(typeArray27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder24.withUpperBounds(typeArray27);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType36 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder35.withUpperBounds(typeArray37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType40 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray47.getClass();
        boolean boolean49 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass48);
        java.lang.reflect.Type type50 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        java.lang.reflect.Type type55 = null;
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { type55 };
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.Class<?> wildcardClass58 = typeArray57.getClass();
        boolean boolean59 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass58);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped60 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass58);
        java.lang.reflect.GenericArrayType genericArrayType61 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass58);
        java.lang.Class<?> wildcardClass62 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) genericArrayType61);
        java.lang.reflect.Type[] typeArray63 = new java.lang.reflect.Type[] { wildcardType40, genericArrayType61 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder39.withUpperBounds(typeArray63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder38.withUpperBounds(typeArray63);
        java.lang.reflect.WildcardType wildcardType66 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType66);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder68 = wildcardTypeBuilder65.withLowerBounds(typeArray67);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = wildcardTypeBuilder34.withLowerBounds(typeArray67);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder8.withLowerBounds(typeArray67);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder74 = wildcardTypeBuilder71.withUpperBounds(typeArray73);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType76 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType76);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder78 = wildcardTypeBuilder75.withUpperBounds(typeArray77);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder79 = wildcardTypeBuilder74.withUpperBounds(typeArray77);
        java.lang.reflect.WildcardType wildcardType80 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray81 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType80);
        java.lang.reflect.Type type82 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType80);
        java.lang.reflect.Type[] typeArray83 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType80);
        java.lang.reflect.Type[] typeArray84 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType80);
        java.lang.reflect.Type[] typeArray85 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray84);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder86 = wildcardTypeBuilder79.withUpperBounds(typeArray84);
        java.lang.reflect.WildcardType wildcardType87 = wildcardTypeBuilder86.build();
        java.lang.reflect.Type[] typeArray88 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType87);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder89 = wildcardTypeBuilder70.withLowerBounds(typeArray88);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardType26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardType36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(type50);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strTyped60);
        org.junit.Assert.assertNotNull(genericArrayType61);
        org.junit.Assert.assertNotNull(wildcardClass62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(wildcardType76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder79);
        org.junit.Assert.assertNotNull(wildcardType80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNull(type82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(typeArray84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder86);
        org.junit.Assert.assertNotNull(wildcardType87);
        org.junit.Assert.assertNotNull(typeArray88);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder89);
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test293");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType8 = wildcardTypeBuilder7.build();
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder7.build();
        java.lang.reflect.Type type10 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNull(type10);
        org.junit.Assert.assertNotNull(typeArray11);
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test294");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        java.lang.reflect.Type type59 = null;
        java.lang.reflect.Type[] typeArray60 = new java.lang.reflect.Type[] { type59 };
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray61);
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder52.withUpperBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType65 = wildcardTypeBuilder52.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardType65);
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test295");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test296");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder8.withUpperBounds(typeArray18);
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = wildcardTypeBuilder20.withUpperBounds(typeArray26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType29 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder28.withUpperBounds(typeArray30);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType33 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = wildcardTypeBuilder32.withUpperBounds(typeArray34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder31.withUpperBounds(typeArray34);
        java.lang.reflect.WildcardType wildcardType37 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType37);
        java.lang.reflect.Type type39 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType37);
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType37);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType37);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder36.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder20.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder45.build();
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType49);
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = wildcardTypeBuilder20.withUpperBounds(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardType29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
        org.junit.Assert.assertNotNull(wildcardType33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(wildcardType37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNull(type39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test297");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = wildcardTypeBuilder10.build();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type9, (java.lang.reflect.Type) wildcardType11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType11);
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        java.lang.reflect.Type type18 = null;
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] { type18 };
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) wildcardClass21);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped23 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass21);
        java.lang.reflect.GenericArrayType genericArrayType24 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass21);
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        java.lang.reflect.Type type29 = null;
        java.lang.reflect.Type[] typeArray30 = new java.lang.reflect.Type[] { type29 };
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass32);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped34 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass32);
        java.lang.Class<?> wildcardClass35 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType24, (java.lang.reflect.Type) wildcardClass32);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped36 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType24);
        java.lang.reflect.Type type37 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType24);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        java.lang.reflect.Type type42 = null;
        java.lang.reflect.Type[] typeArray43 = new java.lang.reflect.Type[] { type42 };
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray43);
        java.lang.Class<?> wildcardClass45 = typeArray44.getClass();
        boolean boolean46 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass41, (java.lang.reflect.Type) wildcardClass45);
        java.lang.reflect.Type type47 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass41);
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        java.lang.reflect.Type type52 = null;
        java.lang.reflect.Type[] typeArray53 = new java.lang.reflect.Type[] { type52 };
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray53);
        java.lang.Class<?> wildcardClass55 = typeArray54.getClass();
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass51, (java.lang.reflect.Type) wildcardClass55);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped57 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass55);
        java.lang.reflect.GenericArrayType genericArrayType58 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass55);
        java.lang.Class<?> wildcardClass59 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass41, (java.lang.reflect.Type) genericArrayType58);
        java.lang.Class<?> wildcardClass60 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type37, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean61 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType11, type37);
        java.lang.reflect.GenericArrayType genericArrayType62 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType11);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strTyped23);
        org.junit.Assert.assertNotNull(genericArrayType24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strTyped34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(typeUtilsTyped36);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(type47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strTyped57);
        org.junit.Assert.assertNotNull(genericArrayType58);
        org.junit.Assert.assertNotNull(wildcardClass59);
        org.junit.Assert.assertNotNull(wildcardClass60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(genericArrayType62);
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test298");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder48.withUpperBounds(typeArray53);
        java.lang.reflect.Type type55 = null;
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { type55 };
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withLowerBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType62 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder61.withUpperBounds(typeArray63);
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray63);
        java.lang.reflect.Type[] typeArray66 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray65);
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder68 = wildcardTypeBuilder48.withLowerBounds(typeArray67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder68);
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test299");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType36 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder35.withUpperBounds(typeArray37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType40 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder39.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder38.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder34.withUpperBounds(typeArray41);
        java.lang.reflect.WildcardType wildcardType45 = wildcardTypeBuilder44.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder46 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType47 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder46.withUpperBounds(typeArray48);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder50 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType51 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = wildcardTypeBuilder50.withUpperBounds(typeArray52);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder49.withUpperBounds(typeArray52);
        java.lang.reflect.WildcardType wildcardType55 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType55);
        java.lang.reflect.Type type57 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType55);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType55);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType55);
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder54.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType63 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder62.withUpperBounds(typeArray64);
        java.lang.reflect.WildcardType wildcardType66 = wildcardTypeBuilder62.build();
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType66);
        java.lang.reflect.Type[] typeArray68 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType66);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = wildcardTypeBuilder54.withUpperBounds(typeArray68);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder44.withUpperBounds(typeArray68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardType36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder46);
        org.junit.Assert.assertNotNull(wildcardType47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder50);
        org.junit.Assert.assertNotNull(wildcardType51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardType55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNull(type57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardType63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test300");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder14.build();
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = wildcardTypeBuilder13.withLowerBounds(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test301");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = null;
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass21, type22);
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type26 = null;
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, type26);
        java.lang.reflect.GenericArrayType genericArrayType28 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(genericArrayType28);
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test302");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder49.build();
        java.lang.reflect.WildcardType wildcardType51 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType51);
        java.lang.reflect.Type type53 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType51);
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType51);
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder49.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder40.withUpperBounds(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(wildcardType51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test303");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type type49 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType20);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.ParameterizedType> parameterizedTypeTyped50 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType20);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder> wildcardTypeBuilderTyped51 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType20);
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) genericArrayType20);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(type49);
        org.junit.Assert.assertNotNull(parameterizedTypeTyped50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test304");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass5 = typeArray2.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test305");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray10.getClass();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass11);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped13 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass11);
        java.lang.reflect.GenericArrayType genericArrayType14 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass11);
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass22 = typeArray21.getClass();
        boolean boolean23 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass18, (java.lang.reflect.Type) wildcardClass22);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped24 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass22);
        java.lang.Class<?> wildcardClass25 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType14, (java.lang.reflect.Type) wildcardClass22);
        java.lang.Class<?> wildcardClass26 = genericArrayType14.getClass();
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) genericArrayType14);
        java.lang.Class<?> wildcardClass28 = genericArrayType14.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strTyped13);
        org.junit.Assert.assertNotNull(genericArrayType14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strTyped24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNull(wildcardClass27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test306");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type23 = null;
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { type23 };
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray25.getClass();
        java.lang.reflect.Type type27 = null;
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { type27 };
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        boolean boolean31 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass26, (java.lang.reflect.Type) wildcardClass30);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped32 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass30);
        java.lang.reflect.GenericArrayType genericArrayType33 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass30);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        java.lang.Class<?> wildcardClass44 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType33, (java.lang.reflect.Type) wildcardClass41);
        java.lang.reflect.Type type45 = null;
        java.lang.Class<?> wildcardClass46 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass44, type45);
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass46);
        org.apache.commons.lang3.reflect.Typed<java.lang.Comparable<java.lang.String>> strComparableTyped48 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass46);
        boolean boolean49 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass46);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strTyped32);
        org.junit.Assert.assertNotNull(genericArrayType33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strComparableTyped48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test307");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.Object obj12 = new java.lang.Object();
        java.lang.Class<?> wildcardClass13 = obj12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass13);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped15 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass6);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass6);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped17 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass6);
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder0, (java.lang.reflect.Type) wildcardClass6);
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objTyped17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test308");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType10 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder9.withUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType14 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = wildcardTypeBuilder13.withUpperBounds(typeArray15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray15);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder12.build();
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder8.withUpperBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType23 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder22.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type28 = null;
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { type28 };
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray30.getClass();
        java.lang.reflect.Type type32 = null;
        java.lang.reflect.Type[] typeArray33 = new java.lang.reflect.Type[] { type32 };
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray34.getClass();
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass31, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.Type type37 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass31);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        java.lang.reflect.Type type42 = null;
        java.lang.reflect.Type[] typeArray43 = new java.lang.reflect.Type[] { type42 };
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray43);
        java.lang.Class<?> wildcardClass45 = typeArray44.getClass();
        boolean boolean46 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass41, (java.lang.reflect.Type) wildcardClass45);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped47 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass45);
        java.lang.reflect.GenericArrayType genericArrayType48 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass45);
        java.lang.Class<?> wildcardClass49 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass31, (java.lang.reflect.Type) genericArrayType48);
        java.lang.reflect.Type[] typeArray50 = new java.lang.reflect.Type[] { wildcardType27, genericArrayType48 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder26.withUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder25.withUpperBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType53 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType53);
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder52.withLowerBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder8.withUpperBounds(typeArray57);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray57);
        java.lang.Class<?> wildcardClass60 = typeArray59.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strTyped47);
        org.junit.Assert.assertNotNull(genericArrayType48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test309");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType34);
        java.lang.String str36 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.GenericArrayType genericArrayType37 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType34);
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) genericArrayType37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "? super java.lang.Object" + "'", str36, "? super java.lang.Object");
        org.junit.Assert.assertNotNull(genericArrayType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test310");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        java.lang.reflect.GenericArrayType genericArrayType25 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) genericArrayType23);
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType0, (java.lang.reflect.Type) genericArrayType25);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(genericArrayType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test311");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        java.lang.reflect.WildcardType wildcardType22 = wildcardTypeBuilder20.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(wildcardType22);
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test312");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test313");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.GenericArrayType genericArrayType13 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(genericArrayType13);
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test314");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(typeArray4);
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test315");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder30.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder49.withUpperBounds(typeArray53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType56 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder55.withUpperBounds(typeArray57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType60 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        java.lang.reflect.Type type65 = null;
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { type65 };
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        java.lang.Class<?> wildcardClass68 = typeArray67.getClass();
        boolean boolean69 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass64, (java.lang.reflect.Type) wildcardClass68);
        java.lang.reflect.Type type70 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass64);
        java.lang.reflect.Type type71 = null;
        java.lang.reflect.Type[] typeArray72 = new java.lang.reflect.Type[] { type71 };
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray72);
        java.lang.Class<?> wildcardClass74 = typeArray73.getClass();
        java.lang.reflect.Type type75 = null;
        java.lang.reflect.Type[] typeArray76 = new java.lang.reflect.Type[] { type75 };
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray76);
        java.lang.Class<?> wildcardClass78 = typeArray77.getClass();
        boolean boolean79 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass74, (java.lang.reflect.Type) wildcardClass78);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped80 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass78);
        java.lang.reflect.GenericArrayType genericArrayType81 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass78);
        java.lang.Class<?> wildcardClass82 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass64, (java.lang.reflect.Type) genericArrayType81);
        java.lang.reflect.Type[] typeArray83 = new java.lang.reflect.Type[] { wildcardType60, genericArrayType81 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder84 = wildcardTypeBuilder59.withUpperBounds(typeArray83);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder85 = wildcardTypeBuilder58.withUpperBounds(typeArray83);
        java.lang.reflect.WildcardType wildcardType86 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray87 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType86);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder88 = wildcardTypeBuilder85.withLowerBounds(typeArray87);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder89 = wildcardTypeBuilder54.withLowerBounds(typeArray87);
        java.lang.reflect.WildcardType wildcardType90 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray91 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType90);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder92 = wildcardTypeBuilder89.withLowerBounds(typeArray91);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder93 = wildcardTypeBuilder40.withUpperBounds(typeArray91);
        java.lang.reflect.Type[] typeArray94 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder95 = wildcardTypeBuilder93.withLowerBounds(typeArray94);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardType56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(type70);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(wildcardClass74);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(wildcardClass78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strTyped80);
        org.junit.Assert.assertNotNull(genericArrayType81);
        org.junit.Assert.assertNotNull(wildcardClass82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder84);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder85);
        org.junit.Assert.assertNotNull(wildcardType86);
        org.junit.Assert.assertNotNull(typeArray87);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder88);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder89);
        org.junit.Assert.assertNotNull(wildcardType90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder92);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder93);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder95);
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test316");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.WildcardType wildcardType39 = wildcardTypeBuilder34.build();
        boolean boolean40 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType39);
        boolean boolean41 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType39);
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType39);
        java.lang.Class<?> wildcardClass43 = wildcardType39.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test317");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.WildcardType wildcardType10 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test318");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.WildcardType wildcardType2 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        java.lang.String str8 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "java.lang.Object" + "'", str8, "java.lang.Object");
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test319");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        boolean boolean3 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test320");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder30.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        java.lang.Class<?> wildcardClass42 = wildcardTypeBuilder40.getClass();
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test321");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder8.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType21);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder8.withUpperBounds(typeArray22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType25 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType25);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = wildcardTypeBuilder24.withUpperBounds(typeArray26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder28 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType29 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = wildcardTypeBuilder28.withUpperBounds(typeArray30);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = wildcardTypeBuilder27.withUpperBounds(typeArray30);
        java.lang.reflect.Type type33 = null;
        java.lang.reflect.Type[] typeArray34 = new java.lang.reflect.Type[] { type33 };
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray34);
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder32.withUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType39 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder38.withUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType43 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type44 = null;
        java.lang.reflect.Type[] typeArray45 = new java.lang.reflect.Type[] { type44 };
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray45);
        java.lang.Class<?> wildcardClass47 = typeArray46.getClass();
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) wildcardClass51);
        java.lang.reflect.Type type53 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass47);
        java.lang.reflect.Type type54 = null;
        java.lang.reflect.Type[] typeArray55 = new java.lang.reflect.Type[] { type54 };
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.Class<?> wildcardClass57 = typeArray56.getClass();
        java.lang.reflect.Type type58 = null;
        java.lang.reflect.Type[] typeArray59 = new java.lang.reflect.Type[] { type58 };
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        java.lang.Class<?> wildcardClass61 = typeArray60.getClass();
        boolean boolean62 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass57, (java.lang.reflect.Type) wildcardClass61);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped63 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass61);
        java.lang.reflect.GenericArrayType genericArrayType64 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass61);
        java.lang.Class<?> wildcardClass65 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass47, (java.lang.reflect.Type) genericArrayType64);
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { wildcardType43, genericArrayType64 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = wildcardTypeBuilder42.withUpperBounds(typeArray66);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder68 = wildcardTypeBuilder41.withUpperBounds(typeArray66);
        java.lang.reflect.WildcardType wildcardType69 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = wildcardTypeBuilder68.withLowerBounds(typeArray70);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder72 = wildcardTypeBuilder37.withLowerBounds(typeArray70);
        java.lang.reflect.WildcardType wildcardType73 = wildcardTypeBuilder72.build();
        java.lang.reflect.Type type74 = null;
        java.lang.reflect.Type[] typeArray75 = new java.lang.reflect.Type[] { type74 };
        java.lang.reflect.Type[] typeArray76 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray75);
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray75);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder78 = wildcardTypeBuilder72.withUpperBounds(typeArray77);
        java.lang.reflect.Type type79 = null;
        java.lang.reflect.Type[] typeArray80 = new java.lang.reflect.Type[] { type79 };
        java.lang.reflect.Type[] typeArray81 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray80);
        java.lang.reflect.Type[] typeArray82 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray80);
        java.lang.reflect.Type[] typeArray83 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray82);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder84 = wildcardTypeBuilder72.withLowerBounds(typeArray82);
        java.lang.reflect.Type[] typeArray85 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray82);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder86 = wildcardTypeBuilder8.withLowerBounds(typeArray82);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder87 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType88 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray89 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType88);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder90 = wildcardTypeBuilder87.withUpperBounds(typeArray89);
        java.lang.reflect.WildcardType wildcardType91 = wildcardTypeBuilder87.build();
        java.lang.reflect.Type[] typeArray92 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType91);
        java.lang.reflect.Type[] typeArray93 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType91);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder94 = wildcardTypeBuilder8.withLowerBounds(typeArray93);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(wildcardType25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder28);
        org.junit.Assert.assertNotNull(wildcardType29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardType43);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(type53);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strTyped63);
        org.junit.Assert.assertNotNull(genericArrayType64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder68);
        org.junit.Assert.assertNotNull(wildcardType69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder72);
        org.junit.Assert.assertNotNull(wildcardType73);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(typeArray76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder78);
        org.junit.Assert.assertNotNull(typeArray80);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertNotNull(typeArray83);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder84);
        org.junit.Assert.assertNotNull(typeArray85);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder86);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder87);
        org.junit.Assert.assertNotNull(wildcardType88);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder90);
        org.junit.Assert.assertNotNull(wildcardType91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(typeArray93);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder94);
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test322");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType4);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType4);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test323");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        java.lang.reflect.Type type45 = null;
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { type45 };
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray46);
        java.lang.Class<?> wildcardClass48 = typeArray47.getClass();
        boolean boolean49 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass48);
        java.lang.Object obj50 = new java.lang.Object();
        java.lang.Class<?> wildcardClass51 = obj50.getClass();
        boolean boolean52 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass44, (java.lang.reflect.Type) wildcardClass51);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped53 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped55 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder25, (java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.Type type57 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardClass48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objTyped55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(type57);
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test324");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType13 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder12.withUpperBounds(typeArray14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder20.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type32 = null;
        java.lang.reflect.Type[] typeArray33 = new java.lang.reflect.Type[] { type32 };
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray34.getClass();
        java.lang.reflect.Type type36 = null;
        java.lang.reflect.Type[] typeArray37 = new java.lang.reflect.Type[] { type36 };
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray38.getClass();
        boolean boolean40 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass35, (java.lang.reflect.Type) wildcardClass39);
        java.lang.reflect.Type type41 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.Type type42 = null;
        java.lang.reflect.Type[] typeArray43 = new java.lang.reflect.Type[] { type42 };
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray43);
        java.lang.Class<?> wildcardClass45 = typeArray44.getClass();
        java.lang.reflect.Type type46 = null;
        java.lang.reflect.Type[] typeArray47 = new java.lang.reflect.Type[] { type46 };
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray47);
        java.lang.Class<?> wildcardClass49 = typeArray48.getClass();
        boolean boolean50 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass45, (java.lang.reflect.Type) wildcardClass49);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped51 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass49);
        java.lang.reflect.GenericArrayType genericArrayType52 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass49);
        java.lang.Class<?> wildcardClass53 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass35, (java.lang.reflect.Type) genericArrayType52);
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { wildcardType31, genericArrayType52 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = wildcardTypeBuilder30.withUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder29.withUpperBounds(typeArray54);
        java.lang.reflect.WildcardType wildcardType57 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder56.withLowerBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder25.withLowerBounds(typeArray58);
        java.lang.reflect.WildcardType wildcardType61 = wildcardTypeBuilder60.build();
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType61);
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType61);
        boolean boolean64 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardType61);
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardType13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(type41);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(strTyped51);
        org.junit.Assert.assertNotNull(genericArrayType52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(typeArray65);
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test325");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass8, (java.lang.reflect.Type) wildcardClass12);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass12);
        java.lang.reflect.GenericArrayType genericArrayType15 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass12);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) genericArrayType15);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.Typed<java.lang.String>> strTypedTyped17 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType15);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.AnnotatedElement> annotatedElementTyped18 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType15);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strTyped14);
        org.junit.Assert.assertNotNull(genericArrayType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strTypedTyped17);
        org.junit.Assert.assertNotNull(annotatedElementTyped18);
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test326");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.WildcardType wildcardType2 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        boolean boolean6 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type type7 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder11 = wildcardTypeBuilder8.withUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType13 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder12.withUpperBounds(typeArray14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = wildcardTypeBuilder11.withUpperBounds(typeArray14);
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder16.withUpperBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType23 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder22.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type28 = null;
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { type28 };
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray30.getClass();
        java.lang.reflect.Type type32 = null;
        java.lang.reflect.Type[] typeArray33 = new java.lang.reflect.Type[] { type32 };
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.Class<?> wildcardClass35 = typeArray34.getClass();
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass31, (java.lang.reflect.Type) wildcardClass35);
        java.lang.reflect.Type type37 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass31);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        java.lang.reflect.Type type42 = null;
        java.lang.reflect.Type[] typeArray43 = new java.lang.reflect.Type[] { type42 };
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray43);
        java.lang.Class<?> wildcardClass45 = typeArray44.getClass();
        boolean boolean46 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass41, (java.lang.reflect.Type) wildcardClass45);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped47 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass45);
        java.lang.reflect.GenericArrayType genericArrayType48 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass45);
        java.lang.Class<?> wildcardClass49 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass31, (java.lang.reflect.Type) genericArrayType48);
        java.lang.reflect.Type[] typeArray50 = new java.lang.reflect.Type[] { wildcardType27, genericArrayType48 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder26.withUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder25.withUpperBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType53 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = wildcardTypeBuilder52.withLowerBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder21.withLowerBounds(typeArray54);
        java.lang.reflect.WildcardType wildcardType57 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType57);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder56.withLowerBounds(typeArray58);
        java.lang.reflect.WildcardType wildcardType60 = wildcardTypeBuilder59.build();
        java.lang.reflect.Type type61 = null;
        java.lang.reflect.Type[] typeArray62 = new java.lang.reflect.Type[] { type61 };
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray62);
        java.lang.Class<?> wildcardClass64 = typeArray63.getClass();
        java.lang.reflect.Type type65 = null;
        java.lang.reflect.Type[] typeArray66 = new java.lang.reflect.Type[] { type65 };
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray66);
        java.lang.Class<?> wildcardClass68 = typeArray67.getClass();
        boolean boolean69 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass64, (java.lang.reflect.Type) wildcardClass68);
        java.lang.Object obj70 = new java.lang.Object();
        java.lang.Class<?> wildcardClass71 = obj70.getClass();
        boolean boolean72 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass64, (java.lang.reflect.Type) wildcardClass71);
        java.lang.reflect.Type type73 = null;
        java.lang.reflect.Type[] typeArray74 = new java.lang.reflect.Type[] { type73 };
        java.lang.reflect.Type[] typeArray75 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray74);
        java.lang.Class<?> wildcardClass76 = typeArray75.getClass();
        java.lang.reflect.Type type77 = null;
        java.lang.reflect.Type[] typeArray78 = new java.lang.reflect.Type[] { type77 };
        java.lang.reflect.Type[] typeArray79 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray78);
        java.lang.Class<?> wildcardClass80 = typeArray79.getClass();
        boolean boolean81 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass76, (java.lang.reflect.Type) wildcardClass80);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped82 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass80);
        boolean boolean83 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass71, (java.lang.reflect.Type) wildcardClass80);
        boolean boolean84 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardType60, (java.lang.reflect.Type) wildcardClass80);
        java.lang.Class<?> wildcardClass85 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass80);
        java.lang.String str86 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass80);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(type7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardType13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(type37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strTyped47);
        org.junit.Assert.assertNotNull(genericArrayType48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardClass64);
        org.junit.Assert.assertNotNull(typeArray66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(wildcardClass68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(wildcardClass71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(typeArray75);
        org.junit.Assert.assertNotNull(wildcardClass76);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(typeArray79);
        org.junit.Assert.assertNotNull(wildcardClass80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(strTyped82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(wildcardClass85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "java.lang.reflect.Type[]" + "'", str86, "java.lang.reflect.Type[]");
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test327");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.Type type19 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray21.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped24 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass26 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass7, (java.lang.reflect.Type) wildcardClass23);
        boolean boolean27 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type28 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass7);
        java.lang.String str29 = org.apache.commons.lang3.reflect.TypeUtils.toString(type28);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(type19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(objTyped24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(type28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "java.lang.reflect.Type" + "'", str29, "java.lang.reflect.Type");
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test328");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass8, (java.lang.reflect.Type) wildcardClass12);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass12);
        java.lang.reflect.GenericArrayType genericArrayType15 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass12);
        boolean boolean16 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) genericArrayType15);
        java.lang.String str17 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) genericArrayType15);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strTyped14);
        org.junit.Assert.assertNotNull(genericArrayType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "java.lang.reflect.Type[][]" + "'", str17, "java.lang.reflect.Type[][]");
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test329");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.String str22 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "java.lang.reflect.Type[]" + "'", str22, "java.lang.reflect.Type[]");
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test330");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder0, (java.lang.reflect.Type) wildcardClass6);
        java.lang.Class<?> wildcardClass26 = wildcardTypeBuilder0.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test331");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass7 = typeArray4.getClass();
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test332");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType40 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder39.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType44 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder46 = wildcardTypeBuilder43.withUpperBounds(typeArray45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder42.withUpperBounds(typeArray45);
        java.lang.reflect.WildcardType wildcardType48 = wildcardTypeBuilder42.build();
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType48);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder51 = wildcardTypeBuilder38.withUpperBounds(typeArray49);
        java.lang.reflect.WildcardType wildcardType52 = wildcardTypeBuilder38.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardType44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardType48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder51);
        org.junit.Assert.assertNotNull(wildcardType52);
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test333");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray3.getClass();
        java.lang.Class<?> wildcardClass6 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardClass5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType8 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType8);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = wildcardTypeBuilder7.withUpperBounds(typeArray9);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder11 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType12 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.Type type22 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass16);
        java.lang.reflect.Type type23 = null;
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { type23 };
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray25.getClass();
        java.lang.reflect.Type type27 = null;
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { type27 };
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        boolean boolean31 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass26, (java.lang.reflect.Type) wildcardClass30);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped32 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass30);
        java.lang.reflect.GenericArrayType genericArrayType33 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass30);
        java.lang.Class<?> wildcardClass34 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) genericArrayType33);
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { wildcardType12, genericArrayType33 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder11.withUpperBounds(typeArray35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = wildcardTypeBuilder10.withUpperBounds(typeArray35);
        java.lang.reflect.WildcardType wildcardType38 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType38);
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = wildcardTypeBuilder37.withLowerBounds(typeArray40);
        java.lang.reflect.WildcardType wildcardType42 = wildcardTypeBuilder37.build();
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass1, (java.lang.reflect.Type) wildcardType42);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder11);
        org.junit.Assert.assertNotNull(wildcardType12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strTyped32);
        org.junit.Assert.assertNotNull(genericArrayType33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardType38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(typeArray44);
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test334");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder3.build();
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType9);
        boolean boolean13 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test335");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder8.withUpperBounds(typeArray18);
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = wildcardTypeBuilder20.withUpperBounds(typeArray26);
        java.lang.reflect.WildcardType wildcardType28 = wildcardTypeBuilder20.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardType28);
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test336");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType34);
        java.lang.reflect.Type type36 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.Class<?> wildcardClass46 = typeArray45.getClass();
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass50);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped52 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.GenericArrayType genericArrayType53 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass50);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass42, (java.lang.reflect.Type) genericArrayType53);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType34, (java.lang.reflect.Type) genericArrayType53);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder33.withLowerBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType59 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder58.withUpperBounds(typeArray60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType63 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder62.withUpperBounds(typeArray64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder66 = wildcardTypeBuilder61.withUpperBounds(typeArray64);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder67 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType68 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray69 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType68);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder70 = wildcardTypeBuilder67.withUpperBounds(typeArray69);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder71 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType72 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType72);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder74 = wildcardTypeBuilder71.withUpperBounds(typeArray73);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder75 = wildcardTypeBuilder70.withUpperBounds(typeArray73);
        java.lang.reflect.WildcardType wildcardType76 = wildcardTypeBuilder70.build();
        java.lang.reflect.Type[] typeArray77 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType76);
        java.lang.reflect.Type[] typeArray78 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType76);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder79 = wildcardTypeBuilder66.withUpperBounds(typeArray78);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder80 = wildcardTypeBuilder57.withUpperBounds(typeArray78);
        java.lang.reflect.WildcardType wildcardType81 = wildcardTypeBuilder57.build();
        java.lang.reflect.WildcardType wildcardType82 = wildcardTypeBuilder57.build();
        java.lang.reflect.Type type83 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType82);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strTyped52);
        org.junit.Assert.assertNotNull(genericArrayType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardType59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardType63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder66);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder67);
        org.junit.Assert.assertNotNull(wildcardType68);
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder70);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder71);
        org.junit.Assert.assertNotNull(wildcardType72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder74);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder75);
        org.junit.Assert.assertNotNull(wildcardType76);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder79);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder80);
        org.junit.Assert.assertNotNull(wildcardType81);
        org.junit.Assert.assertNotNull(wildcardType82);
        org.junit.Assert.assertNull(type83);
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test337");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder48.withUpperBounds(typeArray53);
        java.lang.reflect.Type type55 = null;
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { type55 };
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray58 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder48.withLowerBounds(typeArray58);
        java.lang.reflect.WildcardType wildcardType61 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder48.withUpperBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType64 = wildcardTypeBuilder63.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardType64);
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test338");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.Type[] typeArray9 = new java.lang.reflect.Type[] { type8 };
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray9);
        java.lang.Class<?> wildcardClass11 = typeArray9.getClass();
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass11);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped13 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass11);
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardType0, (java.lang.reflect.Type) wildcardClass11);
        boolean boolean15 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass11);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(wildcardClass11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(typeArrayTyped13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test339");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typeArray36);
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test340");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType8 = wildcardTypeBuilder7.build();
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder7.build();
        java.lang.reflect.WildcardType wildcardType10 = wildcardTypeBuilder7.build();
        java.lang.reflect.Type type11 = null;
        boolean boolean12 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType10, type11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test341");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type> typeTyped4 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeTyped4);
        org.junit.Assert.assertNotNull(type5);
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test342");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withLowerBounds(typeArray32);
        java.lang.reflect.WildcardType wildcardType34 = wildcardTypeBuilder30.build();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder30.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType41);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test343");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType16 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType17 = wildcardTypeBuilder8.build();
        java.lang.Class<?> wildcardClass18 = wildcardTypeBuilder8.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test344");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type46 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type47 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType(type46);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(type46);
        org.junit.Assert.assertNull(type47);
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test345");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType34 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType34);
        java.lang.reflect.Type type36 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType34);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType34);
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        java.lang.reflect.Type type43 = null;
        java.lang.reflect.Type[] typeArray44 = new java.lang.reflect.Type[] { type43 };
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.Class<?> wildcardClass46 = typeArray45.getClass();
        java.lang.reflect.Type type47 = null;
        java.lang.reflect.Type[] typeArray48 = new java.lang.reflect.Type[] { type47 };
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray48);
        java.lang.Class<?> wildcardClass50 = typeArray49.getClass();
        boolean boolean51 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass50);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped52 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass50);
        java.lang.reflect.GenericArrayType genericArrayType53 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass50);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass42, (java.lang.reflect.Type) genericArrayType53);
        boolean boolean55 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType34, (java.lang.reflect.Type) genericArrayType53);
        java.lang.String str56 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) genericArrayType53);
        boolean boolean57 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) genericArrayType53);
        boolean boolean58 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType21, (java.lang.reflect.Type) genericArrayType53);
        java.lang.reflect.GenericArrayType genericArrayType59 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) genericArrayType53);
        java.lang.reflect.GenericArrayType genericArrayType60 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) genericArrayType59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(wildcardType34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNull(type36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(wildcardClass50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strTyped52);
        org.junit.Assert.assertNotNull(genericArrayType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "java.lang.reflect.Type[][]" + "'", str56, "java.lang.reflect.Type[][]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(genericArrayType59);
        org.junit.Assert.assertNotNull(genericArrayType60);
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test346");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = wildcardTypeBuilder20.withLowerBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType28 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder27.withUpperBounds(typeArray29);
        java.lang.reflect.WildcardType wildcardType31 = wildcardTypeBuilder27.build();
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder26.withUpperBounds(typeArray35);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder26.withLowerBounds(typeArray40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardType28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test347");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType16 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        java.lang.reflect.Type type18 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType16);
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType16);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder15.withLowerBounds(typeArray20);
        java.lang.reflect.WildcardType wildcardType22 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType22);
        java.lang.reflect.Type type24 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType22);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType22);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass38);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped40 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass38);
        java.lang.reflect.GenericArrayType genericArrayType41 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass38);
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) genericArrayType41);
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType22, (java.lang.reflect.Type) genericArrayType41);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType22);
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder21.withUpperBounds(typeArray44);
        java.lang.reflect.Type type49 = null;
        java.lang.reflect.WildcardType wildcardType50 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        java.lang.reflect.Type type52 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType50);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType50);
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type49, (java.lang.reflect.Type) wildcardType50);
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder21.withLowerBounds(typeArray55);
        java.lang.reflect.WildcardType wildcardType57 = wildcardTypeBuilder56.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNull(type24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strTyped40);
        org.junit.Assert.assertNotNull(genericArrayType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test348");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder0, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.WildcardType wildcardType26 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type27 = null;
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { type27 };
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) wildcardClass34);
        java.lang.Object obj36 = new java.lang.Object();
        java.lang.Class<?> wildcardClass37 = obj36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass30, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass30);
        boolean boolean40 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass30);
        org.apache.commons.lang3.reflect.Typed<java.lang.Object> objTyped41 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass30);
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass30);
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass30);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType26, (java.lang.reflect.Type) wildcardClass30);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped45 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType26);
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType26);
        java.lang.reflect.Type type47 = null;
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType26, type47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardType26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(typeArrayTyped39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(objTyped41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(typeUtilsTyped45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test349");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test350");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder8.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder10 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType11 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder10.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = wildcardTypeBuilder13.withUpperBounds(typeArray16);
        java.lang.reflect.Type type19 = null;
        java.lang.reflect.Type[] typeArray20 = new java.lang.reflect.Type[] { type19 };
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder18.withUpperBounds(typeArray22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = wildcardTypeBuilder8.withLowerBounds(typeArray22);
        java.lang.reflect.WildcardType wildcardType25 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType25);
        java.lang.reflect.Type type27 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType25);
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType25);
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType25);
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType25);
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType25);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder32 = wildcardTypeBuilder8.withUpperBounds(typeArray31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder10);
        org.junit.Assert.assertNotNull(wildcardType11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(wildcardType25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNull(type27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder32);
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test351");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.Type type8 = null;
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        java.lang.reflect.Type type18 = null;
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] { type18 };
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass21, (java.lang.reflect.Type) wildcardClass25);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped27 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass25);
        java.lang.reflect.GenericArrayType genericArrayType28 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass25);
        boolean boolean29 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) genericArrayType28);
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType9, (java.lang.reflect.Type) genericArrayType28);
        boolean boolean31 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type8, (java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder0.withUpperBounds(typeArray33);
        java.lang.reflect.WildcardType wildcardType37 = wildcardTypeBuilder0.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strTyped27);
        org.junit.Assert.assertNotNull(genericArrayType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(wildcardType37);
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test352");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        java.lang.reflect.WildcardType wildcardType16 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType17 = wildcardTypeBuilder8.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType19);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder18.withUpperBounds(typeArray20);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType23 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        java.lang.reflect.Type type28 = null;
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { type28 };
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray30.getClass();
        boolean boolean32 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) wildcardClass31);
        java.lang.reflect.Type type33 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        java.lang.reflect.GenericArrayType genericArrayType44 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass41);
        java.lang.Class<?> wildcardClass45 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) genericArrayType44);
        java.lang.reflect.Type[] typeArray46 = new java.lang.reflect.Type[] { wildcardType23, genericArrayType44 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder22.withUpperBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder21.withUpperBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType49);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder48.withLowerBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder53 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType54 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder53.withUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType58 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder57.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder56.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder62 = wildcardTypeBuilder52.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder8.withUpperBounds(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(type33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertNotNull(genericArrayType44);
        org.junit.Assert.assertNotNull(wildcardClass45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder53);
        org.junit.Assert.assertNotNull(wildcardType54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test353");
        java.lang.Object obj0 = new java.lang.Object();
        java.lang.Class<?> wildcardClass1 = obj0.getClass();
        java.lang.reflect.GenericArrayType genericArrayType2 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass1);
        java.lang.reflect.GenericArrayType genericArrayType3 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass1);
        org.junit.Assert.assertNotNull(wildcardClass1);
        org.junit.Assert.assertNotNull(genericArrayType2);
        org.junit.Assert.assertNotNull(genericArrayType3);
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test354");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder8.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder22 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType23 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder22.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder25.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = wildcardTypeBuilder25.build();
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = wildcardTypeBuilder20.withLowerBounds(typeArray34);
        java.lang.reflect.WildcardType wildcardType36 = wildcardTypeBuilder35.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardType36);
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test355");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.WildcardType wildcardType50 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        java.lang.reflect.Type type52 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType50);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType50);
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder48.withUpperBounds(typeArray54);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType58 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray59 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder57.withUpperBounds(typeArray59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType62 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder61.withUpperBounds(typeArray63);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder60.withUpperBounds(typeArray63);
        java.lang.reflect.WildcardType wildcardType66 = wildcardTypeBuilder60.build();
        java.lang.reflect.Type[] typeArray67 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType66);
        java.lang.reflect.Type[] typeArray68 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray67);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder69 = wildcardTypeBuilder48.withUpperBounds(typeArray68);
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNull(type52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(typeArray67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder69);
        org.junit.Assert.assertNotNull(typeArray70);
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test356");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType36 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder35.withUpperBounds(typeArray37);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType40 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder39.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder38.withUpperBounds(typeArray41);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder34.withUpperBounds(typeArray41);
        java.lang.reflect.WildcardType wildcardType45 = wildcardTypeBuilder44.build();
        java.lang.String str46 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType45);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardType36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "? super java.lang.Object" + "'", str46, "? super java.lang.Object");
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test357");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = wildcardTypeBuilder20.withLowerBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType28 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder27.withUpperBounds(typeArray29);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder31 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType32 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder31.withUpperBounds(typeArray33);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder35 = wildcardTypeBuilder30.withUpperBounds(typeArray33);
        java.lang.reflect.WildcardType wildcardType36 = wildcardTypeBuilder30.build();
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType36);
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.isArrayType((java.lang.reflect.Type) wildcardType36);
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder26.withUpperBounds(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardType28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder31);
        org.junit.Assert.assertNotNull(wildcardType32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder35);
        org.junit.Assert.assertNotNull(wildcardType36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test358");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType15 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder14.withUpperBounds(typeArray16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType19 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        boolean boolean28 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) wildcardClass27);
        java.lang.reflect.Type type29 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        boolean boolean38 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass33, (java.lang.reflect.Type) wildcardClass37);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped39 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass37);
        java.lang.reflect.GenericArrayType genericArrayType40 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass37);
        java.lang.Class<?> wildcardClass41 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass23, (java.lang.reflect.Type) genericArrayType40);
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { wildcardType19, genericArrayType40 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder43 = wildcardTypeBuilder18.withUpperBounds(typeArray42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder17.withUpperBounds(typeArray42);
        java.lang.reflect.WildcardType wildcardType45 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray46 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType45);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder47 = wildcardTypeBuilder44.withLowerBounds(typeArray46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder13.withLowerBounds(typeArray46);
        java.lang.reflect.WildcardType wildcardType49 = wildcardTypeBuilder48.build();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder54 = wildcardTypeBuilder48.withUpperBounds(typeArray53);
        java.lang.reflect.Type[] typeArray55 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder56 = wildcardTypeBuilder48.withUpperBounds(typeArray55);
        java.lang.reflect.WildcardType wildcardType57 = wildcardTypeBuilder56.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardType15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardType19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(type29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strTyped39);
        org.junit.Assert.assertNotNull(genericArrayType40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardType45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder56);
        org.junit.Assert.assertNotNull(wildcardType57);
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test359");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        java.lang.reflect.Type type18 = null;
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] { type18 };
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.Class<?> wildcardClass21 = typeArray20.getClass();
        boolean boolean22 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) wildcardClass21);
        java.lang.reflect.Type type23 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.Type type24 = null;
        java.lang.reflect.Type[] typeArray25 = new java.lang.reflect.Type[] { type24 };
        java.lang.reflect.Type[] typeArray26 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray25);
        java.lang.Class<?> wildcardClass27 = typeArray26.getClass();
        java.lang.reflect.Type type28 = null;
        java.lang.reflect.Type[] typeArray29 = new java.lang.reflect.Type[] { type28 };
        java.lang.reflect.Type[] typeArray30 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray29);
        java.lang.Class<?> wildcardClass31 = typeArray30.getClass();
        boolean boolean32 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass27, (java.lang.reflect.Type) wildcardClass31);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped33 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass31);
        java.lang.reflect.GenericArrayType genericArrayType34 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass31);
        java.lang.Class<?> wildcardClass35 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass17, (java.lang.reflect.Type) genericArrayType34);
        java.lang.reflect.Type type36 = null;
        java.lang.reflect.Type[] typeArray37 = new java.lang.reflect.Type[] { type36 };
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray38.getClass();
        java.lang.reflect.Type type40 = null;
        java.lang.reflect.Type[] typeArray41 = new java.lang.reflect.Type[] { type40 };
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray41);
        java.lang.Class<?> wildcardClass43 = typeArray42.getClass();
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass43);
        java.lang.Object obj45 = new java.lang.Object();
        java.lang.Class<?> wildcardClass46 = obj45.getClass();
        boolean boolean47 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass46);
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.Type[] typeArray49 = new java.lang.reflect.Type[] { type48 };
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray49);
        java.lang.Class<?> wildcardClass51 = typeArray50.getClass();
        java.lang.reflect.Type type52 = null;
        java.lang.reflect.Type[] typeArray53 = new java.lang.reflect.Type[] { type52 };
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray53);
        java.lang.Class<?> wildcardClass55 = typeArray54.getClass();
        boolean boolean56 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass51, (java.lang.reflect.Type) wildcardClass55);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped57 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass55);
        boolean boolean58 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass46, (java.lang.reflect.Type) wildcardClass55);
        boolean boolean59 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType34, (java.lang.reflect.Type) wildcardClass46);
        java.lang.reflect.WildcardType wildcardType60 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType60);
        boolean boolean62 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType34, (java.lang.reflect.Type) wildcardType60);
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType60);
        java.lang.reflect.GenericArrayType genericArrayType64 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType60);
        java.lang.reflect.Type[] typeArray65 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder66 = wildcardTypeBuilder8.withLowerBounds(typeArray65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(wildcardClass31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strTyped33);
        org.junit.Assert.assertNotNull(genericArrayType34);
        org.junit.Assert.assertNotNull(wildcardClass35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(wildcardClass51);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardClass55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(strTyped57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(wildcardType60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(genericArrayType64);
        org.junit.Assert.assertNotNull(typeArray65);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder66);
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test360");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.WildcardType wildcardType35 = wildcardTypeBuilder30.build();
        java.lang.reflect.GenericArrayType genericArrayType36 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(genericArrayType36);
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test361");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type type1 = null;
        java.lang.reflect.Type[] typeArray2 = new java.lang.reflect.Type[] { type1 };
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.Class<?> wildcardClass4 = typeArray3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.GenericArrayType genericArrayType11 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass8);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass22 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType11, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped23 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType11);
        java.lang.reflect.Type type24 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) genericArrayType11);
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        java.lang.reflect.Type type29 = null;
        java.lang.reflect.Type[] typeArray30 = new java.lang.reflect.Type[] { type29 };
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass28);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        java.lang.reflect.Type type39 = null;
        java.lang.reflect.Type[] typeArray40 = new java.lang.reflect.Type[] { type39 };
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        java.lang.Class<?> wildcardClass42 = typeArray41.getClass();
        boolean boolean43 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass38, (java.lang.reflect.Type) wildcardClass42);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped44 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass42);
        java.lang.reflect.GenericArrayType genericArrayType45 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass42);
        java.lang.Class<?> wildcardClass46 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) genericArrayType45);
        java.lang.Class<?> wildcardClass47 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type24, (java.lang.reflect.Type) wildcardClass28);
        java.lang.reflect.Type type48 = null;
        java.lang.reflect.WildcardType wildcardType49 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType49);
        java.lang.reflect.Type type51 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType49);
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType49);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.Class<?> wildcardClass57 = typeArray56.getClass();
        java.lang.reflect.Type type58 = null;
        java.lang.reflect.Type[] typeArray59 = new java.lang.reflect.Type[] { type58 };
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray59);
        java.lang.Class<?> wildcardClass61 = typeArray60.getClass();
        java.lang.reflect.Type type62 = null;
        java.lang.reflect.Type[] typeArray63 = new java.lang.reflect.Type[] { type62 };
        java.lang.reflect.Type[] typeArray64 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray63);
        java.lang.Class<?> wildcardClass65 = typeArray64.getClass();
        boolean boolean66 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass61, (java.lang.reflect.Type) wildcardClass65);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped67 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass65);
        java.lang.reflect.GenericArrayType genericArrayType68 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass65);
        boolean boolean69 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass57, (java.lang.reflect.Type) genericArrayType68);
        boolean boolean70 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType49, (java.lang.reflect.Type) genericArrayType68);
        boolean boolean71 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type48, (java.lang.reflect.Type) wildcardType49);
        java.lang.reflect.Type[] typeArray72 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType49);
        boolean boolean73 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardClass28, (java.lang.reflect.Type) wildcardType49);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped74 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass28);
        boolean boolean75 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strTyped10);
        org.junit.Assert.assertNotNull(genericArrayType11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(typeUtilsTyped23);
        org.junit.Assert.assertNotNull(type24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(type34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strTyped44);
        org.junit.Assert.assertNotNull(genericArrayType45);
        org.junit.Assert.assertNotNull(wildcardClass46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardType49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNull(type51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(typeArray59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardClass61);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(typeArray64);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(strTyped67);
        org.junit.Assert.assertNotNull(genericArrayType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(typeUtilsTyped74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test362");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType21 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType21);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder23 = wildcardTypeBuilder20.withUpperBounds(typeArray22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = wildcardTypeBuilder19.withUpperBounds(typeArray22);
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder24.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType35 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type36 = null;
        java.lang.reflect.Type[] typeArray37 = new java.lang.reflect.Type[] { type36 };
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray37);
        java.lang.Class<?> wildcardClass39 = typeArray38.getClass();
        java.lang.reflect.Type type40 = null;
        java.lang.reflect.Type[] typeArray41 = new java.lang.reflect.Type[] { type40 };
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray41);
        java.lang.Class<?> wildcardClass43 = typeArray42.getClass();
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) wildcardClass43);
        java.lang.reflect.Type type45 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass39);
        java.lang.reflect.Type type46 = null;
        java.lang.reflect.Type[] typeArray47 = new java.lang.reflect.Type[] { type46 };
        java.lang.reflect.Type[] typeArray48 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray47);
        java.lang.Class<?> wildcardClass49 = typeArray48.getClass();
        java.lang.reflect.Type type50 = null;
        java.lang.reflect.Type[] typeArray51 = new java.lang.reflect.Type[] { type50 };
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray51);
        java.lang.Class<?> wildcardClass53 = typeArray52.getClass();
        boolean boolean54 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass53);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped55 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass53);
        java.lang.reflect.GenericArrayType genericArrayType56 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass53);
        java.lang.Class<?> wildcardClass57 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass39, (java.lang.reflect.Type) genericArrayType56);
        java.lang.reflect.Type[] typeArray58 = new java.lang.reflect.Type[] { wildcardType35, genericArrayType56 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder59 = wildcardTypeBuilder34.withUpperBounds(typeArray58);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder60 = wildcardTypeBuilder33.withUpperBounds(typeArray58);
        java.lang.reflect.WildcardType wildcardType61 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType61);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder63 = wildcardTypeBuilder60.withLowerBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder29.withLowerBounds(typeArray62);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder65 = wildcardTypeBuilder8.withLowerBounds(typeArray62);
        java.lang.reflect.WildcardType wildcardType66 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType67 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray68 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType67);
        java.lang.reflect.Type type69 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType67);
        java.lang.reflect.Type[] typeArray70 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType67);
        java.lang.reflect.Type type71 = null;
        java.lang.reflect.Type[] typeArray72 = new java.lang.reflect.Type[] { type71 };
        java.lang.reflect.Type[] typeArray73 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray72);
        java.lang.reflect.Type[] typeArray74 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray72);
        java.lang.Class<?> wildcardClass75 = typeArray74.getClass();
        java.lang.reflect.Type type76 = null;
        java.lang.reflect.Type[] typeArray77 = new java.lang.reflect.Type[] { type76 };
        java.lang.reflect.Type[] typeArray78 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray77);
        java.lang.Class<?> wildcardClass79 = typeArray78.getClass();
        java.lang.reflect.Type type80 = null;
        java.lang.reflect.Type[] typeArray81 = new java.lang.reflect.Type[] { type80 };
        java.lang.reflect.Type[] typeArray82 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray81);
        java.lang.Class<?> wildcardClass83 = typeArray82.getClass();
        boolean boolean84 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass79, (java.lang.reflect.Type) wildcardClass83);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped85 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass83);
        java.lang.reflect.GenericArrayType genericArrayType86 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass83);
        boolean boolean87 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass75, (java.lang.reflect.Type) genericArrayType86);
        boolean boolean88 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType67, (java.lang.reflect.Type) genericArrayType86);
        java.lang.reflect.Type[] typeArray89 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType67);
        java.lang.reflect.Type[] typeArray90 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray89);
        java.lang.reflect.Type[] typeArray91 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray89);
        java.lang.reflect.Type[] typeArray92 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray89);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder93 = wildcardTypeBuilder8.withLowerBounds(typeArray92);
        java.lang.Class<?> wildcardClass94 = typeArray92.getClass();
        java.lang.String str95 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardClass94);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(wildcardType35);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardClass39);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(wildcardClass43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(type45);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(wildcardClass53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strTyped55);
        org.junit.Assert.assertNotNull(genericArrayType56);
        org.junit.Assert.assertNotNull(wildcardClass57);
        org.junit.Assert.assertNotNull(typeArray58);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder59);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder60);
        org.junit.Assert.assertNotNull(wildcardType61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder65);
        org.junit.Assert.assertNotNull(wildcardType66);
        org.junit.Assert.assertNotNull(wildcardType67);
        org.junit.Assert.assertNotNull(typeArray68);
        org.junit.Assert.assertNull(type69);
        org.junit.Assert.assertNotNull(typeArray70);
        org.junit.Assert.assertNotNull(typeArray72);
        org.junit.Assert.assertNotNull(typeArray73);
        org.junit.Assert.assertNotNull(typeArray74);
        org.junit.Assert.assertNotNull(wildcardClass75);
        org.junit.Assert.assertNotNull(typeArray77);
        org.junit.Assert.assertNotNull(typeArray78);
        org.junit.Assert.assertNotNull(wildcardClass79);
        org.junit.Assert.assertNotNull(typeArray81);
        org.junit.Assert.assertNotNull(typeArray82);
        org.junit.Assert.assertNotNull(wildcardClass83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(strTyped85);
        org.junit.Assert.assertNotNull(genericArrayType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(typeArray89);
        org.junit.Assert.assertNotNull(typeArray90);
        org.junit.Assert.assertNotNull(typeArray91);
        org.junit.Assert.assertNotNull(typeArray92);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder93);
        org.junit.Assert.assertNotNull(wildcardClass94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "java.lang.reflect.Type[]" + "'", str95, "java.lang.reflect.Type[]");
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test363");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        java.lang.reflect.WildcardType wildcardType42 = wildcardTypeBuilder40.build();
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType42);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test364");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray2);
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test365");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = null;
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType2, type11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test366");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type23 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type24 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass18);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertNotNull(type24);
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test367");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean50 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(typeArray52);
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test368");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type type2 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass8 = typeArray7.getClass();
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.Class<?> wildcardClass12 = typeArray11.getClass();
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        boolean boolean17 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass12, (java.lang.reflect.Type) wildcardClass16);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped18 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass16);
        java.lang.reflect.GenericArrayType genericArrayType19 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass16);
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass8, (java.lang.reflect.Type) genericArrayType19);
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType0, (java.lang.reflect.Type) genericArrayType19);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.WildcardType> wildcardTypeTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType19);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNull(type2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strTyped18);
        org.junit.Assert.assertNotNull(genericArrayType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardTypeTyped22);
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test369");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils> typeUtilsTyped2 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeUtilsTyped2);
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test370");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = null;
        java.lang.Class<?> wildcardClass12 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType2, type11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.Type[]> typeArrayTyped14 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardType2);
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.Class<?> wildcardClass16 = wildcardType2.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(wildcardClass12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArrayTyped14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test371");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.GenericArrayType genericArrayType10 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type11 = null;
        java.lang.reflect.Type[] typeArray12 = new java.lang.reflect.Type[] { type11 };
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray12);
        java.lang.Class<?> wildcardClass14 = typeArray13.getClass();
        java.lang.reflect.Type type15 = null;
        java.lang.reflect.Type[] typeArray16 = new java.lang.reflect.Type[] { type15 };
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray16);
        java.lang.Class<?> wildcardClass18 = typeArray17.getClass();
        boolean boolean19 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass14, (java.lang.reflect.Type) wildcardClass18);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped20 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass18);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType10, (java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type22 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass18);
        java.lang.reflect.Type type23 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass18);
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables(type23);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strTyped9);
        org.junit.Assert.assertNotNull(genericArrayType10);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardClass14);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardClass18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strTyped20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(type22);
        org.junit.Assert.assertNotNull(type23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test372");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.Type type9 = null;
        java.lang.reflect.Type[] typeArray10 = new java.lang.reflect.Type[] { type9 };
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = wildcardTypeBuilder8.withUpperBounds(typeArray12);
        java.lang.reflect.WildcardType wildcardType14 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType14);
        java.lang.reflect.Type type16 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType14);
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType14);
        java.lang.reflect.Type type18 = null;
        java.lang.reflect.Type[] typeArray19 = new java.lang.reflect.Type[] { type18 };
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.reflect.Type[] typeArray21 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray19);
        java.lang.Class<?> wildcardClass22 = typeArray21.getClass();
        java.lang.reflect.Type type23 = null;
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { type23 };
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray24);
        java.lang.Class<?> wildcardClass26 = typeArray25.getClass();
        java.lang.reflect.Type type27 = null;
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { type27 };
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray28);
        java.lang.Class<?> wildcardClass30 = typeArray29.getClass();
        boolean boolean31 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass26, (java.lang.reflect.Type) wildcardClass30);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped32 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass30);
        java.lang.reflect.GenericArrayType genericArrayType33 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass30);
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass22, (java.lang.reflect.Type) genericArrayType33);
        boolean boolean35 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType14, (java.lang.reflect.Type) genericArrayType33);
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType14);
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder8.withUpperBounds(typeArray36);
        java.lang.reflect.WildcardType wildcardType40 = wildcardTypeBuilder8.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNull(type16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(wildcardClass22);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardClass26);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardClass30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(strTyped32);
        org.junit.Assert.assertNotNull(genericArrayType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardType40);
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test373");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType10 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType10);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType10);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray14);
        java.lang.reflect.WildcardType wildcardType16 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        java.lang.reflect.Type type18 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType16);
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType16);
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        java.lang.reflect.Type type29 = null;
        java.lang.reflect.Type[] typeArray30 = new java.lang.reflect.Type[] { type29 };
        java.lang.reflect.Type[] typeArray31 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray30);
        java.lang.Class<?> wildcardClass32 = typeArray31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass28, (java.lang.reflect.Type) wildcardClass32);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped34 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.GenericArrayType genericArrayType35 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass32);
        boolean boolean36 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) genericArrayType35);
        boolean boolean37 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardType16, (java.lang.reflect.Type) genericArrayType35);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType16);
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.reflect.Type[] typeArray41 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray40);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder42 = wildcardTypeBuilder8.withLowerBounds(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNull(type12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNull(type18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(typeArray30);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(strTyped34);
        org.junit.Assert.assertNotNull(genericArrayType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(typeArray41);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder42);
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test374");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.reflect.Type type3 = null;
        java.lang.reflect.Type[] typeArray4 = new java.lang.reflect.Type[] { type3 };
        java.lang.reflect.Type[] typeArray5 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray4);
        java.lang.Class<?> wildcardClass6 = typeArray5.getClass();
        java.lang.reflect.Type type7 = null;
        java.lang.reflect.Type[] typeArray8 = new java.lang.reflect.Type[] { type7 };
        java.lang.reflect.Type[] typeArray9 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray8);
        java.lang.Class<?> wildcardClass10 = typeArray9.getClass();
        boolean boolean11 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) wildcardClass10);
        java.lang.reflect.Type type12 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.Type type13 = null;
        java.lang.reflect.Type[] typeArray14 = new java.lang.reflect.Type[] { type13 };
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray14);
        java.lang.Class<?> wildcardClass16 = typeArray15.getClass();
        java.lang.reflect.Type type17 = null;
        java.lang.reflect.Type[] typeArray18 = new java.lang.reflect.Type[] { type17 };
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray18);
        java.lang.Class<?> wildcardClass20 = typeArray19.getClass();
        boolean boolean21 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass16, (java.lang.reflect.Type) wildcardClass20);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped22 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass20);
        java.lang.reflect.GenericArrayType genericArrayType23 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass20);
        java.lang.Class<?> wildcardClass24 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass6, (java.lang.reflect.Type) genericArrayType23);
        boolean boolean25 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) wildcardTypeBuilder0, (java.lang.reflect.Type) wildcardClass6);
        java.lang.reflect.WildcardType wildcardType26 = wildcardTypeBuilder0.build();
        java.lang.Class<?> wildcardClass27 = wildcardTypeBuilder0.getClass();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(typeArray9);
        org.junit.Assert.assertNotNull(wildcardClass10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(type12);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(wildcardClass20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strTyped22);
        org.junit.Assert.assertNotNull(genericArrayType23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(wildcardType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test375");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType1);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test376");
        java.lang.reflect.WildcardType wildcardType0 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray1 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType0);
        org.junit.Assert.assertNotNull(wildcardType0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test377");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withUpperBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder44.withUpperBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder44.build();
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder40.withUpperBounds(typeArray51);
        java.lang.reflect.Type type53 = null;
        java.lang.reflect.Type[] typeArray54 = new java.lang.reflect.Type[] { type53 };
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray54);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder58 = wildcardTypeBuilder52.withUpperBounds(typeArray57);
        java.lang.reflect.WildcardType wildcardType59 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray60 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType59);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder61 = wildcardTypeBuilder52.withLowerBounds(typeArray60);
        java.lang.reflect.WildcardType wildcardType62 = wildcardTypeBuilder52.build();
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder58);
        org.junit.Assert.assertNotNull(wildcardType59);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder61);
        org.junit.Assert.assertNotNull(wildcardType62);
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test378");
        java.lang.reflect.Type type0 = null;
        java.lang.reflect.Type[] typeArray1 = new java.lang.reflect.Type[] { type0 };
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray1);
        java.lang.Class<?> wildcardClass3 = typeArray2.getClass();
        java.lang.reflect.Type type4 = null;
        java.lang.reflect.Type[] typeArray5 = new java.lang.reflect.Type[] { type4 };
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray5);
        java.lang.Class<?> wildcardClass7 = typeArray6.getClass();
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) wildcardClass7);
        java.lang.reflect.Type type9 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        java.lang.reflect.Type type14 = null;
        java.lang.reflect.Type[] typeArray15 = new java.lang.reflect.Type[] { type14 };
        java.lang.reflect.Type[] typeArray16 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray15);
        java.lang.Class<?> wildcardClass17 = typeArray16.getClass();
        boolean boolean18 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass13, (java.lang.reflect.Type) wildcardClass17);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped19 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass17);
        java.lang.reflect.GenericArrayType genericArrayType20 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass17);
        java.lang.Class<?> wildcardClass21 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass3, (java.lang.reflect.Type) genericArrayType20);
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.Class<?> wildcardClass25 = typeArray24.getClass();
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        boolean boolean30 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass29);
        java.lang.Object obj31 = new java.lang.Object();
        java.lang.Class<?> wildcardClass32 = obj31.getClass();
        boolean boolean33 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass25, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.Type type34 = null;
        java.lang.reflect.Type[] typeArray35 = new java.lang.reflect.Type[] { type34 };
        java.lang.reflect.Type[] typeArray36 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray35);
        java.lang.Class<?> wildcardClass37 = typeArray36.getClass();
        java.lang.reflect.Type type38 = null;
        java.lang.reflect.Type[] typeArray39 = new java.lang.reflect.Type[] { type38 };
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray39);
        java.lang.Class<?> wildcardClass41 = typeArray40.getClass();
        boolean boolean42 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass37, (java.lang.reflect.Type) wildcardClass41);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped43 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass41);
        boolean boolean44 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass32, (java.lang.reflect.Type) wildcardClass41);
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardClass32);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        boolean boolean48 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) genericArrayType20, (java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.Type type50 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType46);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNotNull(typeArray5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardClass7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(type9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(typeArray16);
        org.junit.Assert.assertNotNull(wildcardClass17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strTyped19);
        org.junit.Assert.assertNotNull(genericArrayType20);
        org.junit.Assert.assertNotNull(wildcardClass21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardClass25);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(wildcardClass37);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strTyped43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNull(type50);
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test379");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType9 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType9);
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = wildcardTypeBuilder8.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType17 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = wildcardTypeBuilder16.withUpperBounds(typeArray18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder20 = wildcardTypeBuilder15.withUpperBounds(typeArray18);
        java.lang.reflect.WildcardType wildcardType21 = wildcardTypeBuilder20.build();
        java.lang.reflect.Type type22 = null;
        java.lang.reflect.Type[] typeArray23 = new java.lang.reflect.Type[] { type22 };
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        java.lang.reflect.Type[] typeArray25 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = wildcardTypeBuilder20.withLowerBounds(typeArray23);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder27 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType28 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray29 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder27.withUpperBounds(typeArray29);
        java.lang.reflect.WildcardType wildcardType31 = wildcardTypeBuilder27.build();
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray34 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray33);
        java.lang.reflect.Type[] typeArray35 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray34);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder36 = wildcardTypeBuilder26.withUpperBounds(typeArray35);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder37 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType38 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder37.withUpperBounds(typeArray39);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder41 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType42 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType42);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder41.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = wildcardTypeBuilder40.withUpperBounds(typeArray43);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.Type type48 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType46);
        java.lang.reflect.Type[] typeArray49 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray50 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType46);
        java.lang.reflect.Type[] typeArray51 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray50);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder52 = wildcardTypeBuilder45.withUpperBounds(typeArray50);
        java.lang.reflect.WildcardType wildcardType53 = wildcardTypeBuilder52.build();
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType53);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder55 = wildcardTypeBuilder26.withUpperBounds(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
        org.junit.Assert.assertNull(type11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardType17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder20);
        org.junit.Assert.assertNotNull(wildcardType21);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder27);
        org.junit.Assert.assertNotNull(wildcardType28);
        org.junit.Assert.assertNotNull(typeArray29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(typeArray34);
        org.junit.Assert.assertNotNull(typeArray35);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder36);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder37);
        org.junit.Assert.assertNotNull(wildcardType38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder41);
        org.junit.Assert.assertNotNull(wildcardType42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNull(type48);
        org.junit.Assert.assertNotNull(typeArray49);
        org.junit.Assert.assertNotNull(typeArray50);
        org.junit.Assert.assertNotNull(typeArray51);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder52);
        org.junit.Assert.assertNotNull(wildcardType53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder55);
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test380");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.Object obj2 = new java.lang.Object();
        java.lang.Class<?> wildcardClass3 = obj2.getClass();
        java.lang.reflect.Type type4 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass3);
        java.lang.Class<?> wildcardClass5 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardType1, type4);
        java.lang.String str6 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType1);
        java.lang.reflect.GenericArrayType genericArrayType7 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType1);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) genericArrayType7);
        org.apache.commons.lang3.reflect.Typed<org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder> wildcardTypeBuilderTyped9 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) genericArrayType7);
        java.lang.String str10 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) genericArrayType7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardClass3);
        org.junit.Assert.assertNull(type4);
        org.junit.Assert.assertNull(wildcardClass5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "?" + "'", str6, "?");
        org.junit.Assert.assertNotNull(genericArrayType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(wildcardTypeBuilderTyped9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "?[]" + "'", str10, "?[]");
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test381");
        java.lang.reflect.Type type0 = null;
        java.lang.Object obj1 = new java.lang.Object();
        java.lang.Class<?> wildcardClass2 = obj1.getClass();
        java.lang.reflect.WildcardType wildcardType3 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType3);
        java.lang.reflect.Type type5 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType3);
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType3);
        boolean boolean7 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass2, (java.lang.reflect.Type) wildcardType3);
        boolean boolean8 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardClass2);
        boolean boolean9 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable(type0, (java.lang.reflect.Type) wildcardClass2);
        org.apache.commons.lang3.reflect.Typed<java.lang.reflect.ParameterizedType> parameterizedTypeTyped10 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardClass2);
        org.junit.Assert.assertNotNull(wildcardType3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNull(type5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(parameterizedTypeTyped10);
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test382");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type2 = null;
        java.lang.reflect.Type[] typeArray3 = new java.lang.reflect.Type[] { type2 };
        java.lang.reflect.Type[] typeArray4 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray3);
        java.lang.Class<?> wildcardClass5 = typeArray4.getClass();
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type11 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass5);
        java.lang.reflect.Type type12 = null;
        java.lang.reflect.Type[] typeArray13 = new java.lang.reflect.Type[] { type12 };
        java.lang.reflect.Type[] typeArray14 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray13);
        java.lang.Class<?> wildcardClass15 = typeArray14.getClass();
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        boolean boolean20 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass15, (java.lang.reflect.Type) wildcardClass19);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped21 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass19);
        java.lang.reflect.GenericArrayType genericArrayType22 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass19);
        java.lang.Class<?> wildcardClass23 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass5, (java.lang.reflect.Type) genericArrayType22);
        java.lang.reflect.Type[] typeArray24 = new java.lang.reflect.Type[] { wildcardType1, genericArrayType22 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder25 = wildcardTypeBuilder0.withUpperBounds(typeArray24);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder26 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType27 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType27);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder26.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder33 = wildcardTypeBuilder30.withUpperBounds(typeArray32);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder29.withUpperBounds(typeArray32);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.reflect.Type[] typeArray38 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder39 = wildcardTypeBuilder34.withUpperBounds(typeArray38);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder40 = wildcardTypeBuilder25.withLowerBounds(typeArray38);
        java.lang.reflect.WildcardType wildcardType41 = wildcardTypeBuilder40.build();
        java.lang.reflect.Type[] typeArray42 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        java.lang.reflect.Type[] typeArray44 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType41);
        java.lang.reflect.Type[] typeArray45 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(typeArray4);
        org.junit.Assert.assertNotNull(wildcardClass5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(type11);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(typeArray14);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strTyped21);
        org.junit.Assert.assertNotNull(genericArrayType22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder26);
        org.junit.Assert.assertNotNull(wildcardType27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder40);
        org.junit.Assert.assertNotNull(wildcardType41);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(typeArray44);
        org.junit.Assert.assertNotNull(typeArray45);
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test383");
        java.lang.reflect.Type type0 = null;
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder1 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType2 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray3 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = wildcardTypeBuilder1.withUpperBounds(typeArray3);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder5 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType6 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder5.withUpperBounds(typeArray7);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = wildcardTypeBuilder4.withUpperBounds(typeArray7);
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.reflect.Type[] typeArray13 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder14 = wildcardTypeBuilder9.withUpperBounds(typeArray13);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder15 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType16 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray17 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType16);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder18 = wildcardTypeBuilder15.withUpperBounds(typeArray17);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder19 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType20 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type21 = null;
        java.lang.reflect.Type[] typeArray22 = new java.lang.reflect.Type[] { type21 };
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray22);
        java.lang.Class<?> wildcardClass24 = typeArray23.getClass();
        java.lang.reflect.Type type25 = null;
        java.lang.reflect.Type[] typeArray26 = new java.lang.reflect.Type[] { type25 };
        java.lang.reflect.Type[] typeArray27 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray26);
        java.lang.Class<?> wildcardClass28 = typeArray27.getClass();
        boolean boolean29 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) wildcardClass28);
        java.lang.reflect.Type type30 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass24);
        java.lang.reflect.Type type31 = null;
        java.lang.reflect.Type[] typeArray32 = new java.lang.reflect.Type[] { type31 };
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray32);
        java.lang.Class<?> wildcardClass34 = typeArray33.getClass();
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        java.lang.Class<?> wildcardClass38 = typeArray37.getClass();
        boolean boolean39 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass34, (java.lang.reflect.Type) wildcardClass38);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped40 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass38);
        java.lang.reflect.GenericArrayType genericArrayType41 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass38);
        java.lang.Class<?> wildcardClass42 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass24, (java.lang.reflect.Type) genericArrayType41);
        java.lang.reflect.Type[] typeArray43 = new java.lang.reflect.Type[] { wildcardType20, genericArrayType41 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder44 = wildcardTypeBuilder19.withUpperBounds(typeArray43);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder45 = wildcardTypeBuilder18.withUpperBounds(typeArray43);
        java.lang.reflect.WildcardType wildcardType46 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray47 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType46);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder48 = wildcardTypeBuilder45.withLowerBounds(typeArray47);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder49 = wildcardTypeBuilder14.withLowerBounds(typeArray47);
        java.lang.reflect.WildcardType wildcardType50 = wildcardTypeBuilder49.build();
        java.lang.reflect.WildcardType wildcardType51 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray52 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType51);
        java.lang.reflect.Type type53 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardType51);
        java.lang.reflect.Type[] typeArray54 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType51);
        java.lang.reflect.Type[] typeArray55 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType51);
        java.lang.reflect.Type[] typeArray56 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray55);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder57 = wildcardTypeBuilder49.withUpperBounds(typeArray55);
        java.lang.reflect.WildcardType wildcardType58 = wildcardTypeBuilder57.build();
        java.lang.reflect.Type type59 = null;
        java.lang.reflect.Type[] typeArray60 = new java.lang.reflect.Type[] { type59 };
        java.lang.reflect.Type[] typeArray61 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        java.lang.reflect.Type[] typeArray62 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        java.lang.reflect.Type[] typeArray63 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray60);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder64 = wildcardTypeBuilder57.withLowerBounds(typeArray60);
        java.lang.reflect.WildcardType wildcardType65 = wildcardTypeBuilder57.build();
        java.lang.reflect.WildcardType wildcardType66 = wildcardTypeBuilder57.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?> wildcardClass67 = org.apache.commons.lang3.reflect.TypeUtils.getRawType(type0, (java.lang.reflect.Type) wildcardType66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: unknown type: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardTypeBuilder1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(typeArray3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder5);
        org.junit.Assert.assertNotNull(wildcardType6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(typeArray13);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder14);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder15);
        org.junit.Assert.assertNotNull(wildcardType16);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder18);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder19);
        org.junit.Assert.assertNotNull(wildcardType20);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardClass24);
        org.junit.Assert.assertNotNull(typeArray26);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(type30);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardClass34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardClass38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strTyped40);
        org.junit.Assert.assertNotNull(genericArrayType41);
        org.junit.Assert.assertNotNull(wildcardClass42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder44);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder45);
        org.junit.Assert.assertNotNull(wildcardType46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder48);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder49);
        org.junit.Assert.assertNotNull(wildcardType50);
        org.junit.Assert.assertNotNull(wildcardType51);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNull(type53);
        org.junit.Assert.assertNotNull(typeArray54);
        org.junit.Assert.assertNotNull(typeArray55);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder57);
        org.junit.Assert.assertNotNull(wildcardType58);
        org.junit.Assert.assertNotNull(typeArray60);
        org.junit.Assert.assertNotNull(typeArray61);
        org.junit.Assert.assertNotNull(typeArray62);
        org.junit.Assert.assertNotNull(typeArray63);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder64);
        org.junit.Assert.assertNotNull(wildcardType65);
        org.junit.Assert.assertNotNull(wildcardType66);
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test384");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type type6 = null;
        java.lang.reflect.Type[] typeArray7 = new java.lang.reflect.Type[] { type6 };
        java.lang.reflect.Type[] typeArray8 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray7);
        java.lang.Class<?> wildcardClass9 = typeArray8.getClass();
        java.lang.reflect.Type type10 = null;
        java.lang.reflect.Type[] typeArray11 = new java.lang.reflect.Type[] { type10 };
        java.lang.reflect.Type[] typeArray12 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray11);
        java.lang.Class<?> wildcardClass13 = typeArray12.getClass();
        boolean boolean14 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) wildcardClass13);
        java.lang.reflect.Type type15 = org.apache.commons.lang3.reflect.TypeUtils.getArrayComponentType((java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type type16 = null;
        java.lang.reflect.Type[] typeArray17 = new java.lang.reflect.Type[] { type16 };
        java.lang.reflect.Type[] typeArray18 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray17);
        java.lang.Class<?> wildcardClass19 = typeArray18.getClass();
        java.lang.reflect.Type type20 = null;
        java.lang.reflect.Type[] typeArray21 = new java.lang.reflect.Type[] { type20 };
        java.lang.reflect.Type[] typeArray22 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray21);
        java.lang.Class<?> wildcardClass23 = typeArray22.getClass();
        boolean boolean24 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass19, (java.lang.reflect.Type) wildcardClass23);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped25 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass23);
        java.lang.reflect.GenericArrayType genericArrayType26 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass23);
        java.lang.Class<?> wildcardClass27 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass9, (java.lang.reflect.Type) genericArrayType26);
        java.lang.reflect.Type[] typeArray28 = new java.lang.reflect.Type[] { wildcardType5, genericArrayType26 };
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder29 = wildcardTypeBuilder4.withUpperBounds(typeArray28);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder30 = wildcardTypeBuilder3.withUpperBounds(typeArray28);
        java.lang.reflect.WildcardType wildcardType31 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType31);
        java.lang.reflect.Type[] typeArray33 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType31);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder34 = wildcardTypeBuilder30.withLowerBounds(typeArray33);
        java.lang.reflect.Type type35 = null;
        java.lang.reflect.Type[] typeArray36 = new java.lang.reflect.Type[] { type35 };
        java.lang.reflect.Type[] typeArray37 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray36);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder38 = wildcardTypeBuilder34.withLowerBounds(typeArray36);
        java.lang.reflect.WildcardType wildcardType39 = wildcardTypeBuilder34.build();
        java.lang.reflect.Type[] typeArray40 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType39);
        java.lang.String str41 = org.apache.commons.lang3.reflect.TypeUtils.toString((java.lang.reflect.Type) wildcardType39);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(typeArray8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(typeArray12);
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(type15);
        org.junit.Assert.assertNotNull(typeArray17);
        org.junit.Assert.assertNotNull(typeArray18);
        org.junit.Assert.assertNotNull(wildcardClass19);
        org.junit.Assert.assertNotNull(typeArray21);
        org.junit.Assert.assertNotNull(typeArray22);
        org.junit.Assert.assertNotNull(wildcardClass23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strTyped25);
        org.junit.Assert.assertNotNull(genericArrayType26);
        org.junit.Assert.assertNotNull(wildcardClass27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder29);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder30);
        org.junit.Assert.assertNotNull(wildcardType31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(typeArray33);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder34);
        org.junit.Assert.assertNotNull(typeArray36);
        org.junit.Assert.assertNotNull(typeArray37);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder38);
        org.junit.Assert.assertNotNull(wildcardType39);
        org.junit.Assert.assertNotNull(typeArray40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "? extends ? & java.lang.reflect.Type[][]" + "'", str41, "? extends ? & java.lang.reflect.Type[][]");
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test385");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType2 = wildcardTypeBuilder0.build();
        java.lang.Object obj3 = new java.lang.Object();
        java.lang.Class<?> wildcardClass4 = obj3.getClass();
        java.lang.reflect.Type type5 = null;
        java.lang.reflect.Type[] typeArray6 = new java.lang.reflect.Type[] { type5 };
        java.lang.reflect.Type[] typeArray7 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray6);
        java.lang.Class<?> wildcardClass8 = typeArray6.getClass();
        java.lang.Class<?> wildcardClass9 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass4, (java.lang.reflect.Type) wildcardClass8);
        boolean boolean10 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType2, (java.lang.reflect.Type) wildcardClass9);
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType2);
        java.lang.reflect.GenericArrayType genericArrayType12 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardType2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(wildcardType2);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(typeArray7);
        org.junit.Assert.assertNotNull(wildcardClass8);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(genericArrayType12);
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test386");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType10 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder9.withUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType14 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = wildcardTypeBuilder13.withUpperBounds(typeArray15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray15);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder12.build();
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder8.withUpperBounds(typeArray20);
        java.lang.reflect.WildcardType wildcardType22 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray23 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType22);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder24 = wildcardTypeBuilder21.withUpperBounds(typeArray23);
        java.lang.reflect.WildcardType wildcardType25 = wildcardTypeBuilder21.build();
        boolean boolean26 = org.apache.commons.lang3.reflect.TypeUtils.containsTypeVariables((java.lang.reflect.Type) wildcardType25);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder24);
        org.junit.Assert.assertNotNull(wildcardType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test387");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        java.lang.reflect.WildcardType wildcardType4 = wildcardTypeBuilder0.build();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitUpperBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder0.withLowerBounds(typeArray6);
        java.lang.reflect.WildcardType wildcardType8 = wildcardTypeBuilder7.build();
        java.lang.reflect.WildcardType wildcardType9 = wildcardTypeBuilder7.build();
        java.lang.reflect.Type[] typeArray10 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType9);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardType4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardType8);
        org.junit.Assert.assertNotNull(wildcardType9);
        org.junit.Assert.assertNotNull(typeArray10);
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test388");
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder0 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType1 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray2 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType1);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder3 = wildcardTypeBuilder0.withUpperBounds(typeArray2);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder4 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType5 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray6 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType5);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder7 = wildcardTypeBuilder4.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder8 = wildcardTypeBuilder3.withUpperBounds(typeArray6);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder9 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType10 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray11 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType10);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder12 = wildcardTypeBuilder9.withUpperBounds(typeArray11);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder13 = org.apache.commons.lang3.reflect.TypeUtils.wildcardType();
        java.lang.reflect.WildcardType wildcardType14 = org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL;
        java.lang.reflect.Type[] typeArray15 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType14);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder16 = wildcardTypeBuilder13.withUpperBounds(typeArray15);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder17 = wildcardTypeBuilder12.withUpperBounds(typeArray15);
        java.lang.reflect.WildcardType wildcardType18 = wildcardTypeBuilder12.build();
        java.lang.reflect.Type[] typeArray19 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        java.lang.reflect.Type[] typeArray20 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType18);
        org.apache.commons.lang3.reflect.TypeUtils.WildcardTypeBuilder wildcardTypeBuilder21 = wildcardTypeBuilder8.withUpperBounds(typeArray20);
        java.lang.reflect.WildcardType wildcardType22 = wildcardTypeBuilder8.build();
        java.lang.reflect.WildcardType wildcardType23 = wildcardTypeBuilder8.build();
        java.lang.reflect.Type[] typeArray24 = org.apache.commons.lang3.reflect.TypeUtils.getImplicitLowerBounds(wildcardType23);
        java.lang.reflect.Type type26 = null;
        java.lang.reflect.Type[] typeArray27 = new java.lang.reflect.Type[] { type26 };
        java.lang.reflect.Type[] typeArray28 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray27);
        java.lang.Class<?> wildcardClass29 = typeArray28.getClass();
        java.lang.reflect.Type type30 = null;
        java.lang.reflect.Type[] typeArray31 = new java.lang.reflect.Type[] { type30 };
        java.lang.reflect.Type[] typeArray32 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray31);
        java.lang.Class<?> wildcardClass33 = typeArray32.getClass();
        boolean boolean34 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass29, (java.lang.reflect.Type) wildcardClass33);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped35 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.GenericArrayType genericArrayType36 = org.apache.commons.lang3.reflect.TypeUtils.genericArrayType((java.lang.reflect.Type) wildcardClass33);
        java.lang.reflect.Type type37 = null;
        java.lang.reflect.Type[] typeArray38 = new java.lang.reflect.Type[] { type37 };
        java.lang.reflect.Type[] typeArray39 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray38);
        java.lang.Class<?> wildcardClass40 = typeArray39.getClass();
        java.lang.reflect.Type type41 = null;
        java.lang.reflect.Type[] typeArray42 = new java.lang.reflect.Type[] { type41 };
        java.lang.reflect.Type[] typeArray43 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray42);
        java.lang.Class<?> wildcardClass44 = typeArray43.getClass();
        boolean boolean45 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass40, (java.lang.reflect.Type) wildcardClass44);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped46 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass44);
        java.lang.Class<?> wildcardClass47 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) genericArrayType36, (java.lang.reflect.Type) wildcardClass44);
        java.lang.reflect.Type type48 = null;
        java.lang.Class<?> wildcardClass49 = org.apache.commons.lang3.reflect.TypeUtils.getRawType((java.lang.reflect.Type) wildcardClass47, type48);
        boolean boolean50 = org.apache.commons.lang3.reflect.TypeUtils.isInstance((java.lang.Object) '4', (java.lang.reflect.Type) wildcardClass49);
        java.lang.reflect.Type type51 = null;
        java.lang.reflect.Type[] typeArray52 = new java.lang.reflect.Type[] { type51 };
        java.lang.reflect.Type[] typeArray53 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray52);
        java.lang.Class<?> wildcardClass54 = typeArray53.getClass();
        java.lang.reflect.Type type55 = null;
        java.lang.reflect.Type[] typeArray56 = new java.lang.reflect.Type[] { type55 };
        java.lang.reflect.Type[] typeArray57 = org.apache.commons.lang3.reflect.TypeUtils.normalizeUpperBounds(typeArray56);
        java.lang.Class<?> wildcardClass58 = typeArray57.getClass();
        boolean boolean59 = org.apache.commons.lang3.reflect.TypeUtils.equals((java.lang.reflect.Type) wildcardClass54, (java.lang.reflect.Type) wildcardClass58);
        org.apache.commons.lang3.reflect.Typed<java.lang.String> strTyped60 = org.apache.commons.lang3.reflect.TypeUtils.wrap((java.lang.reflect.Type) wildcardClass58);
        boolean boolean61 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardClass49, (java.lang.reflect.Type) wildcardClass58);
        boolean boolean62 = org.apache.commons.lang3.reflect.TypeUtils.isAssignable((java.lang.reflect.Type) wildcardType23, (java.lang.reflect.Type) wildcardClass49);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder0);
        org.junit.Assert.assertNotNull(wildcardType1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder3);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder4);
        org.junit.Assert.assertNotNull(wildcardType5);
        org.junit.Assert.assertNotNull(typeArray6);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder7);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder8);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder9);
        org.junit.Assert.assertNotNull(wildcardType10);
        org.junit.Assert.assertNotNull(typeArray11);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder12);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder13);
        org.junit.Assert.assertNotNull(wildcardType14);
        org.junit.Assert.assertNotNull(typeArray15);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder16);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder17);
        org.junit.Assert.assertNotNull(wildcardType18);
        org.junit.Assert.assertNotNull(typeArray19);
        org.junit.Assert.assertNotNull(typeArray20);
        org.junit.Assert.assertNotNull(wildcardTypeBuilder21);
        org.junit.Assert.assertNotNull(wildcardType22);
        org.junit.Assert.assertNotNull(wildcardType23);
        org.junit.Assert.assertNotNull(typeArray24);
        org.junit.Assert.assertNotNull(typeArray27);
        org.junit.Assert.assertNotNull(typeArray28);
        org.junit.Assert.assertNotNull(wildcardClass29);
        org.junit.Assert.assertNotNull(typeArray31);
        org.junit.Assert.assertNotNull(typeArray32);
        org.junit.Assert.assertNotNull(wildcardClass33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strTyped35);
        org.junit.Assert.assertNotNull(genericArrayType36);
        org.junit.Assert.assertNotNull(typeArray38);
        org.junit.Assert.assertNotNull(typeArray39);
        org.junit.Assert.assertNotNull(wildcardClass40);
        org.junit.Assert.assertNotNull(typeArray42);
        org.junit.Assert.assertNotNull(typeArray43);
        org.junit.Assert.assertNotNull(wildcardClass44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(strTyped46);
        org.junit.Assert.assertNotNull(wildcardClass47);
        org.junit.Assert.assertNotNull(wildcardClass49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(typeArray52);
        org.junit.Assert.assertNotNull(typeArray53);
        org.junit.Assert.assertNotNull(wildcardClass54);
        org.junit.Assert.assertNotNull(typeArray56);
        org.junit.Assert.assertNotNull(typeArray57);
        org.junit.Assert.assertNotNull(wildcardClass58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(strTyped60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }
}

