/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was automatically generated by EvoSuite
 * Fri May 12 15:19:47 GMT 2023
 */

package evosuite.org.apache.commons.lang3;

import evosuite.org.apache.commons.lang3.ThreadUtils_ESTest_scaffolding;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Duration;
import java.util.Collection;
import java.util.function.Predicate;
import org.apache.commons.lang3.ThreadUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ThreadUtils_ESTest extends ThreadUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      ThreadUtils.sleep(duration0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockThread mockThread0 = new MockThread();
      Duration duration0 = Duration.ofMinutes(0L);
      ThreadUtils.join(mockThread0, duration0);
      assertEquals(0, mockThread0.countStackFrames());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Collection<Thread> collection0 = ThreadUtils.findThreadsByName("!tXHhmi|SvO+");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Thread thread0 = ThreadUtils.findThreadById(11L);
      assertFalse(thread0.isInterrupted());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes((-27L));
      // Undeclared exception!
      try { 
        ThreadUtils.sleepQuietly(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes((-3874L));
      // Undeclared exception!
      try { 
        ThreadUtils.join((Thread) null, duration0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadsByName((String) null, threadGroup0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadsByName((String) null, "n2a4a *cG");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreads((Predicate<Thread>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreads(threadGroup0, false, (Predicate<Thread>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The predicate must not be null
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadGroupsByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-331L), threadGroup0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(1L, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // threadGroupName
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      ThreadUtils.findThreads(threadGroup0, true, predicate0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual((Object) null);
      ThreadUtils.findThreadGroups(threadGroup0, true, predicate0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Thread thread0 = ThreadUtils.findThreadById(720L);
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Thread thread0 = ThreadUtils.findThreadById(1L);
      assertFalse(thread0.isDaemon());
      assertNotNull(thread0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Predicate<ThreadGroup> predicate0 = Predicate.isEqual(object0);
      Collection<ThreadGroup> collection0 = ThreadUtils.findThreadGroups(predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Thread> predicate0 = Predicate.isEqual(object0);
      Collection<Thread> collection0 = ThreadUtils.findThreads(predicate0);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.ofSeconds((-585L), (-585L));
      // Undeclared exception!
      try { 
        ThreadUtils.sleep(duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Collection<ThreadGroup> collection0 = ThreadUtils.findThreadGroupsByName("main");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Thread thread0 = ThreadUtils.findThreadById(1L, threadGroup0);
      assertEquals("system", threadGroup0.getName());
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      Thread thread0 = ThreadUtils.findThreadById(5657L, threadGroup0);
      assertEquals("system", threadGroup0.getName());
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Thread thread0 = ThreadUtils.findThreadById(469L, "main");
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadById((-2662L), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The thread id must be greater than zero
         //
         verifyException("org.apache.commons.lang3.ThreadUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Thread thread0 = ThreadUtils.findThreadById(1L, "An empty string is not a valid number");
      assertNull(thread0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Collection<ThreadGroup> collection0 = ThreadUtils.getAllThreadGroups();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ThreadUtils.findThreadsByName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreadUtils threadUtils0 = new ThreadUtils();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Collection<Thread> collection0 = ThreadUtils.findThreadsByName("", "");
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Collection<Thread> collection0 = ThreadUtils.getAllThreads();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.ofMinutes(0L);
      ThreadUtils.sleepQuietly(duration0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      ThreadUtils.findThreadsByName("#", threadGroup0);
      assertEquals("system", threadGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ThreadGroup threadGroup0 = ThreadUtils.getSystemThreadGroup();
      MockThread mockThread0 = new MockThread(threadGroup0, "org.apache.commons.lang3.LongRange");
      Duration duration0 = Duration.ofDays((-54L));
      // Undeclared exception!
      try { 
        ThreadUtils.join(mockThread0, duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // timeout value is negative
         //
         verifyException("java.lang.Thread", e);
      }
  }
}
